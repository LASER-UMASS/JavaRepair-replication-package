#####################
# PURPOSE:     helper script used to combine the patch-quality assessment results 
# 	       generated by evaluating a produced patch on 10 held-out randomly 
# 	       generated test suites using EvoSuite.
# INPUT:       path to the csv file that lists the test execution results for individual 
# 	       sub suites
# OUTPUT:      (printed on terminal) comma separated list of project,defect,patch,totaltests,failingtests,passingtests,failpercentage,passpercentage
# 	       where the passpercentage indicates the patch quality score (total #tests passed in 10 sub-suites / total #tests in 10 sub-suites * 100) 
# CMD TO RUN:  python consolidate.py <path to csv file> 
#	       (e.g., python consolidate.py ../../../results/RQ1/patch-quality-assessment/gp_rq1_es3_quality.csv) 
#####################
import sys

evaluatedpatches = []
defect = {}
filepath = sys.argv[1]
f = open(filepath)
totaltests = 0.0
totalfailingtests = 0.0
prevproject = ""
prevbug = ""
prevpatch = ""
patchcount = 0
for line in f:
	record = line.split(",")
	if "Project" in record:
		continue
	project = record[0]
	bug = record[1]
	patch = record[2]
	TSSeed = int(record[3].strip())
	NumberOfTests = float(record[4].strip())
	NumberOfFailingTests = float(record[5].strip())	
	if TSSeed == 1 and prevpatch != "":
		patchcount += 1
		if (prevproject,prevbug,prevpatch) not in defect:
			defect[(prevproject,prevbug,prevpatch)] = (totaltests, totalfailingtests, totaltests-totalfailingtests, float(totalfailingtests/totaltests)*100.0, float((totaltests-totalfailingtests)/totaltests)*100.0)
			evaluatedpatches.append(prevpatch)
		totaltests = NumberOfTests
		totalfailingtests = NumberOfFailingTests
	else:
		totaltests += NumberOfTests
		totalfailingtests += NumberOfFailingTests
	if TSSeed == 10:
		prevpatch = patch
		prevproject = project
		prevbug = bug

# the last patch entry needs to be added at the end of the loop
if (project,bug,patch) not in defect:
	defect[(project,bug,patch)] = (totaltests, totalfailingtests, totaltests-totalfailingtests, float(totalfailingtests/totaltests)*100.0, float((totaltests-totalfailingtests)/totaltests)*100.0)
	evaluatedpatches.append(prevpatch)

print("project,defect,patch,totaltests,failingtests,passingtests,failpercentage,passpercentage")
for i in sorted(defect.keys()):
	outstr = i[0] + "," + i[0] + i[1] + "," + i[2] + "," + str(defect[i][0]) + "," + str(defect[i][1]) + "," + str(defect[i][2]) + "," + str(defect[i][3]) + "," + str(defect[i][4])
	print(outstr)
