java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 1adb1e69 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1adb1e69:6bf5bba0..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Time-7b......................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1
PURIFY IS FALSE
=================================================
Project : time_7	start : 19/10/25 17:29

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/time/7.txt#ATTEMPTS: 2

# FAILING TESTS: 2
TIMEOUT : 18000000
===========
locations= [<org.joda.time.IllegalFieldValueException,314>, <org.joda.time.IllegalFieldValueException,323>, <org.joda.time.IllegalFieldValueException,325>, <org.joda.time.IllegalFieldValueException,326>, <org.joda.time.IllegalFieldValueException,328>, <org.joda.time.format.DateTimeParserBucket,373>, <org.joda.time.format.DateTimeParserBucket,374>, <org.joda.time.format.DateTimeParserBucket,375>, <org.joda.time.format.DateTimeParserBucket,377>, <org.joda.time.field.FieldUtils,218>, <org.joda.time.IllegalFieldValueException,53>, <org.joda.time.format.DateTimeFormatter,701>, <org.joda.time.format.DateTimeFormatter,702>, <org.joda.time.format.DateTimeFormatter,706>, <org.joda.time.format.DateTimeFormatter,707>, <org.joda.time.format.DateTimeFormatter,708>, <org.joda.time.format.DateTimeFormatter,709>, <org.joda.time.format.DateTimeFormatter,710>, <org.joda.time.format.DateTimeFormatter,712>, <org.joda.time.format.DateTimeFormatter,714>, <org.joda.time.format.DateTimeFormatter,715>, <org.joda.time.IllegalFieldValueException,50>, <org.joda.time.IllegalFieldValueException,108>, <org.joda.time.IllegalFieldValueException,109>, <org.joda.time.IllegalFieldValueException,110>, <org.joda.time.IllegalFieldValueException,111>, <org.joda.time.IllegalFieldValueException,112>, <org.joda.time.IllegalFieldValueException,113>, <org.joda.time.IllegalFieldValueException,114>, <org.joda.time.IllegalFieldValueException,115>, <org.joda.time.IllegalFieldValueException,116>, <org.joda.time.IllegalFieldValueException,117>, <org.joda.time.chrono.BasicMonthOfYearDateTimeField,306>, <org.joda.time.format.DateTimeParserBucket,358>, <org.joda.time.format.DateTimeParserBucket,359>, <org.joda.time.MutableDateTime,351>, <org.joda.time.MutableDateTime,353>, <org.joda.time.IllegalFieldValueException,41>, <org.joda.time.IllegalFieldValueException,44>, <org.joda.time.IllegalFieldValueException,59>, <org.joda.time.IllegalFieldValueException,63>, <org.joda.time.chrono.BasicChronology,419>, <org.joda.time.field.BaseDurationField,150>, <org.joda.time.format.DateTimeParserBucket,518>, <org.joda.time.DateTimeFieldType,378>, <org.joda.time.format.DateTimeParserBucket,421>, <org.joda.time.format.DateTimeParserBucket,422>, <org.joda.time.format.DateTimeParserBucket,423>, <org.joda.time.chrono.BasicChronology,584>, <org.joda.time.chrono.BasicChronology,585>, <org.joda.time.chrono.BasicChronology,586>, <org.joda.time.format.ISODateTimeFormat,971>, <org.joda.time.format.ISODateTimeFormat,972>, <org.joda.time.format.ISODateTimeFormat,977>, <org.joda.time.format.DateTimeFormatterBuilder,976>, <org.joda.time.format.ISODateTimeFormat,935>, <org.joda.time.format.ISODateTimeFormat,936>, <org.joda.time.format.ISODateTimeFormat,941>, <org.joda.time.format.ISODateTimeFormat,897>, <org.joda.time.format.ISODateTimeFormat,898>, <org.joda.time.format.ISODateTimeFormat,903>, <org.joda.time.format.ISODateTimeFormat,1442>, <org.joda.time.format.ISODateTimeFormat,1443>, <org.joda.time.format.ISODateTimeFormat,1449>, <org.joda.time.format.DateTimeFormatter,190>, <org.joda.time.format.DateTimeFormatter,193>, <org.joda.time.format.DateTimeFormatter,204>, <org.joda.time.format.DateTimeFormatterBuilder,549>, <org.joda.time.format.DateTimeFormatterBuilder,552>, <org.joda.time.tz.DateTimeZoneBuilder,1611>, <org.joda.time.tz.DateTimeZoneBuilder,1612>, <org.joda.time.tz.DateTimeZoneBuilder,1613>, <org.joda.time.format.DateTimeFormatterBuilder,1822>, <org.joda.time.format.DateTimeFormatterBuilder,1754>, <org.joda.time.format.DateTimeFormatterBuilder,1755>, <org.joda.time.format.DateTimeFormatterBuilder,1756>, <org.joda.time.format.DateTimeFormatterBuilder,1757>, <org.joda.time.format.DateTimeFormatterBuilder,1748>, <org.joda.time.format.DateTimeFormatterBuilder,1760>, <org.joda.time.format.DateTimeFormat,490>, <org.joda.time.format.DateTimeFormat,491>, <org.joda.time.format.DateTimeFormat,486>, <org.joda.time.format.DateTimeFormat,488>, <org.joda.time.chrono.ZonedChronology,496>, <org.joda.time.chrono.ZonedChronology,500>, <org.joda.time.chrono.ZonedChronology,514>, <org.joda.time.chrono.ZonedChronology,547>, <org.joda.time.chrono.ZonedChronology,564>, <org.joda.time.chrono.GJChronology,279>, <org.joda.time.chrono.GJChronology,280>, <org.joda.time.chrono.GJChronology,219>, <org.joda.time.chrono.GJChronology,220>, <org.joda.time.chrono.GJChronology,485>, <org.joda.time.chrono.GJChronology,204>, <org.joda.time.chrono.GJChronology,205>, <org.joda.time.chrono.GJChronology,206>, <org.joda.time.chrono.GJChronology,209>, <org.joda.time.chrono.GJChronology,395>, <org.joda.time.chrono.GJChronology,404>, <org.joda.time.base.AbstractInstant,260>, <org.joda.time.format.DateTimeFormat,479>, <org.joda.time.chrono.GJChronology,194>, <org.joda.time.chrono.GJChronology,291>, <org.joda.time.chrono.GJChronology,294>, <org.joda.time.chrono.GJChronology,305>, <org.joda.time.chrono.GJChronology,315>, <org.joda.time.chrono.GJChronology,318>, <org.joda.time.chrono.GJChronology,319>, <org.joda.time.Instant,144>, <org.joda.time.format.DateTimeFormat,551>, <org.joda.time.base.BaseDateTime,225>, <org.joda.time.format.DateTimeFormat,549>, <org.joda.time.format.DateTimeFormat,550>, <org.joda.time.format.DateTimeFormat,596>, <org.joda.time.format.DateTimeFormat,598>, <org.joda.time.format.DateTimeFormat,600>, <org.joda.time.format.DateTimeFormat,601>, <org.joda.time.format.DateTimeFormat,603>, <org.joda.time.format.DateTimeFormat,611>, <org.joda.time.format.DateTimeFormat,613>, <org.joda.time.format.DateTimeFormat,614>, <org.joda.time.format.DateTimeFormat,616>, <org.joda.time.base.BaseDateTime,223>, <org.joda.time.chrono.ZonedChronology,471>, <org.joda.time.format.DateTimeParserBucket,499>, <org.joda.time.format.DateTimeParserBucket,500>, <org.joda.time.format.DateTimeParserBucket,502>, <org.joda.time.format.DateTimeParserBucket,503>, <org.joda.time.format.DateTimeFormatterBuilder,1259>, <org.joda.time.format.DateTimeFormat,586>, <org.joda.time.format.DateTimeFormat,587>, <org.joda.time.format.DateTimeParserBucket,520>, <org.joda.time.format.DateTimeParserBucket,354>, <org.joda.time.format.DateTimeParserBucket,355>, <org.joda.time.format.DateTimeParserBucket,356>, <org.joda.time.format.DateTimeParserBucket,357>, <org.joda.time.format.DateTimeParserBucket,366>, <org.joda.time.format.DateTimeParserBucket,420>, <org.joda.time.format.DateTimeParserBucket,511>, <org.joda.time.format.DateTimeParserBucket,517>, <org.joda.time.format.DateTimeParserBucket,482>, <org.joda.time.format.DateTimeParserBucket,483>, <org.joda.time.format.DateTimeParserBucket,487>, <org.joda.time.format.DateTimeParserBucket,490>, <org.joda.time.chrono.ZonedChronology,464>, <org.joda.time.chrono.ZonedChronology,465>, <org.joda.time.chrono.ZonedChronology,462>, <org.joda.time.chrono.ZonedChronology,463>, <org.joda.time.format.DateTimeFormat,170>, <org.joda.time.format.DateTimeFormat,674>, <org.joda.time.format.DateTimeFormat,677>, <org.joda.time.format.DateTimeFormat,678>, <org.joda.time.format.DateTimeFormat,679>, <org.joda.time.format.DateTimeFormat,680>, <org.joda.time.format.DateTimeFormat,681>, <org.joda.time.format.DateTimeFormat,682>, <org.joda.time.format.DateTimeFormat,683>, <org.joda.time.format.DateTimeFormat,685>, <org.joda.time.format.DateTimeFormat,687>, <org.joda.time.format.DateTimeFormat,688>, <org.joda.time.DurationFieldType,294>, <org.joda.time.DateTimeZone,985>, <org.joda.time.DateTimeZone,1002>, <org.joda.time.DateTimeZone,1004>, <org.joda.time.DateTimeZone,1006>, <org.joda.time.DateTimeZone,1035>, <org.joda.time.DateTimeZone,1037>, <org.joda.time.DateTimeZone,1040>, <org.joda.time.format.DateTimeFormatterBuilder,1383>, <org.joda.time.format.DateTimeFormatterBuilder,1244>, <org.joda.time.format.DateTimeFormatterBuilder,1245>, <org.joda.time.format.DateTimeFormatterBuilder,1247>, <org.joda.time.format.DateTimeFormatterBuilder,1240>, <org.joda.time.field.DecoratedDurationField,101>, <org.joda.time.format.DateTimeFormatterBuilder,1359>, <org.joda.time.format.DateTimeFormatterBuilder,1360>, <org.joda.time.format.DateTimeFormatterBuilder,1367>, <org.joda.time.format.DateTimeFormatterBuilder,1372>, <org.joda.time.format.DateTimeFormatterBuilder,1373>, <org.joda.time.format.DateTimeFormatterBuilder,1377>, <org.joda.time.format.DateTimeFormatterBuilder,1380>, <org.joda.time.format.DateTimeFormatterBuilder,1381>, <org.joda.time.format.DateTimeFormatterBuilder,1382>, <org.joda.time.format.DateTimeFormatterBuilder,1385>, <org.joda.time.format.DateTimeFormatterBuilder,1390>, <org.joda.time.format.DateTimeFormatterBuilder,1391>, <org.joda.time.format.DateTimeParserBucket,247>, <org.joda.time.format.DateTimeParserBucket,248>, <org.joda.time.format.DateTimeParserBucket,262>, <org.joda.time.format.DateTimeParserBucket,263>, <org.joda.time.format.DateTimeParserBucket,265>, <org.joda.time.format.DateTimeParserBucket,274>, <org.joda.time.format.DateTimeParserBucket,275>, <org.joda.time.format.DateTimeParserBucket,276>, <org.joda.time.format.DateTimeParserBucket,277>, <org.joda.time.format.DateTimeParserBucket,345>, <org.joda.time.format.DateTimeParserBucket,346>, <org.joda.time.format.DateTimeParserBucket,347>, <org.joda.time.format.DateTimeParserBucket,351>, <org.joda.time.format.DateTimeParserBucket,352>]
======================org.joda.time.IllegalFieldValueException,314
org.joda.time.IllegalFieldValueException,323
========
if(text!=null){
iMessage=message+": ";
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.IllegalFieldValueException,325
org.joda.time.IllegalFieldValueException,326
org.joda.time.IllegalFieldValueException,328
Find no block!
org.joda.time.format.DateTimeParserBucket,373
Find no block!
org.joda.time.format.DateTimeParserBucket,374
========
if(text==null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iEraText!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clearPrefix();
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
append0(new Literal(text),literal);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear+=(text.charAt(iDefaultYear++)-'0')*100;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>59){
return ~iDefaultYear;
}
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
millis=iField.set(instant,text,iLocale);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeParserBucket,375
org.joda.time.format.DateTimeParserBucket,377
========
if(text==null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=':'){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
set(text,null);
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iEraText!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(text.regionMatches(true,iDefaultYear,text,0,iDefaultYear)){
return pos;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=0){
return 0;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iDefaultYear--;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iDefaultYear--;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=0){
return 0;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(text.regionMatches(true,iDefaultYear,text,0,iDefaultYear)){
return position+textLength;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(text.regionMatches(true,iDefaultYear,iValue,0,iValue.length())){
return position+iValue.length();
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
clearPrefix();
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
append0(new Literal(text),literal);
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear++;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>23){
return ~iDefaultYear;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iDefaultYear+=(text.charAt(iDefaultYear++)-'0')*100;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return era.intValue();
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return month.intValue();
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return day.intValue();
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(--iDefaultYear<0){
return 0;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!='-'){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkLimits(millis,null);
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkLimits(getWrappedField().set(millis,text,iLocale),"resulting");
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>59){
return ~iDefaultYear;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<0){
return newPos;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=iDefaultYear){
return position;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
count=digitCount(text,iDefaultYear,3);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkParser();
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(!iSavedFieldsShared){
return ~iDefaultYear;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear>=0){
iSavedFieldsShared=true;
}else {
if(!mustParse){
return ~position;
}
return position;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear>=0){
iSavedFieldsShared=true;
}else {
if(!mustParse){
return ~suffixPos;
}
return suffixPos;
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
millis=iField.set(localInstant,text,iLocale);
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
millis=iField.set(instant,text,iLocale);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
if(iSavedFieldsShared){
DateTimeZone DateTimeZone.forOffsetMillis(iDefaultYear)=DateTimeZone.forOffsetMillis(iDefaultYear);
chrono=iChrono.withZone(DateTimeZone.forOffsetMillis(iDefaultYear));
}
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return new MutableDateTime(millis,iChrono);
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
if(iSavedFieldsShared){
DateTimeZone DateTimeZone.forOffsetMillis(iDefaultYear)=DateTimeZone.forOffsetMillis(iDefaultYear);
chrono=iChrono.withZone(DateTimeZone.forOffsetMillis(iDefaultYear));
}
return new MutableDateTime(millis,iChrono);

e.prependMessage("Cannot parse \""+text);
}
throw e;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.field.FieldUtils,218
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(lowerBound),null,Integer.valueOf(field.getMaximumValue()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
FieldUtils.verifyValueBounds(this,value,lowerBound,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(upperBound==getValue(lowerBound)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Field must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super.setFieldInto(getValues(),field,upperBound);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,value,1,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound==0){
return ~value;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound<=0){
return 0;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lowerBound--;
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound==getValue(value)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||field==null){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||field==null){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/value;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value%lowerBound;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/lowerBound;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>Integer.MAX_VALUE){
return ~value;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>offset)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("The divisor must be at least 2");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(mode>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(field!=null&&(value<ROUND_NONE||value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(field!=null||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value<ROUND_NONE||mode>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(mode>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(ROUND_NONE>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
field=(value==ROUND_NONE?null:field);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lowerBound=(field==null?ROUND_NONE:value);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getMillis());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.IllegalFieldValueException,53
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('\"');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('\"');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(value);
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound!=null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(explain);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound!=null){
buf.append("must not be smaller than ").append(explain);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append(super.getMessage());
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append(super.getMessage());
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("The");
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append("The");
if(upperBound!=null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append('�');
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(iMessage);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
return ;
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
return ;
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(SECONDS_MILLIS==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append('.');
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('.');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append('.');
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append('.');
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==value){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append('.');
if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.format.DateTimeFormatter,701
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("No parser supplied");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new UnsupportedOperationException("Parsing not supported");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParser parser=requireParser();
if(instant==null){
if(position<=position){
return position;
}
throw new IllegalArgumentException("Instant must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instant.setChronology(iChrono);
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.format.DateTimeFormatter,702
org.joda.time.format.DateTimeFormatter,706
========
if(instant==null){
throw new IllegalArgumentException("ReadableInstant objects must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getMillis()==instantMillis){
return 0;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.set(this,instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.getMillis()<instantMillis){
return -1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.getMillis()>instantMillis){
return 1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null==null){
chrono=ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("The time must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chrono=chrono.withZone(iZone);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("The partial must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Interval must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
if(instant==null){
return ISOChronology.getInstance();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new LimitException(text,true);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new LimitException(text,false);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return DateTimeUtils.currentTimeMillis();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
instant.setZone(iZone);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return containsNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return isBeforeNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return isAfterNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getOffset(DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant!=iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getField().getDifference(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getField().getDifferenceAsLong(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantMillis^(start>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(getEndMillis()^(end>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parser.parseInto(new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear),text,0)>=0){
if(newPos>=text.length()){
return new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear).computeMillis(true,text);
}
}else {
newPos=~newPos;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
instant+=position;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,707
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withZone(iZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal==instantMillis){
return 0;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,parser);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<instantMillis){
return -1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal>instantMillis){
return 1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,instantMillis,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=checkChronology(ConverterManager.getInstance().getInstantConverter(instant).getChronology(instant,iChrono));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),iChrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.set(this,instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.dayOfMonth().roundFloor(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.millisOfDay().get(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantMillis,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=iFieldType.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=millis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
boolean instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
new StringBuffer().append("PT");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,getEndMillis(),getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(getStartMillis(),instantMillis,getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iLocale==null){
locale=Locale.getDefault();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(position==instantLocal&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal!=instantMillis){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),position));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
checkYearsAndMonths("Minutes");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
instantMillis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantMillis^(start>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantLocal^(end>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,708
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instantLocal;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=chrono.getZone();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant instanceof ReadableDateTime){
ReadableDateTime (ReadableDateTime)instant=(ReadableDateTime)instant;
Chronology chrono=DateTimeUtils.getChronology(rdt.getChronology());
DateTimeZone chrono.getZone()=instantChrono.getZone();
if(zone!=null){
instantLocal=zone.getMillisKeepLocal(getZone(),instantMillis);
}
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantLocal,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getOffset(instantMillis-position)==position){
return instantMillis-position;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.set(this,instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=iFieldType.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getChronology()==chrono){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=newChronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().get(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
YearMonth new YearMonth(this,chrono)=new YearMonth(this,newChronology);
newChronology.validate(newYearMonth,getValues());
return newYearMonth;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
MonthDay new MonthDay(this,chrono)=new MonthDay(this,newChronology);
newChronology.validate(newMonthDay,getValues());
return newMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
TimeOfDay new TimeOfDay(this,chrono)=new TimeOfDay(this,newChronology);
newChronology.validate(newTimeOfDay,getValues());
return newTimeOfDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
YearMonthDay new YearMonthDay(this,chrono)=new YearMonthDay(this,newChronology);
newChronology.validate(newYearMonthDay,getValues());
return newYearMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(next,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().add(next,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonthNext(chrono,next);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(prev,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().add(prev,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonthPrevious(chrono,prev);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instantUTC^getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=checkChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,getEndMillis(),getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(getStartMillis(),instantLocal,getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iLocale==null){
locale=Locale.getDefault();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==iZone.getOffset(instantMillis)&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantLocal^(start>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(getEndMillis()^(end>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-position)==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),ISOChronology.getInstanceUTC().millisOfDay().get(instantMillis)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal)<0&&(instantLocal^position)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,709
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instantLocal;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.getZone();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal,instantMillis));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear==position){
return instantLocal;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getChronology(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
instant=chrono.dayOfMonth().roundFloor(instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(text);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iLocale);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.set(this,instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=iBase.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(chrono.getZone()!=null){
instantLocal=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instantUTC^defaultYear)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("The instant must not be null");
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getFieldType(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iZone);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(Calendar.ERA);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(zone.iRules);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(position==0){
return instant;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(r.iName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(iLocale==null){
locale=Locale.getDefault();
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().roundCeiling(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
defaultYear=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getNameKey(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==defaultYear&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().nextTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().nextTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal)<0&&(instantLocal^position)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().previousTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
setMillis(getChronology().millisOfDay().set(getMillis(),ISOChronology.getInstanceUTC().millisOfDay().get(instantMillis)));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=checkInstant(instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instantLocal,"resulting");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.years=fields.year.getDurationField();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instantLocal,"resulting");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=cycles+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FORMATTERS.get(iLocale)==null){
ResourceBundle ResourceBundle.getBundle(BUNDLE_NAME,iLocale)=ResourceBundle.getBundle(BUNDLE_NAME,iLocale);
String[] {ResourceBundle.getBundle(BUNDLE_NAME,iLocale).getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")}={b.getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")};
pf=new PeriodFormatterBuilder().appendYears().appendSuffix(b.getString("PeriodFormat.year"),b.getString("PeriodFormat.years")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMonths().appendSuffix(b.getString("PeriodFormat.month"),b.getString("PeriodFormat.months")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendWeeks().appendSuffix(b.getString("PeriodFormat.week"),b.getString("PeriodFormat.weeks")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendDays().appendSuffix(b.getString("PeriodFormat.day"),b.getString("PeriodFormat.days")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendHours().appendSuffix(b.getString("PeriodFormat.hour"),b.getString("PeriodFormat.hours")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMinutes().appendSuffix(b.getString("PeriodFormat.minute"),b.getString("PeriodFormat.minutes")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendSeconds().appendSuffix(b.getString("PeriodFormat.second"),b.getString("PeriodFormat.seconds")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMillis().appendSuffix(b.getString("PeriodFormat.millisecond"),b.getString("PeriodFormat.milliseconds")).toFormatter();
FORMATTERS.putIfAbsent(locale,pf);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=MILLIS_YEAR_1+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=millis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().charAt(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
char defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear<'0'||c>'9'){
return ~position;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear<=0){
position=(relativeYear+3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(position)){
leapYears++;
}
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear<=0){
position=(relativeYear+3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(position)){
leapYears++;
}
}
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear==354){
return 12;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantLocal=millis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,710
========
instant.setMillis(new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear).computeMillis(false,text));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal,instantMillis));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantLocal;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
bucket=chrono.getZone();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
bucket=chrono.get(this,instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono.get(this,instantLocal,instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(text);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono.get(this,instantLocal,FieldUtils.safeAdd(instantLocal,instantMillis));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono.get(this,FieldUtils.safeSubtract(instantLocal,instantMillis),instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantMillis,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iLocale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonth(chrono,millis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantMillis,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get()<instant.get(getFieldType())){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get()<position){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.set(this,instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
instant+=position;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(next,0);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(prev,0);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chrono=selectChronology(chrono);
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,instantMillis,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iZone);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getFieldType(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(Calendar.ERA);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
if(position==0){
return instantLocal;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(zone.iRules);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(r.iName);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
bucket=chrono.get(this,instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
instantMillis=instantMillis;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantMillis-1!=instantMillis){
System.out.println("*r* Error in "+iZone.getID());
return false;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
instantMillis=instantMillis;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().roundCeiling(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().get(instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantMillis=chrono.millisOfDay().get(instantLocal);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().get(instantLocal);
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().get(instantLocal);
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
if(!text.equals(iZone.getID())){
return true;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
bucket=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-position)==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
long defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,position);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=iBase.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,defaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,position);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,position);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,position);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
if(parser==null){
if(position<=position){
return position;
}
iOffsetParsed=true;
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=checkInstant(instant,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fields.years=fields.year.getDurationField();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(chrono.getDateTimeMillis(position,iDefaultYear,position,0));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),defaultYear));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.charAt(defaultYear)<'0'||c>'9'){
return ~defaultYear;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FORMATTERS.get(iLocale)==null){
ResourceBundle ResourceBundle.getBundle(BUNDLE_NAME,iLocale)=ResourceBundle.getBundle(BUNDLE_NAME,iLocale);
String[] {ResourceBundle.getBundle(BUNDLE_NAME,iLocale).getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")}={b.getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")};
pf=new PeriodFormatterBuilder().appendYears().appendSuffix(b.getString("PeriodFormat.year"),b.getString("PeriodFormat.years")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMonths().appendSuffix(b.getString("PeriodFormat.month"),b.getString("PeriodFormat.months")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendWeeks().appendSuffix(b.getString("PeriodFormat.week"),b.getString("PeriodFormat.weeks")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendDays().appendSuffix(b.getString("PeriodFormat.day"),b.getString("PeriodFormat.days")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendHours().appendSuffix(b.getString("PeriodFormat.hour"),b.getString("PeriodFormat.hours")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMinutes().appendSuffix(b.getString("PeriodFormat.minute"),b.getString("PeriodFormat.minutes")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendSeconds().appendSuffix(b.getString("PeriodFormat.second"),b.getString("PeriodFormat.seconds")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMillis().appendSuffix(b.getString("PeriodFormat.millisecond"),b.getString("PeriodFormat.milliseconds")).toFormatter();
FORMATTERS.putIfAbsent(locale,pf);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,712
========
instant.setMillis(bucket.computeMillis(false,text));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parser==null){
if(iDefaultYear<=position){
return position;
}
iOffsetParsed=true;
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
int defaultYear=chrono.year().get(text);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(iLocale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get()<newPos){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=chrono.get(this,instantLocal,instantMillis);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=chrono.get(this,instantLocal,FieldUtils.safeAdd(instantLocal,instantMillis));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=chrono.get(this,FieldUtils.safeSubtract(instantLocal,instantMillis),instantLocal);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chrono=DateTimeUtils.getChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().forOffsetMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(iZone);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.monthOfYear().set(millis,position);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonth(chrono,millis);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(zone.iRules);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
return instantLocal;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(Calendar.ERA);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instant.setChronology(chrono);
int defaultYear=chrono.year().forOffsetMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantMillis,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(r.iName);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantMillis;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantMillis-1!=instantMillis){
System.out.println("*r* Error in "+iZone.getID());
return false;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantMillis;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantMillis,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().roundCeiling(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=text.length()){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=text.length()){
return ~position;
}
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=text.length()){
return ~position;
}
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=text.length()){
return ~position;
}
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!text.equals(iZone.getID())){
return true;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chrono=DateTimeUtils.getChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chronology.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chronology.withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.millisOfDay().get(instantLocal);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=iChrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos>23){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.set(this,instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant+=iDefaultYear;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(next,0);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(prev,0);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant+=iDefaultYear;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.set(this,instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,instantMillis,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().substring(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withZone(iZone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chrono=chrono.withZone(iZone);
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(nextTransition(instantLocal-position)==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().getFieldType(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=iBase.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=getType().getField(iChrono.withUTC()).add(localInstant,FieldUtils.safeSubtract(position,get(instantLocal)));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos<'0'||c>'9'){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos<'0'||c>'9'){
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position++;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
position++;
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position++;
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position++;
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=monthOfYear().set(instant,defaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=dayOfMonth().set(instant,position);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
char newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
position=0;
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(position<=0){
return 0;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
position--;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<=0){
return 0;
}
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instantLocal,null);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(getWrappedField().set(instantLocal,text,iLocale),"resulting");
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,defaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,position);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos=='-'){
iOffsetParsed=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=checkChronology(iChrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=checkInstant(instant,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos>59){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
if(newPos>59){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(chrono.getDateTimeMillis(iDefaultYear,defaultYear,position,0));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=iChrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
newPos=iChrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
newPos=iChrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(instant,"resulting");
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=iChrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=iChrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
newPos=iChrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
newPos=iChrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=iChrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),defaultYear));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,714
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(parser==null){
if(iDefaultYear<=position){
return position;
}
iOffsetParsed=true;
break;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<0){
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
newPos=position;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(position<0){
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
newPos=position;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantMillis);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos>23){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(position>=text.length()){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(position>=text.length()){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iDefaultYear<=0){
break;
}
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
position++;
}
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
position++;
}
instant.charAt(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
position++;
}else error
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.charAt(position+position)<'0'||c>'9'){
break;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position++;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
position++;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
position+=iDefaultYear;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
iZone=chrono.getZone();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iLocale=(iLocale==null?Locale.getDefault():locale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(position<=0){
return 0;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
position--;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=0){
iOffsetParsed=true;
}else {
if(!mustParse){
return ~position;
}
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear>=0){
iOffsetParsed=true;
}else {
if(!mustParse){
return ~suffixPos;
}
return suffixPos;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=0;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
checkLimits(getWrappedField().set(instantLocal,text,iLocale),"resulting");
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.charAt(position)=='-'){
iOffsetParsed=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantLocal,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos>59){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos>59){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=iFieldType.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantMillis,instantLocal));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if((instant^instantLocal)<0&&(instant^newPos)>=0){
iZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
instantLocal+=position;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iChrono=new MutableInterval().getChronology();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=new MutableInterval().getStartMillis();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
out.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.println(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.get(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super.setInterval(instantMillis,instantLocal,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkInterval(instantMillis,instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantMillis;
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantMillis=instantMillis;
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setChronology(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(position==0&&!iOffsetParsed){
break;
}else if(count<1){
return ~position;
}
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(millis,position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=setDayOfMonth(chrono,millis);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=iZone){
setChronology(chrono.withZone(newZone));
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
checkInterval(instantMillis,instantLocal);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantMillis;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantLocal;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantMillis;
instantMillis=instantLocal;
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iChrono=DateTimeUtils.getChronology(chronology);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=iChrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=checkChronology(ConverterManager.getInstance().getInstantConverter(instant).getChronology(instant,iChrono));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=iChrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=iChrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=iChrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
checkPrinter();
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantMillis=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-position)==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==this){
return instantMillis;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.append(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.write(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.toUpperCase(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.toLowerCase(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.monthOfYear().set(instant,defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().set(instant,position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.monthOfYear().set(instant,defaultYear);
instant=chrono.dayOfMonth().set(instant,position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
chrono=(chrono!=null?chrono:iChrono);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
instant=chrono.minuteOfHour().set(instant,position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
text==null?null:instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instant==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),position));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,715
========
if(bucket.getZone()==null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(bucket.getZone()!=false){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bucket.getZone()==false){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono!=null&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chrono!=null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iOffsetParsed&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(next&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,parsedOffset,parsedZone);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear==2&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iDefaultYear==2&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(iOffsetParsed&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iMonthOfYear&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(limit&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.charAt(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
if(text.charAt(parsedOffset)=='-'||text.charAt(parsedOffset)=='+'){
break;
}
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestValidPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDayOfWeek&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.monthOfYear().set(millis,parsedOffset);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(millis,iDefaultYear);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=setDayOfMonth(chrono,millis);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iOffsetParsed&&position==0){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(parsePos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=parsedZone){
setChronology(chrono.withZone(newZone));
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedZone==DateTimeUtils.getZone(getZone())){
return ;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(parsedZone));
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedOffset>=0){
if(newPos>=text.length()){
return bucket.computeMillis(true,text);
}
}else {
newPos=~newPos;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getZone()==parsedZone){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null!=null){
bucket.setZone(DateTimeZone.forID(best));
return position+best.length();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=instantLocal;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
parsedZone=chrono.getZone();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iLocale=(iLocale==null?Locale.getDefault():locale);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iPivotYear=iPivotYear;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos=defaultYear;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
if((instant^instant+parsedOffset)<0&&(instant^parsedOffset)>=0){
parsedZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedZone==DateTimeZone.UTC){
return withUTC();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedZone==getZone()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedZone==DateTimeZone.UTC){
return withUTC();
}
if(parsedZone==getZone()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(parsePos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.parseInt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setChronology(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkParser();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedOffset>=0){
if(newPos>=text.length()){
return parsedZone;
}
}else {
newPos=~newPos;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iDayOfWeek&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
out.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.println(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
super.setInterval(instantMillis,parsedOffset,parsedZone);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(chrono!=null&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(chrono!=null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
centuryOfEra.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),parsedZone).setTime(toDate());
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.append(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.write(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedOffset==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedOffset==toDurationMillis()){
return this;
}
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.get(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkInterval(instantMillis,parsedZone);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkInterval(parsedZone,instantMillis);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.monthOfYear().set(instant,parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().set(instant,position);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.monthOfYear().set(instant,parsedOffset);
instant=chrono.dayOfMonth().set(instant,position);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
chrono=ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.millisOfDay().set(millis,parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear<position){
instantMillis=chrono.year().set(0,iFromYear)-newPos;
testInstant-=1;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.startsWith("-")){
parsedOffset=1;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newPos==~parsedOffset){
throw new IllegalArgumentException(text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parsedOffset==1){
position=-millis;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text.substring(iDefaultYear+1).length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
instantMillis=setDayOfMonthPrevious(chrono,prev);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.substring(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.getInstance(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear=position;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(parsedZone,"resulting");
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.toUpperCase(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.toLowerCase(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position>=text.length()){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(position>=text.length()){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=0;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&parsedOffset==false){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(useAfter&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position++;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(digitCount(text,position,2)<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FormatUtils.parseTwoDigits(text,position)>23){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parsedOffset=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_HOUR;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos-=2;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.abs(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear=digitCount(text,position,2);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FormatUtils.parseTwoDigits(text,position)>59){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos+=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_SECOND;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(text,position,2)==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newPos+=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_MINUTE;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0&&(text.charAt(position+position)=='-'||c=='+')){
iOffsetParsed=true;
parsedOffset=c=='-';
if(negative){
length++;
}else {
position++;
position--;
}
continue;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear<=1){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(text.charAt(position)=='-'){
iOffsetParsed=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear--;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iDefaultYear<=1){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
iDefaultYear=text.charAt(position)-'0';
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iDefaultYear=((year<<3)+(year<<1))+text.charAt(position)-'0';
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
char newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
if((instant^instant+parsedOffset)<0&&(instant^parsedOffset)>=0){
parsedZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&position+position!=newPos){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(suffixPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(bestValidPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&position==newPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(found&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(position&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(oldPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(text==null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&text==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(text==null&&text==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(max&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(min&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(length&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(limit&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(value&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.IllegalFieldValueException,50
org.joda.time.IllegalFieldValueException,108
org.joda.time.IllegalFieldValueException,109
org.joda.time.IllegalFieldValueException,110
org.joda.time.IllegalFieldValueException,111
org.joda.time.IllegalFieldValueException,112
org.joda.time.IllegalFieldValueException,113
org.joda.time.IllegalFieldValueException,114
org.joda.time.IllegalFieldValueException,115
org.joda.time.IllegalFieldValueException,116
org.joda.time.IllegalFieldValueException,117
Find no block!
org.joda.time.chrono.BasicMonthOfYearDateTimeField,306
org.joda.time.format.DateTimeParserBucket,358
========
count=digitCount(text,iDefaultYear,2);
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iDefaultYear,0,getMaximumValue());
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,iDefaultYear,1,getMaximumValue());
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeParserBucket,359
org.joda.time.MutableDateTime,351
========
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTimeZoneCutover::test_MutableDateTime_withZoneRetainFields_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_MutableDateTime_setZoneRetainFields_Turk
Failing tests: 13
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
serialVersionUID=serialVersionUID;
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=zone;
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.MutableDateTime,353
Find no block!
org.joda.time.IllegalFieldValueException,41
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(value);
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append('\"');
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(value);
buf.append('\"');

buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(value);
buf.append('\"');
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(value);
buf.append(value);
buf.append('\"');

buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(value);
buf.append('\"');
buf.append(value);
buf.append('\"');

buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound!=null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound!=null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append(super.getMessage());
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append(super.getMessage());
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("The");
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append("The");
if(upperBound!=null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append('�');
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(iMessage);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
return ;
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append("is not supported");
}else {
return ;
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(SECONDS_MILLIS==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append('.');
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append('.');
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
buf.append('.');
buf.append("is not supported");
}else {
buf.append('.');
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==value){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append('.');
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(upperBound==null){
if(withUTC().dayOfYear().remainder(serialVersionUID)==0){
printer=ISODateTimeFormat.date();
}else {
printer=ISODateTimeFormat.dateTime();
}
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(upperBound==null){
buf.append("is not supported");
}else {
if(withUTC().dayOfYear().remainder(serialVersionUID)==0){
printer=ISODateTimeFormat.date();
}else {
printer=ISODateTimeFormat.dateTime();
}
buf.append("must not be larger than ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lowerBound!=null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append(Integer.toString(value));
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(SECONDS_MILLIS==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lowerBound==value){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append("null");
}else {
buf.append('\"');
buf.append(value);
buf.append('\"');
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append(" for ").append(fieldName).append(' ').append("is not supported");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("Unable to find best converter for type \"");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("\" from remaining set: ");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("The");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName!=null){
buf.append(' ');
buf.append(desc);
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append(" instant is ");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.lastIndexOf('.')>=0){
fieldName=name.substring(index+1);
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append(fieldName);
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append('[');
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getZone()!=null){
buf.append(zone.getID());
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getMinimumDaysInFirstWeek()!=4){
buf.append(",mdfw=");
sb.append(getMinimumDaysInFirstWeek());
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).charAt(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("PT");
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FormatUtils.appendUnpaddedInteger(buf,getMillis());
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((getMillis()/1000)*1000==millis){
buf.setLength(buf.length()-3);
}else {
buf.insert(buf.length()-3,".");
}
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append('S');
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(SECONDS_MILLIS==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==value){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(buf,getStartMillis());
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append('/');
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(buf,getEndMillis());
StringBuilder buf=new StringBuilder().append("Value ").append(value).append(" for ").append(fieldName).append(' ');
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.IllegalFieldValueException,44
org.joda.time.IllegalFieldValueException,59
UNKNOWN ASTNode type : catch (RuntimeException e) {
  buf.append('\ufffd');
}

UNKNOWN ASTNode type : catch (RuntimeException e) {
  buf.append('\ufffd');
}

========
if(explain==null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(lowerBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(": ").append(lowerBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(": ").append(upperBound);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(desc!=null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append('�');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
return ;
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append('.');
if(explain!=null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(SECONDS_MILLIS!=null){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append('.');
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=value){
buf.append(": ").append(explain);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.IllegalFieldValueException,63
========
if(lowerBound==null){
if(upperBound==null){
buf.append("is not supported");
}else {
buf.append("must not be larger than ").append(upperBound);
}
}else if(upperBound==null){
buf.append("must not be smaller than ").append(lowerBound);
}else {
buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');
}
if(explain!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append('\"');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append(explain);
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==null){
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain==null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=null){
buf.append(explain);
buf.append('\"');
buf.append(explain);
buf.append('\"');

buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append(" (");
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append(getBase());
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append(')');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append(" (");
buf.append(')');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
return sb.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
if(getMinimumDaysInFirstWeek()!=4){
buf.append(",mdfw=");
sb.append(getMinimumDaysInFirstWeek());
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append(']');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(desc!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
buf.append("The");
if(explain!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
buf.append("The");
if(explain!=null){
buf.append(explain);
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append('�');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append('.');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
return ;
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=value){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
if((serialVersionUID/1000)*1000==millis){
buf.setLength(buf.length()-3);
}else {
buf.insert(buf.length()-3,".");
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append('S');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(SECONDS_MILLIS!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append('.');
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
ISODateTimeFormat.dateTime().printTo(buf,getStartMillis());
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
buf.append('/');
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(explain!=null){
buf.append(": ").append(explain);
}
ISODateTimeFormat.dateTime().printTo(buf,getEndMillis());
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pattern!=null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").write(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain==value){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
checkPrinter();
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(explain!=null){
buf.append(": ").append(explain);
}
printTo(buf,serialVersionUID);
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pattern==null){
buf.append(": ").append(explain);
}
return buf.toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.BasicChronology,419
org.joda.time.field.BaseDurationField,150
org.joda.time.format.DateTimeParserBucket,518
========
if(field==null||!field.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(field==null||!b.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null||!field.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iField==null||!iField.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iField==null||!b.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null||!iField.isSupported()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null||b.getUnitMillis()>=getChronology().days().getUnitMillis()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b==null||b.getUnitMillis()<getChronology().days().getUnitMillis()){
return 1;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeFieldType,378
========
return str;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeParserBucket,421
========
i=iDefaultYear;
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=length;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=iFieldType;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;j>0&&iDefaultYear>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;i>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int j=i;j>iDefaultYear&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;i>0&&iDefaultYear>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;j>iDefaultYear&&iDefaultYear>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;i>iDefaultYear&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;i>iDefaultYear&&iDefaultYear>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=~i;
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (compile.tests)................................................ 
========
j=(i>=0)?(i+1):~i;
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=i;j>=0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMillis>Long.MIN_VALUE){
return prev-1;
}
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
iDefaultYear=iText.charAt(i++)-'0';
}catch (StringIndexOutOfBoundsException e) {
  return ~position;
}

for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=fieldIndex;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=start;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=len;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=limit;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int j=min;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeParserBucket,422
org.joda.time.format.DateTimeParserBucket,423
org.joda.time.chrono.BasicChronology,584
========
int thisYear=getMillisOfDay(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(CACHE_MASK==0){
return instant;
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(CACHE_MASK>CACHE_MASK){
dayToUse=maxDay;
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisMonth);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant<iFirstDayMillis){
return -getDifference(subtrahendInstant,minuendInstant);
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getWeekOfWeekyear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWeekOfWeekyear(instant,thisMonth)==1){
return getYear(instant+DateTimeConstants.MILLIS_PER_WEEK);
}else if(week>51){
return getYear(instant-(2*DateTimeConstants.MILLIS_PER_WEEK));
}else {
return thisMonth;
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(thisYear==iFirstDayMillis){
return add(instant,i_months);
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long thisYear=getMillisOfDay(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getDayOfMonth(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,CACHE_MASK,MIN,iYear);
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(thisMonth>CACHE_MASK){
thisDom=maxDom;
}
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=get(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,thisYear,DateTimeConstants.BCE,DateTimeConstants.CE);
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.get(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.isLeap(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.getLeapAmount(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.remainder(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.getMinimumValue(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return cClockhourOfHalfdayField.getMaximumValue(thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getWeekyear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getWrappedField().getMillis(thisMonth,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getMillis(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getWrappedField().add(instant,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return add(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return FieldUtils.safeAdd(instant,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return safeAdd(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getWrappedField().getValue(iFirstDayMillis,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getValue(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
checkLimits(instant,null);
return getDaysInYearMonth(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getWrappedField().getValueAsLong(iFirstDayMillis,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getValueAsLong(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
checkLimits(instant,null);
return getWrappedField().getMillis(thisMonth,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
checkLimits(instant,null);
return getMillis(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return setYear(thisYear,thisMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int thisYear=getYear(instant);
int thisMonth=getMonthOfYear(instant,thisYear);
return getWrappedField().roundFloor(field.set(instant,get(instant)*iYear));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_1/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
