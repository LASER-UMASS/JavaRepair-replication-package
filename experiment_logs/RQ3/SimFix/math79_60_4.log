java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 138baec1 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 138baec1:ca1ca925..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-79b........................................ OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4
PURIFY IS FALSE
=================================================
Project : math_79	start : 19/10/21 21:13

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/math/79.txt#ATTEMPTS: 1

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,40>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,41>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,42>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,56>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,57>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,89>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,90>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,91>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,107>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,108>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,111>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,112>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,114>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,115>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,139>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,153>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,154>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,155>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,156>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,157>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,161>, <org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,162>, <org.apache.commons.math.stat.clustering.Cluster,45>, <org.apache.commons.math.stat.clustering.Cluster,46>, <org.apache.commons.math.stat.clustering.Cluster,47>, <org.apache.commons.math.stat.clustering.Cluster,48>, <org.apache.commons.math.stat.clustering.Cluster,71>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,43>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,44>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,45>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,52>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,57>, <org.apache.commons.math.util.MathUtils,1624>, <org.apache.commons.math.util.MathUtils,1625>, <org.apache.commons.math.util.MathUtils,1626>, <org.apache.commons.math.util.MathUtils,1627>, <org.apache.commons.math.util.MathUtils,1629>, <org.apache.commons.math.util.MathUtils,30>, <org.apache.commons.math.util.MathUtils,69>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,62>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,63>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,64>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,65>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,67>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,68>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,69>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,71>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,77>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,78>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,80>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,81>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,82>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,84>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,85>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,86>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,89>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,95>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,96>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,97>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,99>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,105>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,106>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,107>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,108>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,109>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,110>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,113>, <org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,114>, <org.apache.commons.math.util.MathUtils,82>, <org.apache.commons.math.util.MathUtils,83>, <org.apache.commons.math.util.MathUtils,96>, <org.apache.commons.math.util.MathUtils,97>, <org.apache.commons.math.util.MathUtils,98>, <org.apache.commons.math.util.MathUtils,100>, <org.apache.commons.math.util.MathUtils,114>, <org.apache.commons.math.util.MathUtils,130>, <org.apache.commons.math.util.MathUtils,132>, <org.apache.commons.math.util.MathUtils,136>, <org.apache.commons.math.util.MathUtils,137>, <org.apache.commons.math.util.MathUtils,139>, <org.apache.commons.math.util.MathUtils,140>, <org.apache.commons.math.util.MathUtils,142>, <org.apache.commons.math.util.MathUtils,146>, <org.apache.commons.math.util.MathUtils,153>, <org.apache.commons.math.util.MathUtils,154>, <org.apache.commons.math.util.MathUtils,156>, <org.apache.commons.math.util.MathUtils,160>, <org.apache.commons.math.util.MathUtils,189>, <org.apache.commons.math.util.MathUtils,190>, <org.apache.commons.math.util.MathUtils,191>, <org.apache.commons.math.util.MathUtils,193>, <org.apache.commons.math.util.MathUtils,194>, <org.apache.commons.math.util.MathUtils,197>, <org.apache.commons.math.util.MathUtils,198>, <org.apache.commons.math.util.MathUtils,205>, <org.apache.commons.math.util.MathUtils,206>, <org.apache.commons.math.util.MathUtils,208>, <org.apache.commons.math.util.MathUtils,209>, <org.apache.commons.math.util.MathUtils,210>, <org.apache.commons.math.util.MathUtils,211>, <org.apache.commons.math.util.MathUtils,213>, <org.apache.commons.math.util.MathUtils,216>, <org.apache.commons.math.util.MathUtils,217>, <org.apache.commons.math.util.MathUtils,224>, <org.apache.commons.math.util.MathUtils,225>, <org.apache.commons.math.util.MathUtils,226>, <org.apache.commons.math.util.MathUtils,228>, <org.apache.commons.math.util.MathUtils,232>, <org.apache.commons.math.util.MathUtils,233>, <org.apache.commons.math.util.MathUtils,234>, <org.apache.commons.math.util.MathUtils,235>, <org.apache.commons.math.util.MathUtils,236>, <org.apache.commons.math.util.MathUtils,239>, <org.apache.commons.math.util.MathUtils,265>, <org.apache.commons.math.util.MathUtils,266>, <org.apache.commons.math.util.MathUtils,267>, <org.apache.commons.math.util.MathUtils,269>, <org.apache.commons.math.util.MathUtils,270>, <org.apache.commons.math.util.MathUtils,272>, <org.apache.commons.math.util.MathUtils,273>, <org.apache.commons.math.util.MathUtils,275>, <org.apache.commons.math.util.MathUtils,276>, <org.apache.commons.math.util.MathUtils,279>, <org.apache.commons.math.util.MathUtils,280>, <org.apache.commons.math.util.MathUtils,281>, <org.apache.commons.math.util.MathUtils,284>, <org.apache.commons.math.util.MathUtils,306>, <org.apache.commons.math.util.MathUtils,307>, <org.apache.commons.math.util.MathUtils,308>, <org.apache.commons.math.util.MathUtils,310>, <org.apache.commons.math.util.MathUtils,311>, <org.apache.commons.math.util.MathUtils,318>, <org.apache.commons.math.util.MathUtils,319>, <org.apache.commons.math.util.MathUtils,326>, <org.apache.commons.math.util.MathUtils,327>, <org.apache.commons.math.util.MathUtils,330>, <org.apache.commons.math.util.MathUtils,331>, <org.apache.commons.math.util.MathUtils,337>, <org.apache.commons.math.util.MathUtils,340>, <org.apache.commons.math.util.MathUtils,341>, <org.apache.commons.math.util.MathUtils,345>, <org.apache.commons.math.util.MathUtils,346>, <org.apache.commons.math.util.MathUtils,349>, <org.apache.commons.math.util.MathUtils,360>, <org.apache.commons.math.util.MathUtils,361>, <org.apache.commons.math.util.MathUtils,365>, <org.apache.commons.math.util.MathUtils,366>, <org.apache.commons.math.util.MathUtils,370>, <org.apache.commons.math.util.MathUtils,383>, <org.apache.commons.math.util.MathUtils,384>, <org.apache.commons.math.util.MathUtils,385>, <org.apache.commons.math.util.MathUtils,386>, <org.apache.commons.math.util.MathUtils,388>, <org.apache.commons.math.util.MathUtils,399>, <org.apache.commons.math.util.MathUtils,411>, <org.apache.commons.math.util.MathUtils,427>, <org.apache.commons.math.util.MathUtils,447>, <org.apache.commons.math.util.MathUtils,449>, <org.apache.commons.math.util.MathUtils,450>, <org.apache.commons.math.util.MathUtils,453>, <org.apache.commons.math.util.MathUtils,454>, <org.apache.commons.math.util.MathUtils,456>, <org.apache.commons.math.util.MathUtils,457>, <org.apache.commons.math.util.MathUtils,460>, <org.apache.commons.math.util.MathUtils,474>, <org.apache.commons.math.util.MathUtils,475>, <org.apache.commons.math.util.MathUtils,477>, <org.apache.commons.math.util.MathUtils,478>, <org.apache.commons.math.util.MathUtils,480>, <org.apache.commons.math.util.MathUtils,481>, <org.apache.commons.math.util.MathUtils,482>, <org.apache.commons.math.util.MathUtils,485>, <org.apache.commons.math.util.MathUtils,511>, <org.apache.commons.math.util.MathUtils,512>, <org.apache.commons.math.util.MathUtils,516>, <org.apache.commons.math.util.MathUtils,517>, <org.apache.commons.math.util.MathUtils,520>, <org.apache.commons.math.util.MathUtils,544>, <org.apache.commons.math.util.MathUtils,545>, <org.apache.commons.math.util.MathUtils,549>, <org.apache.commons.math.util.MathUtils,550>, <org.apache.commons.math.util.MathUtils,552>, <org.apache.commons.math.util.MathUtils,569>, <org.apache.commons.math.util.MathUtils,570>, <org.apache.commons.math.util.MathUtils,574>, <org.apache.commons.math.util.MathUtils,575>, <org.apache.commons.math.util.MathUtils,577>, <org.apache.commons.math.util.MathUtils,578>, <org.apache.commons.math.util.MathUtils,579>, <org.apache.commons.math.util.MathUtils,581>, <org.apache.commons.math.util.MathUtils,615>, <org.apache.commons.math.util.MathUtils,616>, <org.apache.commons.math.util.MathUtils,617>, <org.apache.commons.math.util.MathUtils,618>, <org.apache.commons.math.util.MathUtils,619>, <org.apache.commons.math.util.MathUtils,623>, <org.apache.commons.math.util.MathUtils,630>, <org.apache.commons.math.util.MathUtils,631>, <org.apache.commons.math.util.MathUtils,633>, <org.apache.commons.math.util.MathUtils,634>]
======================org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,40
Find no block!
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,41
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,42
Find no block!
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,56
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:min;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:max;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final double max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((maxIterations==k)||(k==0)){
return 0;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k==1)||(k==maxIterations-1)){
return Math.log(n);
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((maxIterations==k)||(k==0)){
return 1;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k==1)||(k==maxIterations-1)){
return n;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((maxIterations==k)||(k==0)){
return 1.0;
}
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(k<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:xk;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final int max=(maxIterations<0)?Integer.MAX_VALUE:x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final double max=(k<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
List<Cluster<T>> clusters=chooseInitialCenters(points,k,random);
assignPointsToClusters(clusters,points);
 final long max=(maxIterations<0)?Integer.MAX_VALUE:maxIterations;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,57
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,89
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,90
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,91
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,107
========
resultSet.add(new Cluster<T>(firstPoint));
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
Collections.sort(this.getChromosomes());
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final List<T> pointSet=new ArrayList<T>(points);
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,108
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,111
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.centroidOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.indexOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.multiply(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
this(firstPoint.getField(),k);
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
if(d.length<k+k){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",pos,size,d.length);
}
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.mask;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstPoint=source.missingEntries;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.mask;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.mask;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.mask;
k=source.count;
 final List<Cluster<T>> resultSet=new ArrayList<Cluster<T>>();
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,112
========
 final T firstPoint=pointSet.nextInt(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.distanceFrom(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.centroidOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.indexOf(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.floor(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getNumObjectiveFunctions()==2){
new Array2DRowRealMatrix(k,k+k).setEntry(0,0,-1);
}
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.multiply(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
this(firstPoint.getField(),k);
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[observations.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
if(d.length<k+k){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",pos,size,d.length);
}
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[k];
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
dx2=new double[k];
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.mask;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
firstPoint=source.missingEntries;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.mask;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.mask;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=source.size;
k=source.mask;
k=source.count;
 final T firstPoint=pointSet.remove(random.nextInt(pointSet.size()));
resultSet.add(new Cluster<T>(firstPoint));
 final double[] dx2=new double[pointSet.size()];

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,114
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,115
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<getLength();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.remove(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.nextInt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=binStats.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
nearest.addValue(dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k+=k;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
nearest.addPoint(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.computeBinStats();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[d];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2[d-1]=1.0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(k==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(k==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<getRowDimension();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
iterationCount=k;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
max+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sum=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=sum;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
sumObserved+=observed[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<getArtificialVariableOffset();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(d==0){
throw new SingularMatrixException();
}
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d==0.0){
for(int k=0;k<k;++k){
if((k!=k)&&(dx2[i]==x[k])){
throw MathRuntimeException.createArithmeticException("identical abscissas x[{0}] == x[{1}] == {2} cause division by zero",i,k,x[i]);
}
}
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
random=d>>8;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
index+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
mt[0]=mt[N-1];
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
numElements-=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<getHeight();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createArithmeticException("Array contains an infinite element, {0} at index {1}",dx2[i],i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
d=dx2[k];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
luMax[i]=luCol[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
oldDelta=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(i>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
++i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
index+=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final int d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
diff=sample1[i]-sample2[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
yTmp[i]=y0[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
ii+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lJ[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
sumSqImpl[i]=new SumOfSquares();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
minImpl[i]=new Min();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
maxImpl[i]=new Max();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
sumLogImpl[i]=new SumOfLogs();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
meanImpl[i]=new Mean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
sumSqImpl[i]=new SumOfSquares();
minImpl[i]=new Min();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
meanImpl[i]=new Mean();

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(weights[i]<0){
throw MathRuntimeException.createIllegalArgumentException("negative weight {0} at index {1} ",dx2[i],i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(weights[i]<0){
throw MathRuntimeException.createIllegalArgumentException("negative weight {0} at index {1} ",dx2[i],i);
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
c[i]=y[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
l[i-1]=d/sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]-xval[sum]>xval[k]-xval[i]){
k=ileft;
}else {
edge=iright;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lu[col][i]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
lu[col][i]=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lu[max][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
lu[max][i]=lu[col][i];
lu[col][i]=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=(i==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=(i==0)?null:p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
 final T p=(i==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=(i==0)?null:p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
tc[j]=c[j+1]+tc[j+1]*x[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
oldt=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
jacobian[i][pk]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
after[i]+=previous[i]+scaled[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaReal(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaImaginary(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
diagMax=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
offDiagMin=work[i+6];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
previousEMin=work[i+7];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
diagMax=0;
offDiagMin=work[i+6];
previousEMin=work[i+7];

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
t1+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
checkColumnIndex(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.next(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
bytes[i+1]=(byte)((random>>8)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
bytes[i+2]=(byte)((random>>16)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
bytes[i+3]=(byte)((random>>24)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
i+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
bytes[i+1]=(byte)((random>>8)&0xff);
bytes[i+2]=(byte)((random>>16)&0xff);
bytes[i+3]=(byte)((random>>24)&0xff);
i+=4;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
v3[i]=v1[i]-v2[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new ArrayList<Double>(nearest).set(i,GeneticAlgorithm.getRandomGenerator().nextDouble());
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m4=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m3=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
m1=0.0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
m4=0.0;
m3=0.0;
m1=0.0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p=buildArray(k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p=new double[k];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,i,p,0,k);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
secondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
squaredSecondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
secondary[i]=0;
squaredSecondary[i]=0;

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
pos=k+1;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
tiesTrace=new ArrayList<Integer>();
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
pos=k+1;
tiesTrace=new ArrayList<Integer>();

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(dx2[i]>=r){
setResult(p,i);
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k+k)>internalArray.length){
expandTo(startIndex+i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(dx2[k-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setSeed(19650218);
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dx2[i]-xval[k]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<0){
i=-i-2;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(k>=polynomials.length){
i--;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
p=Math.max(diagMax,dx2[k]+work[i+2]);
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
i++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<ranks.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<secondary.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
secondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
squaredSecondary[i]=0;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
secondary[i]=0;
squaredSecondary[i]=0;

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
for(int i=0;i<data.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<v.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
pos=i+1;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
tiesTrace=new ArrayList<Integer>();
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
pos=i+1;
tiesTrace=new ArrayList<Integer>();

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
out[ranks[i].getPosition()]=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<measurements.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<point.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((r+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=i;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<x.length;i++){
if(dx2[i-1]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<special.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<coordinates.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i++;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coefficients.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<bd.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<result.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<results.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
w[i]/=r;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<root.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<a.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<values.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<diagonal.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<p;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<parameters.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<simplex.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<c.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<r;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<xval.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<randomBytes.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<hash.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xArray.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<random.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<v.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
for(int i=0;i<v.length;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<pivot.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setSeed(19650218);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
bytes[bytesOut++]=(byte)nextInt();
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(r==bytes.length){
return ;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
bytes[bytesOut++]=(byte)nextInt();
if(r==bytes.length){
return ;
}

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<wm.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rawData.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(r==GoalType.MINIMIZE){
for(int i=0;i<point.length;++i){
dx2[i]=-r[i];
}
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimensionSize.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
vector[i]++;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newPols.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<centroid.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<p.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(coefficients.length==1){
return new double[]{0};
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=c.length;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
list[target]=list[i];
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
list[i]=k;
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
list[target]=list[i];
list[i]=k;

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<r;i++){
if(dx2[i]>=r){
 final T p=pointSet.get(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<k+r;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<currentState.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<optima.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<steps.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newCoefficients.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
allEquals=false;
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(true){
throw MathRuntimeException.createIllegalArgumentException("equals vertices {0} and {1} in simplex configuration",k,i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<k;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<y0.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<Math.min(coefficients.length,p.coefficients.length);i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,Math.min(coefficients.length,p.coefficients.length),new double[p],lowLength,p-lowLength);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
if(Double.isNaN(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("NaN weight at index {0}",i);
}
if(Double.isInfinite(dx2[i])){
throw MathRuntimeException.createIllegalArgumentException("Infinite weight at index {0}",i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<main.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed1.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<k;i++){
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<=dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.abs(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=k;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<observations.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dx2.length;i++){
curr=observations[j];
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<sums.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<after.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,p,0,coefficients.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<eigenvectors.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetEvaluations();
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
verifyDataSet(dx2);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,dx2,0,y0.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(k);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k=k;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setInterpolatedTime(p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,p,0,internalArray.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=p;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<interpolator.yDotK.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<(r==null)?-1:currentState.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(r>0){
throw MathRuntimeException.createIllegalStateException("first {0} columns are not initialized yet",column);
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p=new BigDecimal[k][k];
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<yMidDots.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rescale(dx2,y,p);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.p=new double[i];
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,this.p,0,i);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
incrementAll(dx2,0,values.length);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkSubMatrixIndex(this,i,p,r,r+k-1);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkSubMatrixIndex(i,p,r,r+k-1);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FastFourierTransformer.verifyDataSet(dx2);
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(r==1){
new double[f.length][0]=0.0;
return transformed;
}
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Collections.sort(this.getChromosomes());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new ArrayList<Integer>().add(secondary.length+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
incrementJacobianEvaluationsCounter();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.computeBinStats();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[k];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2[k-1]=1.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=i;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
G2=G.multiply(G);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=N1.multiply((N.multiply(H)).subtract(G2));
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<length){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
if(k==bytes.length){
return ;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d==1){
return new double[]{0};
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
iterateSimplex(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
d=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
evaluateSimplex(p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[k],0,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,d,new double[r],lowLength,r-lowLength);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b.length!=d){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,m);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<maximalIterationCount){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
++r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=null;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(vector.length!=dimensionSize.length){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",vector.length,dimensionSize.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length==GoalType.MINIMIZE){
for(int i=0;i<d;++i){
dx2[i]=-r[i];
}
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
updateJacobian();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
RealMatrix nearest=new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[k][m])).getSolver().getInverse();
return inverse.getData();
}catch (InvalidMatrixException ime) {
  throw new EstimationException("unable to compute covariances: singular problem");
}

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetEvaluations();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
random=d*Math.cos(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
nextGaussian=d*Math.sin(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
random=d*Math.cos(p);
nextGaussian=d*Math.sin(p);

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(coefficients.length<p.coefficients.length){
for(int i=sum;i<d;++i){
new double[d][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d==0){
throw MathRuntimeException.createArithmeticException("Array sums to zero");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkBinomial(k,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k==1)||(k==k-1)){
return n;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k/2){
return binomialCoefficientDouble(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<67){
return binomialCoefficient(n,k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k==1)||(k==k-1)){
return Math.log(n);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<67){
return Math.log(binomialCoefficient(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<1030){
return Math.log(binomialCoefficientDouble(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k/2){
return binomialCoefficientLog(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumWeights+=sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumY+=d*sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumWeights+=sum;
sumY+=d*sum;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new double[d][sum]=1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
r=d*sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p.set(r,GeneticAlgorithm.getRandomGenerator().nextDouble());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(f.length==1){
new double[f.length][0]=0.0;
return transformed;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2[0]=0.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
optimaValues[i+1]=r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
optimaValues[i+1]=r;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
polynoms[j+4][i]=16*(yMidDots[j][i]+d*polynoms[j+2][i]-2*d*polynoms[j][i]);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(sum);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
d=sum;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nearest.divide(BigInteger.valueOf(d)).bitLength()>31){
throw MathRuntimeException.createArithmeticException("overflow, numerator too large after multiply: {0}",w);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,new double[sum],0,internalArray.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[sum];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,new double[coefficients.length],0,coefficients.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=values.length;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=new OpenIntToDoubleHashMap(0.0);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetEvaluations();
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetEvaluations();
new NordsieckStepInterpolator().reinitialize(dx2,p);
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<x1){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
ret=Math.exp(SaddlePointExpansion.logBinomialProbability(k,k,p,(double)(i-k)/(double)m)+d-r);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(knots.length-1!=polynomials.length){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isStrictlyIncreasing(dx2)){
throw MathRuntimeException.createIllegalArgumentException("knot values must be strictly increasing");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.d=knots.length-1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.dx2=new double[d+1];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,this.knots,0,d+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.p=new PolynomialFunction[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(p,0,this.polynomials,0,d);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer().append('(');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new StringBuffer().append('(');
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((i<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
incrementAll(dx2,0,values.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=k;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=BLOCK_SIZE;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,139
========
Collections.sort(this.getChromosomes());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new ArrayList<Integer>().add(secondary.length+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
incrementJacobianEvaluationsCounter();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.computeBinStats();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[k];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2[k-1]=1.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=i;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return chooseInitialCenters(points,k,random);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return clusters;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
assignPointsToClusters(chooseInitialCenters(points,k,random),points);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return chooseInitialCenters(points,k,random);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
G2=G.multiply(G);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=N1.multiply((N.multiply(H)).subtract(G2));
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p=G.add(nearest.sqrt()).abs()>G.subtract(nearest.sqrt()).abs()?dplus:dminus;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
k++;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<length){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[bytesOut++]=(byte)sum;
if(k==bytes.length){
return ;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d==1){
return new double[]{0};
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
iterateSimplex(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
d=0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
evaluateSimplex(p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(new IntDoublePair[ranks.length],0,new IntDoublePair[k],0,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,d,new double[r],lowLength,r-lowLength);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(b.length!=d){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,m);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<maximalIterationCount){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
++r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(vector.length!=dimensionSize.length){
throw MathRuntimeException.createIllegalArgumentException("some dimensions don\'t match: {0} != {1}",vector.length,dimensionSize.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=null;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateJacobian();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
RealMatrix nearest=new LUDecompositionImpl(MatrixUtils.createRealMatrix(new double[k][m])).getSolver().getInverse();
return inverse.getData();
}catch (InvalidMatrixException ime) {
  throw new EstimationException("unable to compute covariances: singular problem");
}

while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
resetEvaluations();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
random=d*Math.cos(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
nextGaussian=d*Math.sin(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
random=d*Math.cos(p);
nextGaussian=d*Math.sin(p);

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(coefficients.length<p.coefficients.length){
for(int i=sum;i<d;++i){
new double[d][i]=-p.coefficients[i];
}
}else {
System.arraycopy(coefficients,lowLength,newCoefficients,lowLength,highLength-lowLength);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(d==0){
throw MathRuntimeException.createArithmeticException("Array sums to zero");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkBinomial(k,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if((k==1)||(k==k-1)){
return n;
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if(k>k/2){
return binomialCoefficientDouble(n,n-k);
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
if(k<67){
return binomialCoefficient(n,k);
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<67){
return Math.log(binomialCoefficient(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k<1030){
return Math.log(binomialCoefficientDouble(n,k));
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k>k/2){
return binomialCoefficientLog(n,n-k);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumWeights+=sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumY+=d*sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
sumWeights+=sum;
sumY+=d*sum;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,k);
MatrixUtils.checkColumnIndex(this,k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new double[d][sum]=1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=0;
r=d*sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
p.set(r,GeneticAlgorithm.getRandomGenerator().nextDouble());
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(f.length==1){
new double[f.length][0]=0.0;
return transformed;
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2[0]=0.0;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
optimaValues[i+1]=r;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
optima[i+1]=dx2[i];
optimaValues[i+1]=r;

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(k);
checkColumnIndex(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
polynoms[j+4][i]=16*(yMidDots[j][i]+d*polynoms[j+2][i]-2*d*polynoms[j][i]);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(sum);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
d=sum;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nearest.divide(BigInteger.valueOf(d)).bitLength()>31){
throw MathRuntimeException.createArithmeticException("overflow, numerator too large after multiply: {0}",w);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.length);
while(resultSet.size()<k){
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,new double[coefficients.length],0,coefficients.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,new double[sum],0,internalArray.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
dx2=new double[sum];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=values.length;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest=new OpenIntToDoubleHashMap(0.0);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<x1){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new NordsieckStepInterpolator().reinitialize(dx2,p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.reinitialize(new double[y0.length],p);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new NordsieckStepInterpolator().reinitialize(dx2,i);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nearest.reinitialize(new double[y0.length],i);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
ret=Math.exp(SaddlePointExpansion.logBinomialProbability(k,k,p,(double)(i-k)/(double)m)+d-r);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=yval.length){
throw new DimensionMismatchException(xval.length,yval.length);
}
this.sum=brightnessExponent;
nearest=new ArrayList<MicrosphereSurfaceElement>(k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(k==0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",k);
}
shuffle(getNatural(d),d-k);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(knots.length-1!=polynomials.length){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isStrictlyIncreasing(dx2)){
throw MathRuntimeException.createIllegalArgumentException("knot values must be strictly increasing");
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.d=knots.length-1;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.dx2=new double[d+1];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(dx2,0,this.knots,0,d+1);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.p=new PolynomialFunction[d];
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(p,0,this.polynomials,0,d);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer().append('(');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
new StringBuffer().append('(');
new StringBuffer().append(')');
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((i<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
incrementAll(dx2,0,values.length);
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
r=k;
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(resultSet.size()<k){
int sum=BLOCK_SIZE;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((k<0)||(k>=d)){
throw MathRuntimeException.createIllegalArgumentException("out of range root of unity index {0} (must be in [{1};{2}])",k,0,omegaCount-1);
}
while(resultSet.size()<k){
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;
for(int i=0;i<dx2.length;i++){
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}
}
}
return resultSet;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,153
========
for(Cluster<T> c : clusters){
 final double distance=point.centroidOf(c.getCenter());
if(distance<minDistance){
minDistance=distance;
minCluster=c;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Cluster<T> c : clusters){
if(!c.getCenter().centroidOf(cluster.getPoints()).equals(c.getCenter())){
clusteringChanged=true;
}
 final double distance=point.distanceFrom(c.getCenter());
if(distance<minDistance){
minDistance=distance;
minCluster=c;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,154
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,155
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,156
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,157
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,161
Find no block!
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,162
org.apache.commons.math.stat.clustering.Cluster,45
Find no block!
org.apache.commons.math.stat.clustering.Cluster,46
org.apache.commons.math.stat.clustering.Cluster,47
org.apache.commons.math.stat.clustering.Cluster,48
Find no block!
org.apache.commons.math.stat.clustering.Cluster,71
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,43
Find no block!
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,44
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,45
Find no block!
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,52
org.apache.commons.math.stat.clustering.EuclideanIntegerPoint,57
org.apache.commons.math.util.MathUtils,1624
========
int sum=0;
for(int i=NAN_GAP;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 0
TESTING : math_79
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.apache.commons.math.util.MathUtilsTest::testL2DistanceInt
  - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::dimension2
  - org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest::testDistance
Failing tests: 3
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int sum=0;
for(int i=0;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int sum=0;
SAFE_MIN=0;
for(int i=0;i<p1.length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int sum=0;
for(int i=NAN_GAP;i<length;i++){
 final int dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
double sum=0;
for(int i=0;i<p1.length;i++){
 final double dp=p1[i]-p2[i];
sum+=dp*dp;
}
return Math.sqrt(sum);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COUNT THESE===> Subject [_name=math, _id=79, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest testPerformClusterAnalysisDegenerate
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
Failing tests: 0
TESTING : math_79
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_60_4/math/math_79_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
Failing tests: 0
Successfully repair!
