java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 2e904fcd to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2e904fcd:372eb11e..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Closure-25b..................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2
PURIFY IS TRUE
=================================================
Project : closure_25	start : 19/10/27 17:48

Field type inconsistancy 'THIS' with types : Token and int
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'SUPER' with types : FunctionInjector.Reference and SimpleReference<SimpleSlot>
Field type inconsistancy 'type' with types : JSType and Type
Field type inconsistancy 'errors' with types : List<JSError> and JSError[]
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : Name and String
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/closure/25.txtTESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (compile.tests)................................................ 
IN COMMENT TEST CASE: com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<com.google.javascript.rhino.jstype.JSTypeRegistry,1314>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1456>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1617>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1620>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1621>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1625>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1626>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1628>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1629>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1630>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1633>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1638>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1643>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1645>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1647>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1655>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1622>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1664>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1737>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1738>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2084>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2085>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2087>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2091>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2092>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2096>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2098>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2099>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2106>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2109>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2111>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2115>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2117>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2118>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2119>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2130>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2137>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2139>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2143>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2144>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2149>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2153>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2154>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2156>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2160>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2161>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2162>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2163>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2171>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2173>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2174>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,57>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,53>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,55>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,58>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,59>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,71>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,72>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,75>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,76>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,85>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,89>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,96>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,97>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,98>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,99>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,102>, <com.google.javascript.rhino.jstype.RecordTypeBuilder,106>, <com.google.javascript.rhino.jstype.RecordType,79>, <com.google.javascript.rhino.jstype.RecordType,67>, <com.google.javascript.rhino.jstype.RecordType,68>, <com.google.javascript.rhino.jstype.RecordType,80>, <com.google.javascript.rhino.jstype.RecordType,82>, <com.google.javascript.rhino.jstype.RecordType,83>, <com.google.javascript.rhino.jstype.RecordType,84>, <com.google.javascript.rhino.jstype.RecordType,88>, <com.google.javascript.rhino.jstype.RecordType,89>, <com.google.javascript.rhino.jstype.RecordType,92>, <com.google.javascript.rhino.jstype.RecordType,93>, <com.google.javascript.rhino.jstype.RecordType,122>, <com.google.javascript.rhino.jstype.RecordType,128>, <com.google.javascript.rhino.jstype.RecordType,132>, <com.google.javascript.rhino.jstype.RecordType,133>, <com.google.javascript.rhino.jstype.RecordType,136>, <com.google.javascript.rhino.jstype.RecordType,272>, <com.google.javascript.rhino.jstype.RecordType,273>, <com.google.javascript.rhino.jstype.RecordType,274>, <com.google.javascript.rhino.jstype.RecordType,275>, <com.google.javascript.rhino.jstype.RecordType,278>, <com.google.javascript.rhino.jstype.RecordType,279>, <com.google.javascript.rhino.jstype.PrototypeObjectType,356>, <com.google.javascript.rhino.jstype.PrototypeObjectType,358>, <com.google.javascript.rhino.jstype.PrototypeObjectType,361>, <com.google.javascript.rhino.jstype.PrototypeObjectType,362>, <com.google.javascript.rhino.jstype.PrototypeObjectType,363>, <com.google.javascript.rhino.jstype.PrototypeObjectType,366>, <com.google.javascript.rhino.jstype.PrototypeObjectType,365>, <com.google.javascript.rhino.jstype.PrototypeObjectType,369>, <com.google.javascript.rhino.jstype.PrototypeObjectType,370>, <com.google.javascript.rhino.jstype.PrototypeObjectType,372>, <com.google.javascript.rhino.jstype.PrototypeObjectType,373>, <com.google.javascript.rhino.jstype.PrototypeObjectType,389>, <com.google.javascript.rhino.jstype.PrototypeObjectType,391>, <com.google.javascript.rhino.jstype.PrototypeObjectType,392>, <com.google.javascript.jscomp.TypedScopeCreator,1982>, <com.google.javascript.jscomp.TypedScopeCreator,1983>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1740>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1741>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1991>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2030>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2031>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2034>, <com.google.javascript.jscomp.TypedScopeCreator,1978>, <com.google.javascript.jscomp.TypedScopeCreator,1979>, <com.google.javascript.jscomp.TypedScopeCreator,1980>, <com.google.javascript.jscomp.TypedScopeCreator,1981>, <com.google.javascript.jscomp.TypeInference,1060>, <com.google.javascript.rhino.jstype.PrototypeObjectType,354>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2007>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2008>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2009>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2012>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2013>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2017>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2018>, <com.google.javascript.jscomp.TypedScopeCreator,1977>, <com.google.javascript.jscomp.TypedScopeCreator,1987>, <com.google.javascript.jscomp.TypedScopeCreator,2000>, <com.google.javascript.jscomp.DataFlowAnalysis,504>, <com.google.javascript.jscomp.NodeUtil,3058>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1748>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,105>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,108>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,135>, <com.google.javascript.jscomp.parsing.JsDocTokenStream,136>, <com.google.javascript.jscomp.NodeUtil,2025>, <com.google.javascript.jscomp.NodeUtil,2027>, <com.google.javascript.jscomp.NodeUtil,2028>, <com.google.javascript.jscomp.ClosureCodingConvention,322>, <com.google.javascript.jscomp.ClosureCodingConvention,327>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1491>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1492>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1494>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1493>, <com.google.javascript.rhino.jstype.JSTypeRegistry,1497>, <com.google.javascript.rhino.Node,2221>, <com.google.javascript.rhino.Node,2281>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,1999>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2000>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2004>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2006>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2020>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2021>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2025>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2027>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2029>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2036>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2275>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2276>, <com.google.javascript.jscomp.NodeUtil,3052>, <com.google.javascript.jscomp.Compiler,265>, <com.google.javascript.rhino.jstype.PrototypeObjectType,179>, <com.google.javascript.jscomp.Compiler,1536>, <com.google.javascript.jscomp.Compiler,1537>, <com.google.javascript.jscomp.Compiler,1539>, <com.google.javascript.jscomp.Compiler,1540>, <com.google.javascript.jscomp.Compiler,1542>, <com.google.javascript.jscomp.Compiler,1543>, <com.google.javascript.jscomp.parsing.JsDocInfoParser,2193>, <com.google.javascript.jscomp.Compiler,259>, <com.google.javascript.jscomp.Compiler,261>, <com.google.javascript.jscomp.NodeUtil,3045>, <com.google.javascript.jscomp.NodeUtil,3043>, <com.google.javascript.jscomp.CompilerOptions,1060>, <com.google.javascript.jscomp.ComposeWarningsGuard,127>, <com.google.javascript.jscomp.ComposeWarningsGuard,128>, <com.google.javascript.jscomp.ComposeWarningsGuard,130>, <com.google.javascript.jscomp.ComposeWarningsGuard,138>, <com.google.javascript.jscomp.DiagnosticGroup,60>, <com.google.javascript.jscomp.DiagnosticGroup,61>, <com.google.javascript.jscomp.DiagnosticGroup,62>, <com.google.javascript.jscomp.DiagnosticGroup,63>, <com.google.javascript.jscomp.DiagnosticGroup,71>, <com.google.javascript.jscomp.DiagnosticGroup,72>, <com.google.javascript.jscomp.DiagnosticGroup,74>, <com.google.javascript.jscomp.parsing.TypeSafeDispatcher,244>, <com.google.javascript.jscomp.parsing.IRFactory,862>, <com.google.javascript.jscomp.parsing.IRFactory,863>, <com.google.javascript.jscomp.parsing.IRFactory,864>, <com.google.javascript.jscomp.Scope,400>, <com.google.javascript.jscomp.DiagnosticGroup,117>, <com.google.javascript.jscomp.DiagnosticGroup,118>, <com.google.javascript.jscomp.DiagnosticGroup,119>, <com.google.javascript.jscomp.Scope,346>, <com.google.javascript.jscomp.SyntacticScopeCreator,108>, <com.google.javascript.jscomp.SyntacticScopeCreator,109>, <com.google.javascript.jscomp.SyntacticScopeCreator,107>, <com.google.javascript.jscomp.SyntacticScopeCreator,128>, <com.google.javascript.jscomp.SyntacticScopeCreator,129>, <com.google.javascript.jscomp.SyntacticScopeCreator,130>]
======================com.google.javascript.rhino.jstype.JSTypeRegistry,1314
com.google.javascript.rhino.jstype.JSTypeRegistry,1456
UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

========
case Token.LC :
return createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope).restrictByNotNullOrUndefined();


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (compile.tests)................................................ 
========
case Token.QMARK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COUNT THESE===> Subject [_name=closure, _id=25, _ssrc=/src, _tsrc=/test, _sbin=/build/classes, _tbin=/build/test, _dependency=null] com.google.javascript.jscomp.TypeInferenceTest testBackwardsInferenceNew
TESTING : com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
case Token.STAR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createDefaultObjectUnion(createFromTypeNodesInternal(n,sourceName,scope));


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null){
return getNativeType(UNKNOWN_TYPE);
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return createFromTypeNodesInternal(n,sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolveMode==ResolveMode.LAZY_EXPRESSIONS){
boolean hasTypeName(n)=hasTypeName(n);
if(hasNames){
return new UnresolvedTypeExpression(this,n,sourceName);
}
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FALSE :
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SETTER_DEF :
Preconditions.checkState(n.getParent().isObjectLit());
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=n.getString();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :
Node n.getFirstChild()=n.getFirstChild();
String n.getFirstChild().getQualifiedName()=calledFn.getQualifiedName();

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :
VariableLiveness isVariableReadBeforeKill(n.getFirstChild(),sourceName)=isVariableReadBeforeKill(n.getFirstChild(),sourceName);
VariableLiveness isVariableReadBeforeKill(n.getLastChild(),sourceName)=isVariableReadBeforeKill(n.getLastChild(),variable);

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException ex) {
  error(NEGATING_A_NON_NUMBER_ERROR,left);
  return n;
}

========
case Token.LC :
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope));

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BITNOT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DELPROP :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.COMMA :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FOR :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return getNativeType(UNKNOWN_TYPE);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ARRAYLIT :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.HOOK :

case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=n.getQualifiedName();
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null)return ;
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.LC :
return n.getJSType().restrictByNotNullOrUndefined();

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isGetProp()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getType(n.getFirstChild()).isUnknownType()||type.isUnionType()){
return false;
}
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
case Token.LC :
return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);

case Token.BANG :


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1617
========
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==TagType.Empty){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.SCRIPT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isName()){
return true;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getFirstChild()==n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.NAME){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=n.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isCall()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==scope){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
if(fieldTypeNode.getJSDocInfo()==null){
info=n.getJSDocInfo();
}
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getIntProp(Node.INCRDECR_PROP)==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==TagType.ArrayExpr){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.EQUALS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.getString().length()!=0);
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Context.IN_FOR_INIT_CLAUSE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(":");
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addExpr(fieldTypeNode.getFirstChild(),1,Context.OTHER);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.IF,fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(fieldTypeNode,2);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldTypeNode,3);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(fieldTypeNode.getFirstChild());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(fieldTypeNode.getChildAtIndex(1));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isAssign());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
next=fieldTypeNode.getNext();
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
radix=16;
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals(sourceName)||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals(sourceName)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf(sourceName,PROPERTY_CHECKING_UNION_SIZE)<0){
return -1;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parentName.substring(0,parentName.lastIndexOf('.'));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isUpperCase("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isJavaIdentifierStart("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hasType=true;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
right=n.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
right=n.getLastChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isCall()&&n.getFirstChild()==fieldTypeNode){
return false;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(n)){
return ;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildrenToFront(n.getLastChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildrenToBack(n.getFirstChild().detachFromParent());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return fieldTypeNode.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getLine(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getRegion(PROPERTY_CHECKING_UNION_SIZE);
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getLastChild());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (UnsupportedOperationException e) {
  violation("getString failed for" + Token.name(n.getType()),n);
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  compiler.report(t.makeError(n,INVALID_STYLE_ERROR,styleStr));
  return;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  t.report(n,MALFORMED_REGEXP,ex.getMessage());
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

UNKNOWN ASTNode type : catch (NumberFormatException e) {
  return n;
}

========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.EQUALS){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
errorReporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return false;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=TernaryValue.FALSE){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reporter.reportCodeChange();
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return ;
compiler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
break;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==Token.NAME){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
return true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(fieldNameNode,n.getParent()));
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nameInfo.superclass!=null){
recordReference(nameInfo.name,nameInfo.superclass,RefType.INHERITANCE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(sourceName+DISAMBIGUATION_SUFFIX);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryDefineLexicalQualifiedNameRef(NodeUtil.getBestLValueName(fieldNameNode),n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldName){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
transformationHandler.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
callNodeToParentMap.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldNameNode){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldType){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeChild(fieldNameNode);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
refNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
checkedClass.hasInstanceOfReference=true;
return ;

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=-1){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
IR.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.replaceChild(n,info.value.cloneTree());
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
fieldNameNode.reportCodeChange();
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.replaceChild(n,info.value.cloneTree());
fieldNameNode.reportCodeChange();

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
changed=lastGeneration||!p.newName.equals(n.getString());
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(p.newName);
changed=lastGeneration||!p.newName.equals(n.getString());

reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=src.restrictByNotNullOrUndefined();
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(templateTypeName!=null&&fieldName!=null);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
global.uses.add(n);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldNameNode)){
n.putBooleanProp(Node.FREE_CALL,true);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
abstractMethodAssignmentNodes.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
newName.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.setString(a.newName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.hasOneChild());
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(fieldNameNode,n,fieldType,lastGeneration);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
n.add(sourceName);
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
n.removeChild(fieldNameNode);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName==null||!templateTypeName.endsWith(".prototype."+fieldNameNode.getString())){
return ;
}
n.removeChild(fieldNameNode);

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(fieldNameNode.getParent()!=null&&fieldNameNode.getParent().isGetElem()){
Node fieldName=fieldNameNode.getParent();
while(fieldName.isGetProp()||fieldName.isGetElem()){
propObject=fieldName.getFirstChild();
}
Node n=fieldNameNode.getParent().cloneTree();
Node fieldTypeNode=n.getChildAtIndex(1);
if(fieldTypeNode.isString()&&NodeUtil.isValidPropertyName(fieldTypeNode.getString())){
Node n.getFirstChild()=n.getFirstChild();
Node IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent())=IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent());
fieldNameNode.getParent().getParent().replaceChild(ancestor,IR.getprop(n.getFirstChild().detachFromParent(),fieldTypeNode.detachFromParent()));
}else {
isValidExpansion=false;
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(hasType){
ObjectType getJSType(n).dereference()=getJSType(n).dereference();
if(getJSType(n).dereference()!=null){
type=getJSType(n).dereference();
}
}
if(getJSType(n).isFunctionPrototypeType()||(getJSType(n).toObjectType()!=null&&getJSType(n).toObjectType().getConstructor()!=null)){
return getJSType(n).toString();
}else if(fieldName!=null){
return fieldName;
}else if(getJSType(n).isFunctionType()){
return "function";
}else {
return getJSType(n).toString();
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(lastGeneration){
if(hasType){
return ;
}
while(fieldTypeNode!=null){
oType=fieldTypeNode.getImplicitPrototype();
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
Preconditions.checkArgument(fieldTypeNode.isTypeOf());
Preconditions.checkArgument(fieldTypeNode.getFirstChild()!=null);

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(" - ");
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(error.description);
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append('\n');
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
new StringBuilder().append(getLevelName(lastGeneration?CheckLevel.WARNING:CheckLevel.ERROR));
new StringBuilder().append(" - ");
new StringBuilder().append(error.description);
new StringBuilder().append('\n');
if(templateTypeName!=null){
new StringBuilder().append(templateTypeName);
new StringBuilder().append('\n');
if(0<=PROPERTY_CHECKING_UNION_SIZE&&PROPERTY_CHECKING_UNION_SIZE<=templateTypeName.length()){
new StringBuilder().append("^\n");
}
}

RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(!normalizeNumericString(sourceName).equals(fieldType)){
return n;
}
RecordTypeBuilder builder=new RecordTypeBuilder(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1620
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1621
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.ELLIPSIS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=current.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().getNext().getFirstChild()==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(fieldNameNode)){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetProp()&&lhs.getFirstChild().isThis()){
Node fieldNameNode.getFirstChild().getLastChild()=fieldNameNode.getFirstChild().getLastChild();
if(rhs.isName()&&rhs.getString().equals(n.getFirstChild().getNext().getFirstChild().getString())){
Node fieldTypeNode.getLastChild()=lhs.getLastChild();
return propertyName;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=lastNonRemovable;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.setDebugInformation(fieldNameNode.getFirstChild(),n.getFirstChild(),fieldName+".prototype");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n.getFirstChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=left.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
value=n.getFirstChild().getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext().getType()==Token.GETPROP){
Node fieldNameNode.getNext().getFirstChild()=fieldNameNode.getNext().getFirstChild();
secondArgument.removeChild(newChild);
fieldTypeNode.replaceChild(fieldNameNode,newChild);
n.replaceChild(secondArgument,IR.string(secondArgument.getFirstChild().getString()));
}else if(secondArgumentType==Token.GETELEM){
Node fieldNameNode.getNext().getFirstChild()=secondArgument.getFirstChild();
secondArgument.removeChild(newFirstArgument);
Node fieldNameNode.getNext().getLastChild()=secondArgument.getLastChild();
secondArgument.removeChild(newSecondArgument);
n.replaceChild(firstArgument,newFirstArgument);
n.replaceChild(secondArgument,newSecondArgument);
}else {
n.replaceChild(secondArgument,IR.string(secondArgument.getString()));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();name!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setSourceEncodedPosition(n.getSourcePosition()+FOR_QUOTE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setLength(current.getString().length());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeAddToSymbolTable(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
key=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
key=fieldTypeNode.getNext();
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getNext().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.CALL_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.THIS_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.RETURN_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.initForScopeRoot(n.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objectLiteral.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();keyNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
next=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isNumber()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(n.getDouble()>=0)||Double.isInfinite(dindex)){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getDouble()!=(int)n.getDouble()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=arg.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isArrayLit()||!fieldNameNode.getNext().getString().equals("join")){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null&&right.isString()&&",".equals(right.getString())){
n.removeChild(right);
reportCodeChange();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.SWITCH,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>1){
violation("Expected at most 1 \'default\' in switch but was "+defaults,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()){
return new Assign(fieldNameNode,current,hasType);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();arg!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=args.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName)!=null&&NodeUtil.getFunctionJSDocInfo(n)==null?null:fnInfo.getParameterType(sourceName).isVarArgs()){
fieldTypeNode.putBooleanProp(Node.IS_VAR_ARGS_PARAM,true);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&value.isName()&&value.getString().equals(fieldTypeNode.getString())){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=fieldTypeNode;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=extractExpression(fieldNameNode.getFirstChild(),state.extractBeforeStatement);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isBlock()||addingRoot.isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getFirstChild()==null||!addingRoot.getFirstChild().isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=block.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null&&NodeUtil.isFunctionDeclaration(fieldTypeNode);fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();next!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getType()==Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getFirstChild();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLitNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();key!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=varNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();child!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();a!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();nameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=nameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();nameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=nameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getNext().isNumber()){
fieldName=NodeUtil.getStringValue(property);
}else {
propertyName=property.getString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetElem()){
fieldNameNode.setQuotedString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(fieldTypeNode.getNext().detachFromParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new SourcePosition<AliasTransformation>(){
}
.setPositionInformation(n.getLineno(),n.getCharno(),fieldNameNode==null?Integer.MAX_VALUE:next.getLineno(),fieldNameNode==null?Integer.MAX_VALUE:next.getCharno());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.add(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=subtree.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isName()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().getNext());
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=collapse.endNode;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
collapse.parent.removeChildAfter(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(fieldTypeNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
collapse.parent.removeChildAfter(fieldNameNode);
if(fieldTypeNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
n=fieldTypeNode.getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
getParameterSlot(PROPERTY_CHECKING_UNION_SIZE).getType();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();n!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=val.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==fieldTypeNode.getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
nonNullableTypeNames.add(fieldTypeNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();child!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||hasType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode.getFirstChild(),Branch.UNCOND,fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldNameNode.getNext(),Branch.UNCOND,fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild(),init);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldNameNode.getNext(),iter);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(fieldTypeNode.getFirstChild(),Branch.UNCOND,fieldTypeNode);
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
createEdge(fieldNameNode.getNext(),Branch.UNCOND,fieldTypeNode);
connectToPossibleExceptionHandler(fieldTypeNode.getFirstChild(),init);
connectToPossibleExceptionHandler(fieldTypeNode,fieldNameNode);
connectToPossibleExceptionHandler(fieldNameNode.getNext(),iter);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(n.getNext(),Branch.UNCOND,fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldTypeNode,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createEdge(n.getNext(),Branch.UNCOND,fieldTypeNode);
createEdge(fieldTypeNode,Branch.ON_TRUE,computeFallThrough(fieldType));
createEdge(fieldTypeNode,Branch.ON_FALSE,computeFollowNode(forNode,this));
connectToPossibleExceptionHandler(fieldTypeNode,n.getNext());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(trueNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(n.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&NodeUtil.isObjectLitKey(fieldNameNode,parent)){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(reporter.get(sourceName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNew()){
Node fieldNameNode=parent.getFirstChild();
if(target.isName()&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){
reporter.get(sourceName).setInline(false);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isAssign()&&parent.getFirstChild()==n){
reporter.get(sourceName).setInline(false);
}else {
fs.setRemove(false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getJSDocInfo().isConsistentIdGenerator()&&!doc.isIdGenerator()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isAssign()){
fieldName=n.getFirstChild().getQualifiedName();
}else if(n.isVar()){
name=n.getFirstChild().getString();
}else if(n.isFunction()){
name=n.getFirstChild().getString();
if(name.isEmpty()){
return ;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(fieldName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,fieldNameNode.getString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasOneChild()){
Node fieldNameNode=n.removeFirstChild();
Node n.getParent()=n.getParent();
Node IR.exprResult(fieldNameNode).srcref(n)=IR.exprResult(condition).srcref(n);
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
processNode(fieldTypeNode,new JsonML(TagType.TryStmt));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverse(n.getFirstChild(),scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setJSType(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isName()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();propNameNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.getRootNode().getFirstChild().getNext().isParamList());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("  ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(Strings.repeat(" ",PROPERTY_CHECKING_UNION_SIZE-Integer.toString(PROPERTY_CHECKING_UNION_SIZE).length()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(PROPERTY_CHECKING_UNION_SIZE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("| ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0){
builder.append(fieldName);
PROPERTY_CHECKING_UNION_SIZE=-1;
}else {
builder.append(line);
builder.append('\n');
start=end+1;
end=templateTypeName.indexOf('\n',start);
PROPERTY_CHECKING_UNION_SIZE++;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isNew()||n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.var(fieldNameNode).copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replacementNode=IR.var(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
IR.var(fieldNameNode).copyInformationFrom(n);
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
reporter.reportCodeChange();
replacementNode=IR.var(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=assignNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldNameNode.getType()){
case Token.ASSIGN :
break;

case Token.GETPROP :
break;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=map.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isHook(),"Expected: HOOK, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=typeArray.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.TRY,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(n,3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.BLOCK,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldNameNode,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()==3){
validateBlock(n.getLastChild());
hasType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
violation("Missing catch or finally for try statement.",n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(n,fieldTypeNode,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=wrapNode(Token.BANG,typeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!"goog.exportSymbol".equals(fieldName)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isString()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null||fieldNameNode.getNext().getNext()!=null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(templateTypeName==null){
src=MISSING_SOURCE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=child;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=node.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
child=n.getFirstChild().getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=fieldType.autoboxesTo()!=null?boxedType:instanceType;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldType.toObjectType()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=n;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
pushScope(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
traverseBranch(n.getFirstChild(),n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(fieldNameNode,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getNext()==null&&body.isBlock(),body);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(n,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
popScope();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(left);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=tryMinimizeCondition(right);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
length=n.getString().length()-PROPERTY_CHECKING_UNION_SIZE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
end=n.getString().length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE==0){
return fieldName;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.addChildToBack(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFor());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isEmpty()&&!init.isVar()){
init=trySimplifyUnusedResult(init,false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldType.isEmpty()){
increment=trySimplifyUnusedResult(increment,false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isEmpty()){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fieldNameNode)!=TernaryValue.FALSE){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!mayHaveSideEffects(fieldNameNode)){
NodeUtil.removeChild(n.getParent(),n);
}else {
Node IR.exprResult(fieldNameNode.detachFromParent()).copyInformationFrom(cond)=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
n.getParent().replaceChild(n,statement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n.getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
PROPERTY_CHECKING_UNION_SIZE++;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=expandedBlock;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=paramsParent.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();currentParam!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getQualifiedName()!=null&&fieldName!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("prototype".equals(sourceName)){
Var scope.getVar(n.getQualifiedName())=scope.getVar(n.getQualifiedName());
if(qVar!=null){
ObjectType ObjectType.cast(scope.getVar(n.getQualifiedName()).getType())=ObjectType.cast(qVar.getType());
if(qVarType!=null&&fieldTypeNode!=null&&rhsValue.isObjectLit()){
builder.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());
}else if(!qVar.isTypeInferred()){
return ;
}
if(qVar.getScope()==scope){
scope.undeclare(qVar);
}
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
c=trySimplifyUnusedResult(fieldNameNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
c=trySimplifyUnusedResult(fieldNameNode);

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.string(fieldName.substring(PROPERTY_CHECKING_UNION_SIZE,index+1)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
symbol=fieldType==null?null:getSymbolForTypeHelper(fieldType,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.length()==fieldName.length()){
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input);
}else {
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input.substring(0,suffixStart))+input.substring(suffixStart);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>=fieldName.length()-1){
return fieldName;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addAllChildren(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
addSimplifiedChildren(fieldNameNode.getNext().getNext());
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=parameters.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();paramNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=safeResolve(returnType,reporter,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=tightenTypesAfterAssertions(scope,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=exportedObjectLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isVarDeclaration(n)&&n.hasChildren()){
return new VarDefinition(n,lastGeneration);
}else if(fieldTypeNode.isFunction()&&parent.getFirstChild()==n){
if(!NodeUtil.isFunctionExpression(parent)){
return new NamedFunctionDefinition(parent,isExtern);
}else if(!n.getString().equals("")){
return new FunctionExpressionDefinition(parent,isExtern);
}
}else if(parent.isAssign()&&parent.getFirstChild()==n){
return new AssignmentDefinition(parent,isExtern);
}else if(NodeUtil.isObjectLitKey(n,parent)){
return new ObjectLiteralPropertyDefinition(parent,n,n.getFirstChild(),isExtern);
}else if(parent.isParamList()){
Node fieldNameNode=parent.getParent();
return new FunctionArgumentDefinition(function,n,isExtern);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()*2-STRING_SPLIT_OVERHEAD<=0){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName!=null){
String sourceName=Joiner.on(delimiter).join(new String[n.getChildCount()]);
Node IR.call(IR.getprop(IR.string(sourceName),IR.string("split")),IR.string(""+fieldName))=IR.call(IR.getprop(IR.string(template),IR.string("split")),IR.string(""+delimiter));
call.copyInformationFromForTree(n);
n.getParent().replaceChild(n,call);
reportCodeChange();
return call;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
if(!objLitNode.isObjectLit()){
throw new MalformedException("OBJLIT node expected",objLitNode);
}
for(Node fieldTypeNode=objLitNode.getFirstChild();aNode!=null;aNode=aNode.getNext()){
if(!aNode.isStringKey()){
throw new MalformedException("STRING_KEY node expected as OBJLIT key",aNode);
}
String sourceName=aNode.getString();
if(!isLowerCamelCaseWithNumericSuffixes(phName)){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+phName,aNode);
}
if(Sets.newHashSet().contains(phName)){
throw new MalformedException("Duplicate placeholder name: "+phName,aNode);
}
phNames.add(phName);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=trySimplifyUnusedResult(left);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();keyNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=paramNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(fieldNameNode.getJSType()==null||fieldNameNode.getJSType().isUnknownType()){
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
n.replaceChild(fieldTypeNode,fieldTypeNode.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((fieldTypeNode.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
ObjectType fieldType.dereference()=fieldType.dereference();
if(dereferenced!=null){
type=dereferenced;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
state=isVariableReadBeforeKill(fieldNameNode,sourceName);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createName(fieldNameNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
createName(fieldNameNode.getString());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getParent().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachChildren();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(mayHaveSideEffects(n.getFirstChild())){
fieldTypeNode=IR.comma(cond,NodeUtil.getImpureBooleanValue(n.getFirstChild()).toBoolean(true)?n.getFirstChild().getNext():n.getFirstChild().getNext().getNext()).srcref(n);
}else {
replacement=branchToKeep;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
fieldNameNode.setJSType(type);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getParent().isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
n.removeChild(fieldTypeNode);
fieldTypeNode.getFirstChild().detachFromParent();
}else {
fieldNameNode=IR.name(appendPropForAlias(templateTypeName,fieldName));
if(key.getBooleanProp(Node.IS_CONSTANT_NAME)){
refNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
key.replaceChild(value,refNode);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.VAR);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isSyntheticBlock()||n.getParent()==null){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.tryMergeBlock(n)){
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n2clone.parent=n;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(result.last!=null){
result.last.next=getFirstChild().cloneTree();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(result.first==null){
result.first=getFirstChild().cloneTree();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
result.last=getFirstChild().cloneTree();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n2clone.parent=n;
if(result.last!=null){
result.last.next=getFirstChild().cloneTree();
}
if(result.first==null){
result.first=getFirstChild().cloneTree();
}
result.last=getFirstChild().cloneTree();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,NodeUtil.getConditionExpression(node));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isEmpty()){
elem=NodeUtil.newUndefinedNode(elem);
}else {
n.removeChild(elem);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=AND;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=OR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldName.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=callNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.setString(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
createEdge(n,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
swtich (parent.getType()){
case Token.DEFAULT_CASE :

case Token.CASE :

case Token.TRY :
break;

default :
if(n.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.number(fieldName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=start.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
fieldTypeNode.removeChild(n);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildBefore(fieldNameNode,n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange("WHILE node");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
fieldNameNode.copyInformationFrom(n);
n.addChildBefore(fieldNameNode,n.getFirstChild());
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
reportCodeChange("WHILE node");

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldNameNode,n.getParent().getParent());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.replaceChild(n,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
fieldNameNode.replaceChild(n,n.getNext());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=c;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=c;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();c!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.IF :
fieldTypeNode=n.getFirstChild().getNext();
break;

case Token.WHILE :

case Token.FOR :
child=NodeUtil.getLoopCodeBlock(n);
break;

default :
return ;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(n,Token.FUNCTION);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode,Token.NAME);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode.getNext(),Token.PARAM_LIST);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode.getNext().getNext(),Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldNameNode.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(secondArg.getNext()!=null||!secondArg.isNumber()){
return n;
}else {
fieldType=(int)secondArg.getDouble();
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,IR.number(templateTypeName.equals("indexOf")?fieldName.indexOf(sourceName,fieldType):lstring.lastIndexOf(searchValue,fromIndex)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf(PROTOTYPE_SUBSTRING)!=-1){
nameInfo.isPrototype=true;
nameInfo.prototypeClass=fieldName.substring(0,idx);
nameInfo.prototypeProperty=name.substring(idx+PROTOTYPE_SUBSTRING_LEN);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.isExternallyReferenceable=(scope.getVar(sourceName)==null&&nonNullableTypeNames.contains(sourceName))||isExternallyReferenceable(scope,fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=node;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=hasType;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
n.addChildToBack(fieldNameNode);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=true;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=hasType;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildToBack(fieldNameNode);
insertExprResultState=true;
insertExprResultState=hasType;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(createCheckTypeCallNode(fieldTypeNode.getJSType().toMaybeFunctionType().getReturnType(),fieldNameNode.cloneTree())==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(fieldNameNode,createCheckTypeCallNode(fieldTypeNode.getJSType().toMaybeFunctionType().getReturnType(),fieldNameNode.cloneTree()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedNamedTypes.putAll(scope,unresolvedNamedTypes.removeAll(scope));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope!=null&&scope.getParentScope()==null){
PrototypeObjectType (PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS)=(PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS);
JSType fieldType=getType("Window");
if(globalThis.isUnknownType()){
ObjectType ObjectType.cast(fieldType)=ObjectType.cast(windowType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=skipFinallyNodes(follow);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null&&(n.isThrow()||fieldNameNode!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null||areMatchingExits(n,follow)){
n.detachFromParent();
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldName!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=p.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType<0){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.add(IR.string("").srcref(fieldTypeNode),fieldNameNode.detachFromParent()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.add(IR.string("").srcref(fieldTypeNode),fieldNameNode.detachFromParent()));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=fieldName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=n;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDeferredType(n,createFunctionTypeFromNodes(n,sourceName,NodeUtil.getBestJSDocInfo(n),fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),n.getFirstChild())).useSourceInfoFromForTree(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.replaceChild(n,IR.exprResult(IR.assign(IR.getprop(IR.name("module"),IR.string("exports")),n.getFirstChild())).useSourceInfoFromForTree(n));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateAssignAllowedStack(fieldTypeNode,false);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=parent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastWasEmpty=fieldNameNode.isEmpty();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
lastWasEmpty=fieldNameNode.isEmpty();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.annotations"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.suppressions"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=sourceName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.get(sourceName)==null){
nameGenerator=reporter.get(sourceName);
hasType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(builder.get(sourceName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
PROPERTY_CHECKING_UNION_SIZE+=declareVarsForObjLitValues(n,sourceName,ref.node.getFirstChild(),fieldTypeNode,fieldNameNode.getChildBefore(varNode),gramps);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=addStubsForUndeclaredProperties(n,sourceName,fieldNameNode,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType&&n.canEliminate()){
fieldTypeNode.removeChild(ref.node);
if(!varNode.hasChildren()){
fieldNameNode.removeChild(varNode);
}
PROPERTY_CHECKING_UNION_SIZE++;
ref.node=null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=firstInList;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setLength(sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setItem(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
n.setLength(sourceName.length());
new JSDocInfo.NamePosition().setItem(n);
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
rightType=getNativeType(UNKNOWN_TYPE);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.isEnumElementType()){
allowedValueType=allowedValueType.toMaybeEnumElementType().getPrimitiveType();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)!=ControlFlowAnalysis.computeFollowNode(fieldTypeNode)){
if(!isPure(n.getFirstChild())){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null&&(n.isThrow()||n.getFirstChild()!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null||areMatchingExits(n,follow)){
Node fieldNameNode=IR.breakNode();
n.getParent().replaceChild(n,replacement);
this.reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
delta+=pattern.perMemberOverhead;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
delta+=pattern.perMemberOverhead;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.inferSlotType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
subtree=fieldNameNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
subtree=fieldNameNode;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getChildAtIndex(1));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getLastChild(),Context.PRESERVE_BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().length()==0){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!okToRenameVar(n.getString(),hasType)){
if(local){
String fieldName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
if(!newName.equals(name)){
n.setString(newName);
}
}
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.GETPROP :
Node fieldTypeNode=n.getLastChild();
setOriginalName(n,propNode.getString());
break;

case Token.FUNCTION :
String sourceName=NodeUtil.getNearestFunctionName(n);
if(functionName!=null){
setOriginalName(n,functionName);
}
break;

case Token.NAME :
setOriginalName(n,n.getString());
break;

case Token.OBJECTLIT :
for(Node fieldNameNode=n.getFirstChild();key!=null;key=key.getNext()){
if(!key.isQuotedString()){
setOriginalName(key,key.getString());
}
}
break;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=string;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
token=descriptionInfo.token;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n.removeFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(mayHaveSideEffects(fieldNameNode)){
Node IR.exprResult(fieldNameNode.detachFromParent()).srcref(cond)=IR.exprResult(cond.detachFromParent()).srcref(cond);
n.addChildAfter(condStatement,n.removeFirstChild());
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=block;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=NodeUtil.newUndefinedNode(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=fieldTypeNode.removeFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
newExpression=fieldTypeNode.removeFirstChild();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();current!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=current;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();current!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=current;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<LI> ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<A NAME=\""+fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("\n");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
generateType(builder,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=propNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(n);
Node fieldNameNode=propNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFunction(),"Node must be a function.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldNameNode.isBlock(),"Node must be a block.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getParent()==null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToFront(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldTypeNode.getFirstChild().cloneNode());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldTypeNode,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
n.detachFromParent();
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
n.removeChild(result);
fieldNameNode.replaceChild(n,result);
reportCodeChange();
return result;
}else {
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isInstanceOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=graph;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setType(getType(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.connect(getNamedContainingFunction(),new Reference(n,fieldTypeNode),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setType(getType(n));
n.connect(getNamedContainingFunction(),new Reference(n,fieldTypeNode),fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames.remove(fieldNameNode.getString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(templateTypeName!=null&&fieldType.restrictByNotNullOrUndefined().isTemplateType()){
if(lastGeneration){
reportError(TEMPLATE_TYPE_DUPLICATED,sourceName);
}
foundTemplateType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(new ArrayList<Node>().size()>0){
Node fieldNameNode=joinOnComma(commas,n);
fieldTypeNode.addChildBefore(comma,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reporter.reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isGetElem());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldName.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild().removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
commaTree=fuseExpressionIntoExpression(n.removeFirstChild(),fieldTypeNode.removeFirstChild().removeFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastGeneration=true;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.declareType(sourceName,getNativeType(UNKNOWN_TYPE));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.overwriteDeclaredType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isGetProp()){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext()==null||!callbackFunction.isFunction()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode.cloneTree().getChildAtIndex(1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setSideEffectFlags(Node.NO_SIDE_EFFECTS);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=mergeLineCharNo(PROPERTY_CHECKING_UNION_SIZE,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=firstPreciserScopeKnowingConditionOutcome(n,rightScope,!lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.EXPR_RESULT :

case Token.FUNCTION :

case Token.VAR :
break;

case Token.ASSIGN :
Preconditions.checkArgument(fieldTypeNode.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(n.getType()));

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isFor()){
if(fieldName.isEmpty()){
replacements.add(IR.empty());
}else {
Node fieldNameNode=collapseReplacements(replacements);
replacements.clear();
replacements.add(expr);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.lastIndexOf('.')==-1){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.substring(0,fieldName.lastIndexOf('.')).endsWith(".prototype")){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=fixupSourceLocation(sourceFile);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=-1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=FP;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fp=FP.fingerprint(sourceName)+(serialVersionUID<<1);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeCutLine();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
fieldTypeNode.replaceChild(fieldTypeNode,n.getLastChild());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode==null||Token.FUNCTION==source.getType());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.fieldTypeNode=source;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.templateTypeName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(ancestors.length>0);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNot()){
fieldNameNode=leftParent.removeFirstChild();
}else {
leftParent.detachFromParent();
left=IR.not(leftParent).srcref(leftParent);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldTypeNode.getType()){
case Token.ASSIGN :
return fieldTypeNode.getJSDocInfo();

case Token.VAR :
return ref.node==fieldTypeNode.getFirstChild()?fieldTypeNode.getJSDocInfo():ref.node.getJSDocInfo();

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordClassConstructorOrInterface(fieldName,fieldType,null,null,null,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(reporter.defineNameIfNotExists(sourceName,lastGeneration),"%s should be in the name graph as a node.",sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null){
reporter.defineNameIfNotExists(sourceName,lastGeneration).addAssignmentDeclaration(assign);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
forbidTemps=NodeUtil.has(fieldTypeNode.getLastChild(),new Predicate<Node>(){
  @Override public boolean apply(  Node n){
    if (n.isName()) {
      return n.getString().equals("eval");
    }
    if (!assumeMinimumCapture && n.isFunction()) {
      return n != fnNode;
    }
    return false;
  }
}
,NodeUtil.MATCH_NOT_FUNCTION);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=last;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()!=null&&info.getSuppressions().contains("duplicate")){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.add(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
add(fieldNameNode,Context.STATEMENT);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=cArg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.putBooleanProp(Node.FREE_CALL,false);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.putBooleanProp(Node.FREE_CALL,false);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.errorAtLine(templateTypeName,sourceName,fieldNameNode,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=typeRegistry;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(fieldNameNode.getPrototype());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=providedNames;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Preconditions.checkNotNull(parentName.replacementNode);
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.removeChild(n.getParent(),n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=scopes;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addStubsForUndeclaredProperties(n,sourceName,ref.node.getAncestor(2),ref.node.getParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getJSType(bind.target).restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SHEQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.POS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastID=PROPERTY_CHECKING_UNION_SIZE;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
lastID=PROPERTY_CHECKING_UNION_SIZE;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getLastChild().isReturn());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=INHERITANCE;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=REGULAR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
recordReference(sourceName,templateTypeName,fieldType);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=addMarker(fieldNameNode,nodeToInsertAfter,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Iterables.addAll(Sets.newTreeSet(ALPHA),fieldNameNode.getAllImplementedInterfaces());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(scope,fieldNameNode.getChildAtIndex(2),new DefineCallbackReturnCallback());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.removeFirstChild()!=null){
fieldNameNode.addChildToBack(returnRhs);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=src.restrictByNotNullOrUndefined();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=key;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").deleteCharAt(sb.length()-1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").append(")\\s*\\((.*?)\\)");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(NodeUtil.getInverseOperator(n.getType()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=getSourceId(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if((sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='0'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='9')||(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='A'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='Z')){
new StringBuilder().append(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE));
}else {
new StringBuilder().append('$');
new StringBuilder().append(Integer.toHexString(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
protectHex=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isName()||n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isNew(),"Expected: NEW, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.replaceChild(n,NodeUtil.newExpr(fieldTypeNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
fieldNameNode.replaceChild(n,NodeUtil.newExpr(fieldTypeNode));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BITNOT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.setType(Token.ASSIGN);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.replaceChild(fieldTypeNode.getLastChild(),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.addChildToBack(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tempNameValue=n.cloneTree();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
fieldTypeNode.setType(Token.ASSIGN);
fieldTypeNode.replaceChild(fieldTypeNode.getLastChild(),fieldNameNode);
fieldNameNode.addChildToBack(fieldTypeNode.getLastChild());
tempNameValue=n.cloneTree();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
String getExternalMessageId(templateTypeName)=getExternalMessageId(templateTypeName);
if(externalId!=null){
lastGeneration=true;
fieldType=externalId;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=symbolMap;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=templateTypeName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
replaced[i]=templateTypeName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=lp.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=sourceName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
replaced[i]=sourceName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=symbolMap;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(!n.isFunction()||!parent.isVar());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=references;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSType(scope);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
fieldNameNode.setJSType(scope);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeSetBaseType(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE<fieldName.getScope().getVarCount()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(fieldNameNode)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryRemoveDeadAssignments(fieldName,fieldName.getControlFlowGraph());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
makeLocalNamesUnique(fieldNameNode,lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rewriteFunctionDeclarations(fieldNameNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.getFunctionBody(fieldNameNode).detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
fixUnitializedVarDeclarations(NodeUtil.getFunctionBody(fieldNameNode));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(replaceReturns(NodeUtil.getFunctionBody(fieldNameNode),templateTypeName,fieldName,lastGeneration)!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=collapseDots(basePath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=collapseDots(targetPath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXPORT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TYPE :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
edgeList[i]=formatNodeName(PROPERTY_CHECKING_UNION_SIZE)+ARROW;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THROW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=cssNames;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THIS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SET_FROM_GLOBAL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1625
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(fieldTypeNode.getFirstChild())){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=NodeUtil.isLiteralValue(n,true);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=parent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=parametersNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=cArg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=codingConvention;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(first.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=node;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==null){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldNameNode.getFirstChild())){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isGetProp()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.FUNCTION){
return fieldTypeNode;
}else if(pType==Token.ASSIGN){
return parent.getLastChild();
}else if(pType==Token.VAR){
return fieldNameNode.getFirstChild();
}else {
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldTypeNode.getType()){
case Token.VOID :
return "VOID";

default :
return Token.name(type);

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=IR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldTypeNode.getParent().getType()){
case Token.NAME :
return parent.getString();

case Token.ASSIGN :
return parent.getFirstChild().getQualifiedName();

default :
return fieldTypeNode.getFirstChild().getString()!=null&&name.length()!=0?name:null;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isGet(fieldTypeNode.getFirstChild())){
current=current.getFirstChild();
hasType=true;
if(current.isGetProp()&&current.getLastChild().getString().equals("prototype")){
current=current.getFirstChild();
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isPrototypePropertyDeclaration(n)){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isVar()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getNext().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getParent().getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getParent().getParent().getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getParent().getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getQualifiedName()==null||qName.isEmpty()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=result;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getParent()==null||!greatGramp.isExprResult()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n.getFirstChild()==null)||!functionNode.isFunction()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(hasType||n.getType()==Token.NAME||nType==Token.GETPROP);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.NAME||nType==Token.GETPROP){
for(int PROPERTY_CHECKING_UNION_SIZE=1;i<PROPERTY_CHECKING_UNION_SIZE&&n.hasChildren();i++){
n=n.getFirstChild();
}
if(n.hasChildren()){
flattenNameRef(sourceName,n.getFirstChild(),n,sourceName);
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isPropertyAssignmentToName(n)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!sourceName.equals(fieldTypeNode.getFirstChild().getString())){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=ancestor;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=right.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext()==null||!nextNode.isExprResult()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isCall()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode==null){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=initCodeRoot.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.getLastChild().hasOneChild()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isReturn()){
return statement.getFirstChild();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.NOT){
TernaryValue NodeUtil.getPureBooleanValue(n)=NodeUtil.getPureBooleanValue(n);
swtich (value){
case TRUE :
return Token.TRUE;

case FALSE :
return Token.FALSE;

}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(fieldTypeNode,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=that.parameters.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=parameters;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=thisParam;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=otherParam;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isExprResult()){
if(maybeExpr.getFirstChild().isCall()){
Node fieldTypeNode.getFirstChild().getFirstChild()=maybeExpr.getFirstChild().getFirstChild();
if(calledFn.isGetElem()){
return false;
}else if(calledFn.isGetProp()&&calledFn.getLastChild().getString().startsWith("on")){
return false;
}
}
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=NULL;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=value;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=an;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING.equals(fieldTypeNode.getQualifiedName())){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
isPropAssign=true;
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(n.getNext());
isPropAssign=true;

fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node n : fieldTypeNode.children()){
if(n==n){
break;
}
if(isExpressionTreeUnsafe(n,lastGeneration)){
seenSideEffects=true;
hasType=true;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(parent.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nextParent;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nextNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.OR&&!lastGeneration||type==Token.AND&&rval){
fieldNameNode=n;
}else if(!mayHaveSideEffects(left)){
replacement=n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getFirstChild().cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0){
error(INDEX_OUT_OF_BOUNDS_ERROR,n);
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==Token.STRING){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
type=getValueType(n.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.parentForNewVarDecl=fieldTypeNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
info.siblingToInsertVarDeclBefore=fieldTypeNode.getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=true;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(use.node.getParent()==null){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=useSite.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.removeFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nextSibling;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsType(n,Token.IN)){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isCall()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=param;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=name;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isName()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=paramNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldNameNode.getFirstChild()==null){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getPropNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=CASE;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=fieldTypeNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode.getParent());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null&&!mayHaveSideEffects(elseBody)){
fieldTypeNode.removeChild(elseBody);
elseBody=null;
reportCodeChange();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldTypeNode,scope);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ObjectType.cast(getJSType(fieldTypeNode.getFirstChild()).restrictByNotNullOrUndefined())!=null){
JSType ObjectType.cast(getJSType(fieldTypeNode.getFirstChild()).restrictByNotNullOrUndefined()).getParameterType()=objType.getParameterType();
if(type!=null){
fieldTypeNode.setJSType(type);
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
Node fieldNameNode=n.getFirstChild().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
Preconditions.checkState(n.getFirstChild()==n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!nonNullableTypeNames.contains(n.getLastChild().getString())){
if(NodeUtil.isVarOrSimpleAssignLhs(n,fieldTypeNode)){
validProperties.add(propName);
}else {
return false;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=rValue;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldTypeNode.getFirstChild())){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getLastChild().getString().equals("call")||propString.equals("apply")){
return fieldTypeNode.getFirstChild().getNext();
}else {
return callTarget.getFirstChild();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=arrayLiteral;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isGetElem()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isCall()){
return ;
}
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=accessNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getProp(Node.ORIGINALNAME_PROP)!=null){
sourceName=originalName.toString();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.setDebugInformation(n.getFirstChild(),n,"?"+".prototype");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(n.isScript()||fieldTypeNode.getParent()!=null&&grandparent.isFunction()&&parent.isBlock())){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.hasOneChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType==null){
returnType=getNativeType(VOID_TYPE);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((fieldTypeNode.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(n)!=TernaryValue.UNKNOWN){
boolean NodeUtil.getImpureBooleanValue(n).toBoolean(true)=leftVal.toBoolean(true);
if(lval&&fieldTypeNode.getType()==Token.OR||!lval&&type==Token.AND){
fieldNameNode=n;
}else if(!mayHaveSideEffects(left)){
result=n;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=fieldTypeNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.removeFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasChildren()){
IR.call(IR.getprop(fieldNameNode.cloneNode(),IR.string("call")),fieldTypeNode.getFirstChild().cloneNode()).srcref(n).addChildrenToBack(call.removeChildren());
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=skipFinallyNodes(follow);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=fieldNameNode){
if(!isPure(n.getFirstChild())){
return n;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isAliasableType(n.getType())){
visitAliasableNode(n,n);
}else if(type==Token.NAME){
visitNameNode(n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryMinimizeExits(n.getFirstChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.hasCatchHandler(fieldTypeNode)){
Preconditions.checkState(allCatchNodes.hasOneChild());
Node fieldNameNode=allCatchNodes.getFirstChild();
Node fieldNameNode.getLastChild()=catchNode.getLastChild();
tryMinimizeExits(catchCodeBlock,PROPERTY_CHECKING_UNION_SIZE,sourceName);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=lastNonRemovable;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isUselessCase(n,fieldNameNode)){
removeCase(n,c);
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.getFirstChild().setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
redeclareSimpleVar(scope,fieldTypeNode.getFirstChild(),getNativeType(JSTypeNative.UNKNOWN_TYPE));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null==fieldTypeNode.getFirstChild().getNext()||(null!=null!=fieldTypeNode.getFirstChild().getNext()?pattern.getNext():null&&null!=flags.getNext())){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=typeRegistry;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild()==null){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldTypeNode.getFirstChild())){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isName()||n.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=current;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.NAME){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setJSType(getPropertyType(fieldNameNode.getJSType(),fieldTypeNode.getLastChild().getString(),n,scope));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldTypeNode,scope);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=functionNameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=Token.GETPROP&&type!=Token.GETELEM&&type!=Token.CALL){
replaceWithNull(n,fieldTypeNode);
break;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getParent()!=null);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldTypeNode.getParent().getType()){
case Token.SCRIPT :

case Token.BLOCK :

case Token.LABEL :
return true;

default :
return false;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(fieldTypeNode.getFirstChild().getQualifiedName())==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isThis()){
fieldTypeNode.replaceChild(leftChild,n);
}else {
replaceThis(leftChild,replacement);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=child;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=VAR_PREFIX;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getChildAtIndex(config.parameter);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=-1;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
processNode(fieldNameNode,new JsonML(TagType.TryStmt));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=child.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.hasChildren()){
processNode(child.getFirstChild(),new JsonML(TagType.TryStmt));
}else {
element.appendChild(new JsonML(TagType.Empty));
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
if(fieldTypeNode.getFirstChild().hasMoreThanOneChild()){
JSType createFromTypeNodesInternal(fieldTypeNode.getFirstChild().getFirstChild(),sourceName,scope)=createFromTypeNodesInternal(fieldTypeNode.getFirstChild().getFirstChild(),sourceName,scope);
namedType=new IndexedType(this,(ObjectType)hasType,createFromTypeNodesInternal(fieldTypeNode.getFirstChild().getFirstChild(),sourceName,scope));
}
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isCall()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isGetProp()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isString()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getFunctionName(n)==null){
pushContainingFunction(graph.UNKNOWN);
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.hasOneChild());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild()==null){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.hasOneChild());
if(fieldTypeNode.getFirstChild()==null){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.hasOneChild());
if(fieldTypeNode.getFirstChild()==null){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getChildCount()==2);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode==null){
n=fieldTypeNode.getFirstChild().getNext();
replacement=performArithmeticOp(PROPERTY_CHECKING_UNION_SIZE,valueToCombine,n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,node.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.getFirstChild().isNot()&&!fieldTypeNode.getLastChild().isNot()){
int NodeUtil.precedence(fieldTypeNode.getType())=NodeUtil.precedence(fieldTypeNode.getType());
if((isLowerPrecedence(leftParent,NOT_PRECEDENCE)&&isHigherPrecedence(leftParent,op_precedence))||(isLowerPrecedence(rightParent,NOT_PRECEDENCE)&&isHigherPrecedence(rightParent,op_precedence))){
return n;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isLiteralValue(fieldTypeNode.getFirstChild(),true)){
return fieldTypeNode;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nameNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(parent.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(parent.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(parent.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=lhs;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getprop;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.setString(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=currentNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=currentNode.getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(lastGeneration?fieldTypeNode.getFirstChild().getNext():fieldTypeNode.getFirstChild().getNext().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=p.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getFunctionJsDocInfo(n)!=null&&(jsDoc.isConstructor()||jsDoc.isInterface())){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(fieldTypeNode.getType()==Token.BLOCK||pType==Token.SCRIPT||pType==Token.NAME||pType==Token.ASSIGN||pType==Token.STRING_KEY)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.functionCallHasSideEffects(n)){
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType==null){
rightType=getNativeType(UNKNOWN_TYPE);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getBlockVar(n).getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getBlockVar(n);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=getBlockVar(n).getFirstChild().removeChildren();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getLastChild().detachFromParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=key;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.getFirstChild().isGetProp()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getQualifiedName()==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,fieldNameNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
hasType=child.getString();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,hasType);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=child.getNext();
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.empty().copyInformationFrom(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(fieldTypeNode.getFirstChild(),IR.empty());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isVar()){
fieldNameNode=init;
}else {
newStatement=NodeUtil.newExpr(init);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isFunctionDeclaration(n)){
hasType=new JsonML(TagType.FunctionDecl);
}else {
element=new JsonML(TagType.FunctionExpr);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isStatementBlock(fieldTypeNode.getParent())){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getFirstChild().getString()!=null);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ObjectType.cast(getJSType(n.getFirstChild()).restrictByNotNullOrUndefined())!=null){
ensurePropertyDeclaredHelper(n,ownerType);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(cur.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getNext().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild().getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==scope){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=nodeWithJsDocInfo;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getJSDocInfo()==null||!n.isGetProp()||!member.getFirstChild().isThis()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isGet(fieldTypeNode.getFirstChild())){
String fieldTypeNode.getFirstChild().getLastChild().getString()=callTarget.getLastChild().getString();
if(propString.equals("call")||propString.equals("apply")){
return true;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration&&fieldTypeNode.getFirstChild().getJSType()!=null){
hasType=maybeFnType.restrictByNotNullOrUndefined().toMaybeFunctionType();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType!=null||fieldTypeNode.getFirstChild().isFunction()){
Node fieldTypeNode.getNext()=fieldTypeNode.getNext();
Node fieldNameNode=safeNext(thisValue);
return new Bind(maybeFn,thisValue,parameters);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isReturnExpressBlock(n)){
fieldNameNode=getBlockReturnExpression(thenBranch);
thenExpr.detachFromParent();
}else {
thenExpr=NodeUtil.newUndefinedNode(n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getChildCount()==3);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isFunction());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
traverseBranch(fieldNameNode,fieldTypeNode);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!lastGeneration){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isVar()){
return isLhsOfForInExpression(parent);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=callee;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=arg;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getFirstChild()!=null){
Preconditions.checkState(param.isName());
sourceName=param.getString();
param=param.getNext();
if(param!=null){
Preconditions.checkState(param.isName());
sourceName=param.getString();
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addAllChildren(fieldTypeNode.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
addSimplifiedChildren(fieldTypeNode.getFirstChild().getNext());
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
addSimplifiedChildren(fieldNameNode);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getFirstChild().setString("");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildBefore(n)==null){
fieldTypeNode.addChildToFront(NodeUtil.newVarNode(NodeUtil.getFunctionName(n),n));
}else {
parent.addChildAfter(var,prev);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isFor());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isForIn(fieldTypeNode)){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getNext()==null||!callGoogNow.isCall()||callGoogNow.getNext()!=null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(n)!=TernaryValue.FALSE){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasBreakOrContinue(n)){
return n;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setJSType(getJSType(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateScopeForTypeChange(scope,fieldTypeNode.getFirstChild(),fieldTypeNode.getFirstChild().getJSType(),getJSType(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=graph;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=last;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=trySimplifyUnusedResult(left);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild()==null||!mayHaveSideEffects(left)){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
fieldNameNode.replaceChild(n,right);
reportCodeChange();
return right;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isGetProp()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.getFirstChild().isThis()&&!isPropertyTree(leftChild)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getStringValue(fieldNameNode)==null){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=first;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild().cloneNode();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isGet(fieldTypeNode)){
JSType fieldTypeNode.getJSType()=lValue.getJSType();
if(lValueType!=null&&lValueType.isNominalConstructor()){
return (lValueType.toMaybeFunctionType()).getInstanceType();
}else {
return normalizeClassType(lValue.getFirstChild().getJSType());
}
}else {
return normalizeClassType(lValue.getJSType());
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getChildCount()==2);
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isCall()){
throw new MalformedException("Message must be initialized using "+MSG_FUNCTION_NAME,node);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!MSG_FUNCTION_NAME.equals(fieldTypeNode.getFirstChild().getQualifiedName())){
throw new MalformedException("Message initialized using unrecognized function. "+"Please use "+MSG_FUNCTION_NAME,fnNameNode);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getJSType()!=null){
boolean hasType=maybeDefineTypedReference(fieldTypeNode,n.getLastChild().getString(),owner);
if(defined){
tryRemoveLexicalQualifiedNameRef(n.getQualifiedName(),n);
return ;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isGet(fieldNameNode)){
Node fieldTypeNode=getNode.getLastChild();
return propNode.isString()&&"toString".equals(propNode.getString());
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=function;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild()==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=callTarget;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isVar()){
lhs=lhs.getLastChild();
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isVar()){
lhs=lhs.getLastChild();
}
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getNext().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add("try");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(n,Context.PRESERVE_BLOCK);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getNext().getFirstChild()!=null){
add(catchblock);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE==3){
add("finally");
add(n,Context.PRESERVE_BLOCK);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=aNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.getNext().isString()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall()||callsite.isNew());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isString()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=typeSystem;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null&&NodeUtil.isFunctionObjectCall(fieldTypeNode)){
Maps.newLinkedHashMap().put(THIS_MARKER,cArg);
cArg=cArg.getNext();
}else {
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
argMap.put(THIS_MARKER,NodeUtil.newUndefinedNode(callNode));
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getString().isEmpty()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()){
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isName()&&isNameAssignedTo(name.getString(),n)){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Context.IN_FOR_INIT_CLAUSE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((fieldNameNode==null)||!functionNode.isFunction()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(n)){
return false;
}
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isQualifiedName()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.hasOneChild()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.getFirstChild().isReturn()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.getFirstChild().hasOneChild()){
return null;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isBlock()&&n.getParent()!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
createEdge(n,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=p.getNext();
Node fieldNameNode=parameters;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(ref.node.getLastChild(),n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isCall());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isGet(fieldTypeNode.getFirstChild())){
fieldTypeNode.putBooleanProp(Node.FREE_CALL,true);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().isName()&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isNew()){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(!EXTERN_OBJECT_PROPERTY_STRING.equals(fieldNameNode.getQualifiedName())){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(n.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(n.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(n.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(":");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addExpr(fieldTypeNode.getFirstChild(),1,Context.OTHER);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isCollapsibleValue(fieldTypeNode.getFirstChild(),true)&&collapseAssignEqualTo(n,n,leftValue)){
reportCodeChange();
}else if(isCollapsibleValue(fieldTypeNode.getFirstChild().getNext(),false)&&collapseAssignEqualTo(expr,exprParent,rightValue)){
reportCodeChange();
}else if(rightValue.isAssign()){
collapseAssign(rightValue,expr,exprParent);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(!n.getFirstChild().getNext().isString()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=n.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isGetterDef()||key.isSetterDef()){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(n.getFirstChild().getNext()));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().getNext().getNext()==null){
createEdge(n,Branch.ON_FALSE,computeFollowNode(node,this));
}else {
createEdge(node,Branch.ON_FALSE,computeFallThrough(elseBlock));
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,NodeUtil.getConditionExpression(node));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isNew()){
throw new IllegalStateException("Expected NEW node, got "+Token.name(callNode.getType()));
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isNoSideEffectsCall()){
return false;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldTypeNode,Token.CALL);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldTypeNode.getFirstChild(),Token.GETPROP);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkStringExprNode(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=firstClause;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=lValue;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getIntProp(Node.INCRDECR_PROP)==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(node.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isTry());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild()!=null&&callTarget.isName()&&callTarget.getString().equals("String")){
Node fieldTypeNode.getFirstChild().getNext()=callTarget.getNext();
if(value!=null){
Node IR.add(IR.string("").srcref(fieldTypeNode.getFirstChild()),fieldTypeNode.getFirstChild().getNext().detachFromParent())=IR.add(IR.string("").srcref(callTarget),value.detachFromParent());
fieldTypeNode.getParent().replaceChild(n,addition);
reportCodeChange();
return addition;
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isCall());
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getJSType(fieldNameNode).restrictByNotNullOrUndefined()!=null){
if(functionType.isFunctionType()){
FunctionType getJSType(fieldNameNode).restrictByNotNullOrUndefined().toMaybeFunctionType()=functionType.toMaybeFunctionType();
fieldTypeNode.setJSType(fnType.getReturnType());
backwardsInferenceFromCallSite(n,fnType);
}else if(functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))){
n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));
}
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isAssign());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(subtree.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=COMPILATION_ERROR;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=COMPILATION_WARNING;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=calledFn;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING_KEY :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OBJECTLIT :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=fieldNameNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldNameNode=dest;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=dest;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

case Token.ASSIGN :

Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OBJECTLIT :

Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OBJECTLIT :

Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=n;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateChildCount(n,1);
validateObjectLiteralKeyName(n);
validateFunctionExpression(n.getFirstChild());
if(!n.getFirstChild().getFirstChild().getString().isEmpty()){
violation("Expected unnamed function expression.",n);
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("call".equals(fieldTypeNode.getFirstChild().getNext().getString())){
if(first.isGetProp()){
addAction(new FunctionCallBuilder(first,fieldTypeNode.getNext()).setPropName(first.getFirstChild().getNext().getString()).setIsCallFunction().build());
}else {
addAction(new FunctionCallBuilder(first,receiver.getNext()).setIsCallFunction().build());
}
}else {
addAction(new FunctionCallBuilder(first,receiver.getNext()).setPropName(first.getNext().getString()).build());
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1626
com.google.javascript.rhino.jstype.JSTypeRegistry,1628
com.google.javascript.rhino.jstype.JSTypeRegistry,1629
com.google.javascript.rhino.jstype.JSTypeRegistry,1630
com.google.javascript.rhino.jstype.JSTypeRegistry,1633
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(line.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(stringValue.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||value.startsWith("\"")){
fieldName=value.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||value.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=value.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
builder.appendPlaceholderReference(fieldName.substring(PROPERTY_CHECKING_UNION_SIZE+PH_JS_PREFIX.length(),PROPERTY_CHECKING_UNION_SIZE));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(requiredFilename.startsWith("\'")||requiredFilename.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(requiredFilename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||requiredFilename.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(js.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
context=new GenerateNodeContext(fieldTypeNode,n,n);
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||input.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>=fieldName.length()-1){
return fieldName;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(stringVal.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")&&fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(stringVal.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
radix=16;
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(!NodeUtil.isExprAssign(fieldNameNode)){
return null;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.getFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldNameNode.getType()){
case Token.NAME :
return parent.getString();

case Token.ASSIGN :
return parent.getFirstChild().getQualifiedName();

default :
return fieldTypeNode.getFirstChild().getString()!=null&&name.length()!=0?name:null;

}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getFirstChild()==null){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||contents.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(pathPrefix.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=left.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getString().equals(fieldTypeNode.getString())){
return n;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName.indexOf(fieldName,PROPERTY_CHECKING_UNION_SIZE)<0){
return -1;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||line.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.LT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(first.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.GETELEM){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(n);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=callName.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(key.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.getLastChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.getChildCount()==2?fieldNameNode.getString():"";
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==scope){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(filename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=filename.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(filename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=filename.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,fieldTypeNode.getFirstChild().getString());
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
n=child.getNext();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,"");
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.removeFirstChild().getFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.removeFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(propString.startsWith("\'")||propString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getLastChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.equals("call")||fieldName.equals("apply")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.equals("call")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.equals("apply")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(propString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||propString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!NodeUtil.isGet(fieldNameNode)){
return null;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=typeNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.NAME){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()==PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=right.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=qName.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=aliasNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode!=null?fieldNameNode.getString():null;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(isVirtualModuleName(fieldName)){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
if(!areValidRegexpFlags(fieldTypeNode.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,fieldTypeNode);
return n;
}
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
if(!areSafeFlagsToFold(fieldTypeNode.getString())){
return n;
}
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
n.removeChild(fieldTypeNode);
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
if(!areValidRegexpFlags(fieldTypeNode.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,fieldTypeNode);
return n;
}
if(!areSafeFlagsToFold(fieldTypeNode.getString())){
return n;
}
n.removeChild(fieldTypeNode);

fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(maybeStringVal.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getLastChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(code.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.DEC){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=functionNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.SCRIPT){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(root.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=child.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=nameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=stringNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(lastGeneration){
return n;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkArgument(n.isCall());
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkArgument(fieldTypeNode.isString());
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isName()){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getString();
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=node.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=child.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=key.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(prefix.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&arg1.isNumber()&&arg1.getNext()==null){
PROPERTY_CHECKING_UNION_SIZE=(int)arg1.getDouble();
}else {
return n;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldTypeNode.getString().length()<=index){
return n;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkArgument(fieldTypeNode.isString());
String fieldName=stringNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldName.length()!=0);
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||name.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isName()){
return ;
}
String fieldName=n.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=nameGenerator.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.setString(fieldName);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hasType+=fieldName.length();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!nonNullableTypeNames.contains(n.getLastChild().getString())){
if(NodeUtil.isVarOrSimpleAssignLhs(n,fieldTypeNode)){
validProperties.add(propName);
}else {
return false;
}
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild()==null||!function.isGetProp()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.string(sourceName.substring(PROPERTY_CHECKING_UNION_SIZE,start+PROPERTY_CHECKING_UNION_SIZE)));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.string(sourceName.substring(PROPERTY_CHECKING_UNION_SIZE,index+1)));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=hasType;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
info.initialValueParent.replaceChild(info.initialValue,fieldTypeNode.cloneTree());
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=info.initialValue){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=cArg.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isNew()){
throw new IllegalStateException("Expected NEW node, got "+Token.name(callNode.getType()));
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isNoSideEffectsCall()){
return false;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildCount()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(subtree.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(thenOp.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(!fieldTypeNode.isGetProp()){
return false;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=ownerNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.getQualifiedName()!=null&&fieldNameNode.getQualifiedName()!=null);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fnNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=useSite.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fnName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
checkNoTypeCheckSection(fieldTypeNode,true);
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isName()){
return ;
}
String fieldName=nameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=aNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=callTarget.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(s.startsWith("\'")||s.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(s.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||s.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==fieldNameNode){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(fieldNameNode.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
isPropAssign=true;
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
type=getValueType(fieldNameNode.getNext());
isPropAssign=true;

fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(name.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(name.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkState(fieldTypeNode.isName());
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=tweakIdNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==fieldNameNode){
type=getValueType(fieldNameNode.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==n){
type=getValueType(fieldNameNode.getNext());
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.functionCallHasSideEffects(n)){
return true;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=objectNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==builder){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(parentName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=!fieldTypeNode.isNumber()&&TokenStream.isJSIdentifier(key.getString())?fieldNameNode.getString():null;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getType()!=PROPERTY_CHECKING_UNION_SIZE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(node.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.isCall()?fieldNameNode.getString():null;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=lhs.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldTypeNode.getLastChild().getString().equals("prototype")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(propName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=globalUse.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=false;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isCall()){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=dest.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=parent.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
type=Name.Type.OTHER;
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!current.renameMap.containsKey(fieldNameNode.getFirstChild().getString()));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.renameMap.put(fieldNameNode.getFirstChild().getString(),new LabelInfo(current.renameMap.size()+1));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
Preconditions.checkNotNull(n);
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||str.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null){
return n;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()!=n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()=='\n'){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(super.describeFunctionBind(fieldTypeNode,lastGeneration)!=null){
return result;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isCall()){
return null;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=param.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(cur.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkState(fieldTypeNode.isName());
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.isJavaIdentifierStart("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getFirstChild().getNext().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=callArg.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=argumentNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext().getQualifiedName()==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getChildCount()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=rootNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(scope.getVar(fieldNameNode.getString())!=null&&v.isGlobal())||(scope.getVar(fieldNameNode.getString())==null&&nonNullableTypeNames.contains(fieldNameNode.getString()))){
return null;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=currentNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
fieldTypeNode=currentNode.getFirstChild();
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(PROPERTY_CHECKING_UNION_SIZE==Token.GETTER_DEF){
Preconditions.checkState(!fieldTypeNode.getChildAtIndex(1).hasChildren());
add("get ");
}else {
Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
add("set ");
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Context.IN_FOR_INIT_CLAUSE){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isCall());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isQualifiedName()){
return null;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(PROPERTY_CHECKING_UNION_SIZE!=3){
throw new SourceMapParseException("Unknown version: "+version);
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(sourceName.isEmpty()){
throw new SourceMapParseException("File entry is missing or empty");
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(isCandidateUsage(fieldTypeNode)){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkState(fieldTypeNode.isName());
String fieldName=n.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&arg1.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg1.getDouble();
}else {
return n;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldTypeNode.isGetProp()?fieldNameNode.getString():"(missing)";
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(":");
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addExpr(fieldTypeNode.getFirstChild(),1,Context.OTHER);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=googNow.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=getProp.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkArgument(fieldTypeNode.isCall());
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldNameNode.isGetProp()){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getQualifiedName()==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
context=new GenerateNodeContext(fieldTypeNode,n,fieldNameNode);
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName.equals(fieldTypeNode.getString())){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(fieldTypeNode.getFirstChild().getQualifiedName())==null){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isCall()){
return ;
}
String fieldName=fieldTypeNode.getFirstChild().getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!fieldTypeNode.isCall()){
return ;
}
String fieldName=fieldTypeNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkArgument(fieldNameNode.isCall());
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&arg1.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg1.getDouble();
}else {
return fieldNameNode;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==TagType.ArrayExpr){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isBlock()&&fieldNameNode!=null&&parent.isTry()&&NodeUtil.getCatchBlock(parent)==node&&!NodeUtil.hasCatchHandler(node)){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=propNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.getNext().isString()){
return ;
}
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parent.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getIntProp(Node.INCRDECR_PROP)==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
Preconditions.checkState(fieldTypeNode.isName());
String fieldName=node.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.IF,fieldTypeNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(fieldTypeNode,2);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldTypeNode,3);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(fieldTypeNode.getFirstChild());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(fieldTypeNode.getChildAtIndex(1));
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
scope=traverseChildren(fieldTypeNode,scope);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isTry());
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=arg.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(!n.isFunction()){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
if(PROPERTY_CHECKING_UNION_SIZE<0){
return ;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=n.getChildAtIndex(1).getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
key=fieldTypeNode.getString();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
replacementString=getReplacement(sourceName);
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
key=fieldTypeNode.getString();
replacementString=getReplacement(sourceName);

hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=calledFn.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
case Token.NEW :

String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
case Token.GETPROP :

String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=prop.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=result.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getType()==n){
type=Name.Type.OTHER;
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NUMBER :

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1638
com.google.javascript.rhino.jstype.JSTypeRegistry,1643
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldNameNode=fieldTypeNode.getFirstChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||value.startsWith("\"")){
fieldName=value.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||value.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=value.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.appendPlaceholderReference(sourceName);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(requiredFilename.startsWith("\'")||requiredFilename.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("."+File.separator)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".."+File.separator)){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(requiredFilename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||requiredFilename.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(js.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE==0){
return fieldName;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
PROPERTY_CHECKING_UNION_SIZE=PROPERTY_CHECKING_UNION_SIZE+1;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
try{
PROPERTY_CHECKING_UNION_SIZE=Integer.parseInt(fieldName.indexOf(',')>=0?fieldName.substring(0,comma):counts);
PROPERTY_CHECKING_UNION_SIZE=comma>=0?comma+1!=counts.length()?Integer.parseInt(counts.substring(comma+1)):Integer.MAX_VALUE:min;
}catch (NumberFormatException ex) {
  min=max=-1;
}

if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||input.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stringVal.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")&&fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.substring(0,2).equalsIgnoreCase("0x")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stringVal.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||stringVal.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=stringVal.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
radix=16;
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||contents.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pathPrefix.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(separator.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||stringValue.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceString.startsWith("\'")||sourceString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||sourceString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||line.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.startsWith("\'")||name.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals(sourceName)||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals(sourceName)||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(sourceName+".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||name.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
PROPERTY_CHECKING_UNION_SIZE+=fieldName.length();
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(filename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=filename.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(filename.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=filename.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
break;
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
break;
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||namedGroups.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stringAsString.startsWith("\'")||stringAsString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stringAsString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||stringAsString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,IR.string(sourceName));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith(".")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=sourceName.length();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||wrapper.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeStringVal.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.substring(0,fieldName.lastIndexOf('.')).endsWith(".prototype")){
return null;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stringValue.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
Preconditions.checkArgument(fieldName.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(code.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hasType=true;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=resolveInternal(reporter,scope);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setResolvedTypeInternal(resolveResult);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prefix.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,IR.string(sourceName));
if(stringAsString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(stringAsString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,IR.string(sourceName));
reportCodeChange();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,IR.string(sourceName));
reportCodeChange();
if(stringAsString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&n.isNumber()&&arg1.getNext()==null){
PROPERTY_CHECKING_UNION_SIZE=(int)arg1.getDouble();
}else {
return n;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,IR.string(fieldName.substring(PROPERTY_CHECKING_UNION_SIZE,index+1)));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||areNodesEqualForInlining(n,n.getLastChild())){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(n.getFirstChild()!=fieldTypeNode){
return false;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n.getLastChild()==null)||!functionNode.isFunction()){
return false;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.indexOf("\'")||fieldName.startsWith("\"")){
fieldName=name.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(s.startsWith("\'")||s.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(s.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||s.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parentName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeCutLine();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=fieldName.substring(0,fieldName.indexOf(".prototype."));
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=2;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('.',i+11);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propString.startsWith("\'")||propString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("call")||fieldName.equals("apply")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("call")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.equals("apply")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propString.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||propString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
if(sourceName.isEmpty()){
continue;
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(depList.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propName.startsWith("\'")||propName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("apply")||fieldName.equals("call")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("apply")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.equals("call")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||propName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||str.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
sourceName=fieldTypeNode.getLastChild().getString();
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
right=n.getFirstChild();
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
right=n.getLastChild();
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isUpperCase("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isJavaIdentifierStart("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(templateTypeName.indexOf('i')>=0){
String CaseCanonicalize.caseCanonicalize(sourceName)=CaseCanonicalize.caseCanonicalize(sourceName);
if(text!=canonicalized){
return new Text(canonicalized);
}
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||sourceExcerpt.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.isEmpty()){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||sourceName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isBlock()){
return false;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
Preconditions.checkState(templateTypeName!=null&&name.length()>0);
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=nameGenerator.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.getFirstChild().setString(fieldName);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Character.isJavaIdentifierStart(fieldName.charAt(0)))return false;
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propString.startsWith("\'")||fieldName.equals("apply")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("call")||propString.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
Preconditions.checkState(n.isName()||n.isString());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),n);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSType()!=null){
n.setJSType(type);
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n);
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(!isDirectCallNodeReplacementPossible(fieldTypeNode)){
return CanInlineResult.NO;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getLastChild().getString().equals("prototype")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.startsWith("\'")||value.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNew()){
return ;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeSystem.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
makeLocalNamesUnique(fieldTypeNode.cloneTree(),lastGeneration);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
rewriteFunctionDeclarations(fieldTypeNode.cloneTree().getLastChild());
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSource().getSourceRegion(sourceName,message.lineNumber)!=null){
templateTypeName=sourceRegion.getSourceExcerpt();
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(scope.isGlobal()){
return ;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(n)){
return ;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(!n.isFunction()){
return ;
}
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getLastChild());
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getLine(PROPERTY_CHECKING_UNION_SIZE);
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getSourceFileByName(sourceName)!=null){
return input.getRegion(PROPERTY_CHECKING_UNION_SIZE);
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propName.startsWith("\'")||fieldName.equals("call")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.equals("apply")||propName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
if(fieldName.startsWith("\'")||contents.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
Preconditions.checkState(parts.length==1||parts.length==2);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n==0){
return this;
}
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
serialVersionUID=Math.max(System.currentTimeMillis()-serialVersionUID,worstRunTime);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.JSTypeRegistry,1645
com.google.javascript.rhino.jstype.JSTypeRegistry,1647
com.google.javascript.rhino.jstype.JSTypeRegistry,1655
com.google.javascript.rhino.jstype.JSTypeRegistry,1622
Find no block!
com.google.javascript.rhino.jstype.JSTypeRegistry,1664
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.ELLIPSIS){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=current.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getFirstChild().getNext().getFirstChild()==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.isExprAssign(fieldNameNode)){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetProp()&&lhs.getFirstChild().isThis()){
Node fieldNameNode.getFirstChild().getLastChild()=fieldNameNode.getFirstChild().getLastChild();
if(rhs.isName()&&rhs.getString().equals(n.getFirstChild().getNext().getFirstChild().getString())){
Node fieldTypeNode.getLastChild()=lhs.getLastChild();
return propertyName;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.setDebugInformation(fieldNameNode.getFirstChild(),n.getFirstChild(),fieldName+".prototype");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n.getFirstChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=left.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setSourceEncodedPosition(n.getSourcePosition()+FOR_QUOTE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.setLength(current.getString().length());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeAddToSymbolTable(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getNext().getType()==Token.GETPROP){
Node fieldNameNode.getNext().getFirstChild()=fieldNameNode.getNext().getFirstChild();
secondArgument.removeChild(newChild);
fieldTypeNode.replaceChild(fieldNameNode,newChild);
n.replaceChild(secondArgument,IR.string(secondArgument.getFirstChild().getString()));
}else if(secondArgumentType==Token.GETELEM){
Node fieldNameNode.getNext().getFirstChild()=secondArgument.getFirstChild();
secondArgument.removeChild(newFirstArgument);
Node fieldNameNode.getNext().getLastChild()=secondArgument.getLastChild();
secondArgument.removeChild(newSecondArgument);
n.replaceChild(firstArgument,newFirstArgument);
n.replaceChild(secondArgument,newSecondArgument);
}else {
n.replaceChild(secondArgument,IR.string(secondArgument.getString()));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
value=n.getFirstChild().getFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isName()){
if(NodeUtil.isFunctionObjectCall(callNode)){
if(fieldNameNode==null||!cArg.isThis()){
return CanInlineResult.NO;
}
cArg=cArg.getNext();
}else {
Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
key=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(fieldTypeNode);
key=fieldTypeNode.getNext();
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild().getNext().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=fieldNameNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.CALL_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.THIS_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.declareSlot(ConcreteFunctionType.RETURN_SLOT_NAME,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.initForScopeRoot(n.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objectLiteral.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
next=fieldTypeNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null){
if(right.getNext()!=null||!NodeUtil.isImmutableValue(right)){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isArrayLit()||!fieldNameNode.getNext().getString().equals("join")){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getNext()!=null&&right.isString()&&",".equals(right.getString())){
n.removeChild(right);
reportCodeChange();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=arg.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isNumber()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(n.getDouble()>=0)||Double.isInfinite(dindex)){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getDouble()!=(int)n.getDouble()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE-1+4<(int)n.getDouble()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.SWITCH,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateExpression(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE>1){
violation("Expected at most 1 \'default\' in switch but was "+defaults,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isAssignmentOp(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()){
return new Assign(fieldNameNode,current,hasType);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=args.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&value.isName()&&value.getString().equals(fieldTypeNode.getString())){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=fieldTypeNode;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(NodeUtil.isGet(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state.extractBeforeStatement=extractExpression(fieldNameNode.getFirstChild(),state.extractBeforeStatement);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.isBlock()||addingRoot.isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getFirstChild()==null||!addingRoot.getFirstChild().isScript());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isString()&&!"".equals(pattern.getString())&&(null==null!=fieldTypeNode?pattern.getNext():null||flags.isString())&&(isEcmaScript5OrGreater()||!containsUnicodeEscape(pattern.getString()))){
pattern=makeForwardSlashBracketSafe(pattern);
Node fieldNameNode;
if(null==flags||"".equals(flags.getString())){
regexLiteral=IR.regexp(pattern);
}else {
if(!areValidRegexpFlags(flags.getString())){
error(INVALID_REGULAR_EXPRESSION_FLAGS,flags);
return n;
}
if(!areSafeFlagsToFold(flags.getString())){
return n;
}
n.removeChild(flags);
regexLiteral=IR.regexp(pattern,flags);
}
n.getParent().replaceChild(n,regexLiteral);
reportCodeChange();
return regexLiteral;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=block.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null&&NodeUtil.isFunctionDeclaration(fieldTypeNode);fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(fieldNameNode,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.getType()==Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getFirstChild();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getQualifiedName()!=null){
if(name.equals("Function.prototype.bind.call")){
Node fieldTypeNode.getNext()=fieldTypeNode.getNext();
if(fn==null){
return null;
}
Node fieldTypeNode.getNext()=safeNext(fn);
Node fieldNameNode=safeNext(thisValue);
return new Bind(fn,thisValue,parameters);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetProp()&&callTarget.getLastChild().getString().equals("bind")){
Node fieldTypeNode.getFirstChild()=callTarget.getFirstChild();
JSType fieldTypeNode.getFirstChild().getJSType()=maybeFn.getJSType();
FunctionType hasType=null;
if(lastGeneration&&maybeFnType!=null){
fnType=maybeFnType.restrictByNotNullOrUndefined().toMaybeFunctionType();
}
if(fnType!=null||maybeFn.isFunction()){
Node fieldTypeNode.getNext()=callTarget.getNext();
Node fieldNameNode=safeNext(thisValue);
return new Bind(maybeFn,thisValue,parameters);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLitNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=varNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getFirstChild().getNext().isNumber()){
fieldName=NodeUtil.getStringValue(property);
}else {
propertyName=property.getString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isGetElem()){
fieldNameNode.setQuotedString();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(fieldTypeNode.getNext().detachFromParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new SourcePosition<AliasTransformation>(){
}
.setPositionInformation(n.getLineno(),n.getCharno(),fieldNameNode==null?Integer.MAX_VALUE:next.getLineno(),fieldNameNode==null?Integer.MAX_VALUE:next.getCharno());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent().getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.isName()){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=collapse.endNode;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
collapse.parent.removeChildAfter(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(collapse.startNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n=collapse.startNode.getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.getNext()==fieldTypeNode);
collapse.parent.removeChildAfter(fieldNameNode);
if(collapse.startNode.isVar()){
while(fieldTypeNode.hasChildren()){
fieldNameNode.addChildToBack(fieldTypeNode.removeFirstChild());
}
}else {
Node n=fieldTypeNode.getFirstChild();
Node n.getFirstChild()=n.getFirstChild();
Preconditions.checkState(n.getFirstChild().isName());
Node n.getLastChild()=n.getLastChild();
n.getFirstChild().addChildToBack(n.getLastChild().detachFromParent());
fieldNameNode.addChildToBack(n.getFirstChild().detachFromParent());
redeclaration=true;
}
n=collapse.startNode.getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=subtree.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
getParameterSlot(PROPERTY_CHECKING_UNION_SIZE).getType();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()!=null){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=val.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n.getFirstChild().getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
nonNullableTypeNames.add(fieldTypeNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
connectToPossibleExceptionHandler(fieldNameNode.getNext(),iter);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isObjectLitKey(n,n.getParent())||hasType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(trueNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldNameNode.hasOneChild());
tryMinimizeExits(fieldTypeNode.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(n.getLastChild(),PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isName());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(reporter.get(sourceName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isNew()){
Node fieldNameNode=parent.getFirstChild();
if(target.isName()&&target.getString().equals(ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)){
reporter.get(sourceName).setInline(false);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isAssign()&&parent.getFirstChild()==n){
reporter.get(sourceName).setInline(false);
}else {
fs.setRemove(false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isConsistentIdGenerator()&&!doc.isIdGenerator()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isAssign()){
fieldName=n.getFirstChild().getQualifiedName();
}else if(n.isVar()){
name=n.getFirstChild().getString();
}else if(n.isFunction()){
name=n.getFirstChild().getString();
if(name.isEmpty()){
return ;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(fieldName)==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null&&NodeUtil.isObjectLitKey(fieldNameNode,parent)){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldTypeNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.hasOneChild()){
Node fieldNameNode=n.removeFirstChild();
Node n.getParent()=n.getParent();
Node IR.exprResult(fieldNameNode).srcref(n)=IR.exprResult(condition).srcref(n);
parent.replaceChild(n,replacement);
reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isSwitch());
for(Node fieldTypeNode=n.getFirstChild().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.BODY,fieldNameNode.getString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JsonML(TagType.RegExpExpr).setAttribute(TagAttr.FLAGS,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
processNode(fieldTypeNode,new JsonML(TagType.TryStmt));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode=child.getNext();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
processNode(child,new JsonML(TagType.TryStmt));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isName()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverse(n.getFirstChild(),scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setJSType(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(scope.getRootNode().getFirstChild().getNext().isParamList());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("  ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(Strings.repeat(" ",PROPERTY_CHECKING_UNION_SIZE-Integer.toString(PROPERTY_CHECKING_UNION_SIZE).length()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(PROPERTY_CHECKING_UNION_SIZE);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("| ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0){
builder.append(fieldName);
PROPERTY_CHECKING_UNION_SIZE=-1;
}else {
builder.append(line);
builder.append('\n');
start=end+1;
end=templateTypeName.indexOf('\n',start);
PROPERTY_CHECKING_UNION_SIZE++;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=traverseChildren(n,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.var(fieldNameNode).copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replacementNode=IR.var(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldNameNode);
fieldTypeNode.removeChild(fieldTypeNode.getFirstChild().getNext());
fieldNameNode.addChildToFront(fieldTypeNode.getFirstChild().getNext());
IR.var(fieldNameNode).copyInformationFrom(n);
n.getParent().replaceChild(candidateDefinition,IR.var(fieldNameNode));
fieldNameNode.setJSDocInfo(fieldTypeNode.getJSDocInfo());
reporter.reportCodeChange();
replacementNode=IR.var(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isNew()||n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=assignNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldNameNode.getType()){
case Token.ASSIGN :
break;

case Token.GETPROP :
break;

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.endsWith(".call")||propQName.endsWith(".apply")){
builder.defineNameIfNotExists(fieldTypeNode.getFirstChild().getQualifiedName(),lastGeneration).markExposedToCallOrApply();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!"goog.exportSymbol".equals(fieldName)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldNameNode.isString()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null||fieldNameNode.getNext().getNext()!=null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.defineNameIfNotExists(sourceName,false).markExported();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isHook(),"Expected: HOOK, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=map.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.TRY,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMinimumChildCount(n,2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(n,3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateBlock(n.getFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateNodeType(Token.BLOCK,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateMaximumChildCount(fieldNameNode,1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()==3){
validateBlock(n.getLastChild());
hasType=true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
violation("Missing catch or finally for try statement.",n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=wrapNode(Token.BANG,typeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=typeArray.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=paramsParent.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(templateTypeName==null){
src=MISSING_SOURCE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.getQualifiedName()==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldTypeNode.isString()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=fieldType.autoboxesTo()!=null?boxedType:instanceType;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldType.toObjectType()!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=node.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
scanVars(fieldNameNode,n);
child=n.getFirstChild().getNext();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
child=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==3);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
pushScope(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
traverseBranch(n.getFirstChild(),n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(fieldNameNode,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getNext()==null&&body.isBlock(),body);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
traverseBranch(n,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
popScope();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getFirstChild().getNext().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
n.getFirstChild().getNext().getNext().addChildToFront(IR.exprResult(fieldNameNode));
reporter.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild().getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.reportCodeChange();
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
end=n.getString().length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(arg2.isNumber()){
PROPERTY_CHECKING_UNION_SIZE=(int)arg2.getDouble();
}else {
return n;
}
if(arg2.getNext()!=null){
return n;
}
}else {
length=n.getString().length()-PROPERTY_CHECKING_UNION_SIZE;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseMessageTextNode(builder,n.getNext());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
if(!objLitNode.isObjectLit()){
throw new MalformedException("OBJLIT node expected",objLitNode);
}
for(Node fieldTypeNode=objLitNode.getFirstChild();aNode!=null;aNode=aNode.getNext()){
if(!aNode.isStringKey()){
throw new MalformedException("STRING_KEY node expected as OBJLIT key",aNode);
}
String sourceName=aNode.getString();
if(!isLowerCamelCaseWithNumericSuffixes(phName)){
throw new MalformedException("Placeholder name not in lowerCamelCase: "+phName,aNode);
}
if(Sets.newHashSet().contains(phName)){
throw new MalformedException("Duplicate placeholder name: "+phName,aNode);
}
phNames.add(phName);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=tryMinimizeCondition(left);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE==0){
return fieldName;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)!=null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n.getFirstChild()){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(getArrayElementStringValue(fieldNameNode)==null){
return null;
}
new StringBuilder().append(getArrayElementStringValue(fieldNameNode));
PROPERTY_CHECKING_UNION_SIZE++;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getQualifiedName()!=null&&fieldName!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.string(fieldName.substring(PROPERTY_CHECKING_UNION_SIZE,index+1)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
continue;
}
if(new ExtractionInstance(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode),n).isFavorable()){
totalDelta+=instance.delta;
}

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
symbol=fieldType==null?null:getSymbolForTypeHelper(fieldType,true);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
c=trySimplifyUnusedResult(fieldNameNode);
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
next=fieldNameNode.getNext();
c=trySimplifyUnusedResult(fieldNameNode);

if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.length()==fieldName.length()){
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input);
}else {
return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,input.substring(0,suffixStart))+input.substring(suffixStart);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope=tightenTypesAfterAssertions(scope,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.isVarDeclaration(n)&&n.hasChildren()){
return new VarDefinition(n,lastGeneration);
}else if(fieldTypeNode.isFunction()&&parent.getFirstChild()==n){
if(!NodeUtil.isFunctionExpression(parent)){
return new NamedFunctionDefinition(parent,isExtern);
}else if(!n.getString().equals("")){
return new FunctionExpressionDefinition(parent,isExtern);
}
}else if(parent.isAssign()&&parent.getFirstChild()==n){
return new AssignmentDefinition(parent,isExtern);
}else if(NodeUtil.isObjectLitKey(n,parent)){
return new ObjectLiteralPropertyDefinition(parent,n,n.getFirstChild(),isExtern);
}else if(parent.isParamList()){
Node fieldNameNode=parent.getParent();
return new FunctionArgumentDefinition(function,n,isExtern);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
PROPERTY_CHECKING_UNION_SIZE++;
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=parameters.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=safeResolve(returnType,reporter,scope);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getChildCount()*2-STRING_SPLIT_OVERHEAD<=0){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName!=null){
String sourceName=Joiner.on(delimiter).join(new String[n.getChildCount()]);
Node IR.call(IR.getprop(IR.string(sourceName),IR.string("split")),IR.string(""+fieldName))=IR.call(IR.getprop(IR.string(template),IR.string("split")),IR.string(""+delimiter));
call.copyInformationFromForTree(n);
n.getParent().replaceChild(n,call);
reportCodeChange();
return call;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=exportedObjectLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=objLit.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument((fieldTypeNode.isAnd())||(node.isOr()),"Expected: AND or OR, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(fieldNameNode.getJSType()==null||fieldNameNode.getJSType().isUnknownType()){
return true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.nodeTypeMayHaveSideEffects(fieldNameNode)&&fieldNameNode.getType()!=Token.NAME||type==Token.NAME&&fieldTypeNode.isCatch()){
n=null;
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return createFromTypeNodesInternal(n,sourceName,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isCall());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isName()&&"eval".equals(first.getString())){
first.putBooleanProp(Node.DIRECT_EVAL,true);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
createName(fieldNameNode.getString());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(fieldType,"NameInformation is null");
createName(fieldNameNode.getString());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isHook());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.detachChildren();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
state=isVariableReadBeforeKill(fieldNameNode,sourceName);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getParent().getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.copyNameAnnotations(n.getLastChild(),fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
fieldNameNode.setJSType(type);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.replaceChild(n,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
n.removeChild(fieldTypeNode);
fieldTypeNode.getFirstChild().detachFromParent();
}else {
fieldNameNode=IR.name(appendPropForAlias(templateTypeName,fieldName));
if(key.getBooleanProp(Node.IS_CONSTANT_NAME)){
refNode.putBooleanProp(Node.IS_CONSTANT_NAME,true);
}
key.replaceChild(value,refNode);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.isSyntheticBlock()||n.getParent()==null){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.tryMergeBlock(n)){
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
c=n.getFirstChild().getNext();
Node fieldNameNode=fieldNameNode.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getParent().isFunction());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.VAR);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(n,Branch.ON_TRUE,computeFallThrough(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(n,NodeUtil.getConditionExpression(node));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isEmpty()){
elem=NodeUtil.newUndefinedNode(elem);
}else {
n.removeChild(elem);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setString("");
n.getParent().replaceChild(n,IR.var(IR.name(fieldNameNode.getString()).srcref(fnNameNode)).srcref(n));
IR.name(fieldNameNode.getString()).srcref(fnNameNode).addChildToFront(n);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldTypeNode.getType()){
case Token.STRING_KEY :
item=new JsonML(TagType.DataProp);
name=fieldTypeNode.getString();
break;

case Token.GETTER_DEF :
item=new JsonML(TagType.GetterProp);
name=fieldTypeNode.getString();
break;

case Token.SETTER_DEF :
item=new JsonML(TagType.SetterProp);
name=fieldTypeNode.getString();
break;

default :
throw new IllegalArgumentException("Illegal type of node.");

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(symbol.scope.getQualifiedSlot(templateTypeName.substring(0,templateTypeName.indexOf('.')))==null){
continue;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldType.isEmpty()){
increment=trySimplifyUnusedResult(increment,false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!n.getFirstChild().isEmpty()){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.getImpureBooleanValue(fieldNameNode)!=TernaryValue.FALSE){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!mayHaveSideEffects(fieldNameNode)){
NodeUtil.removeChild(n.getParent(),n);
}else {
Node IR.exprResult(fieldNameNode.detachFromParent()).copyInformationFrom(cond)=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
n.getParent().replaceChild(n,statement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
createEdge(n,Branch.UNCOND,computeFallThrough(child));
}else {
createEdge(node,Branch.UNCOND,computeFollowNode(node,this));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode!=null){
swtich (parent.getType()){
case Token.DEFAULT_CASE :

case Token.CASE :

case Token.TRY :
break;

default :
if(n.isBlock()&&node.isSyntheticBlock()){
createEdge(node,Branch.SYN_BLOCK,computeFollowNode(node,this));
}
break;

}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.replaceChild(n,IR.number(fieldName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall());
Preconditions.checkArgument(n.isString());
if(PROPERTY_CHECKING_UNION_SIZE<0||fieldName.length()<=index){
return n;
}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.setString(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
fieldTypeNode.removeChild(fieldTypeNode.getLastChild());
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
replaceNode(fieldTypeNode.getParent(),parentNode,fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.putBooleanProp(Node.FREE_CALL,true);
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=start.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldTypeNode,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFrom(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildBefore(fieldNameNode,n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange("WHILE node");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setType(Token.FOR);
fieldNameNode.copyInformationFrom(n);
n.addChildBefore(fieldNameNode,n.getFirstChild());
n.addChildAfter(fieldNameNode.cloneNode(),n.getFirstChild());
reportCodeChange("WHILE node");

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldNameNode.getParent();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.getNext();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldNameNode,n.getParent().getParent());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceWithEmpty(fieldNameNode,n.getParent().getParent());
builder.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.replaceChild(n,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getNext());
fieldNameNode.replaceChild(n,n.getNext());
builder.reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(typeofNode,IR.string(null));
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.getChildCount()==2);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==n){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.IF :
fieldTypeNode=n.getFirstChild().getNext();
break;

case Token.WHILE :

case Token.FOR :
child=NodeUtil.getLoopCodeBlock(n);
break;

default :
return ;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldNameNode.isString());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
if(secondArg.getNext()!=null||!secondArg.isNumber()){
return n;
}else {
fieldType=(int)secondArg.getDouble();
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,IR.number(templateTypeName.equals("indexOf")?fieldName.indexOf(sourceName,fieldType):lstring.lastIndexOf(searchValue,fromIndex)));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(n,Token.FUNCTION);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode,Token.NAME);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode.getNext(),Token.PARAM_LIST);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNode(fieldNameNode.getNext().getNext(),Token.BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EMPTY :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
declareArguments(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf(PROTOTYPE_SUBSTRING)!=-1){
nameInfo.isPrototype=true;
nameInfo.prototypeClass=fieldName.substring(0,idx);
nameInfo.prototypeProperty=name.substring(idx+PROTOTYPE_SUBSTRING_LEN);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.name=name;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameInfo.isExternallyReferenceable=(scope.getVar(sourceName)==null&&nonNullableTypeNames.contains(sourceName))||isExternallyReferenceable(scope,fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null&&(n.isThrow()||fieldNameNode!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(n)==null||areMatchingExits(n,follow)){
n.detachFromParent();
reportCodeChange();
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedNamedTypes.putAll(scope,unresolvedNamedTypes.removeAll(scope));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope!=null&&scope.getParentScope()==null){
PrototypeObjectType (PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS)=(PrototypeObjectType)getNativeType(JSTypeNative.GLOBAL_THIS);
JSType fieldType=getType("Window");
if(globalThis.isUnknownType()){
ObjectType ObjectType.cast(fieldType)=ObjectType.cast(windowType);
if(windowObjType!=null){
globalThis.setImplicitPrototype(windowObjType);
}else {
globalThis.setImplicitPrototype(getNativeObjectType(JSTypeNative.OBJECT_TYPE));
}
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=hasType;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
n.addChildToBack(fieldNameNode);
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=true;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
insertExprResultState=hasType;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildToBack(fieldNameNode);
insertExprResultState=true;
insertExprResultState=hasType;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldName!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType<0){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=p.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=n;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
updateAssignAllowedStack(fieldTypeNode,false);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
Node fieldNameNode=n.getFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertDefinitionNode(n,Token.FUNCTION);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDeferredType(n,createFunctionTypeFromNodes(n,sourceName,NodeUtil.getBestJSDocInfo(n),fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=fieldName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldName.startsWith(LINEMAP_HEADER),"Expected %s",LINEMAP_HEADER);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.annotations"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nonNullableTypeNames=extractList(ResourceBundle.getBundle(sourceName).getString("jsdoc.suppressions"));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==n){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastWasEmpty=fieldNameNode.isEmpty();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
addExpr(fieldNameNode,1,Context.OTHER);
lastWasEmpty=fieldNameNode.isEmpty();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=sourceName.length();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=thisTypeNode.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isCall(),"Expected: CALL, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!NodeUtil.functionCallHasSideEffects(n)){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType){
PROPERTY_CHECKING_UNION_SIZE+=declareVarsForObjLitValues(n,sourceName,ref.node.getFirstChild(),fieldTypeNode,fieldNameNode.getChildBefore(varNode),gramps);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE+=addStubsForUndeclaredProperties(n,sourceName,fieldNameNode,fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasType&&n.canEliminate()){
fieldTypeNode.removeChild(ref.node);
if(!varNode.hasChildren()){
fieldNameNode.removeChild(varNode);
}
PROPERTY_CHECKING_UNION_SIZE++;
ref.node=null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)!=ControlFlowAnalysis.computeFollowNode(fieldTypeNode)){
if(!isPure(n.getFirstChild())){
return n;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null&&(n.isThrow()||n.getFirstChild()!=null)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(ControlFlowAnalysis.computeFollowNode(fieldTypeNode)==null||areMatchingExits(n,follow)){
Node fieldNameNode=IR.breakNode();
n.getParent().replaceChild(n,replacement);
this.reportCodeChange();
return replacement;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.setLength(sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setItem(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
new JSDocInfo.TrimmedStringPosition().setItem(sourceName);
new JSDocInfo.TrimmedStringPosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());
n.setLength(sourceName.length());
new JSDocInfo.NamePosition().setItem(n);
new JSDocInfo.NamePosition().setPositionInformation(PROPERTY_CHECKING_UNION_SIZE,PROPERTY_CHECKING_UNION_SIZE,lineno,charno+sourceName.length());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkNoTypeCheckSection(n,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(fieldTypeNode.isGetProp());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
rightType=getNativeType(UNKNOWN_TYPE);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.isEnumElementType()){
allowedValueType=allowedValueType.toMaybeEnumElementType().getPrimitiveType();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
scope.inferSlotType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
break;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
delta+=pattern.perMemberOverhead;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(head.node.getNext().isFunction()){
continue;
}
if(PrototypeMemberDeclaration.extractDeclaration(fieldNameNode)==null){
break;
}
delta+=pattern.perMemberOverhead;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getChildAtIndex(1));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
add(fieldNameNode.getLastChild(),Context.PRESERVE_BLOCK);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
subtree=fieldNameNode;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getString().length()==0){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!okToRenameVar(n.getString(),hasType)){
if(local){
String fieldName=MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);
if(!newName.equals(name)){
n.setString(newName);
}
}
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tryMinimizeExits(fieldNameNode,PROPERTY_CHECKING_UNION_SIZE,sourceName);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isExpressionTreeUnsafe(n,state.sideEffects)){
state.sideEffects=true;
state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.GETPROP :
Node fieldTypeNode=n.getLastChild();
setOriginalName(n,propNode.getString());
break;

case Token.FUNCTION :
String sourceName=NodeUtil.getNearestFunctionName(n);
if(functionName!=null){
setOriginalName(n,functionName);
}
break;

case Token.NAME :
setOriginalName(n,n.getString());
break;

case Token.OBJECTLIT :
for(Node fieldNameNode=n.getFirstChild();key!=null;key=key.getNext()){
if(!key.isQuotedString()){
setOriginalName(key,key.getString());
}
}
break;

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isDo());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hasBreakOrContinue(n)){
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n,n.getFirstChild()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.replaceChild(n,n.removeFirstChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(mayHaveSideEffects(fieldNameNode)){
Node IR.exprResult(fieldNameNode.detachFromParent()).srcref(cond)=IR.exprResult(cond.detachFromParent()).srcref(cond);
n.addChildAfter(condStatement,n.removeFirstChild());
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
token=descriptionInfo.token;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return getNativeType(JSTypeNative.NO_OBJECT_TYPE);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return getNativeType(JSTypeNative.NO_TYPE);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=NodeUtil.newUndefinedNode(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newExpression=fieldTypeNode.removeFirstChild();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkArgument(fieldNameNode.isReturn());
newExpression=fieldTypeNode.removeFirstChild();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
builder.append("<li> Defined: ");
generateSourceReferenceLink(builder,sourceName,n.getLineno(),fnDef.getCharno());

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<LI> ");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("<A NAME=\""+fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append(fieldName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.append("\n");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
generateType(builder,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
annotate(IR.exprResult(fieldNameNode));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isFunction(),"Node must be a function.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldNameNode.isBlock(),"Node must be a block.");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToFront(fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reporter.add(fieldNameNode.getPrototype());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
eliminateParamsAfter(fieldNameNode,n.getNext());
n.detachFromParent();
fieldNameNode.getLastChild().addChildrenToFront(IR.var(n).copyInformationFrom(argNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isInstanceOf());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setType(getType(n));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
n.removeChild(result);
fieldNameNode.replaceChild(n,result);
reportCodeChange();
return result;
}else {
return n;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(new ArrayList<Node>().size()>0){
Node fieldNameNode=joinOnComma(commas,n);
fieldTypeNode.addChildBefore(comma,n);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.removeChild(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reporter.reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.LSH :
fieldType=PROPERTY_CHECKING_UNION_SIZE<<PROPERTY_CHECKING_UNION_SIZE;
break;

case Token.RSH :
result=lvalInt>>rvalInt;
break;

case Token.URSH :
long PROPERTY_CHECKING_UNION_SIZE&0xffffffffL=lvalInt&0xffffffffL;
result=lvalLong>>>rvalInt;
break;

default :
throw new AssertionError("Unknown shift operator: "+Token.name(n.getType()));

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setResolvedTypeInternal(this);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode!=null){
maybeTypeOfThis=maybeTypeOfThis.restrictByNotNullOrUndefined();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
lastID=PROPERTY_CHECKING_UNION_SIZE;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(PROPERTY_CHECKING_UNION_SIZE==Integer.MIN_VALUE){
startID=PROPERTY_CHECKING_UNION_SIZE;
}
lastID=PROPERTY_CHECKING_UNION_SIZE;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(n.isGetElem());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.removeFirstChild().removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeNode.hasOneChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (fieldNameNode.getType()){
case Token.IF :

case Token.RETURN :

case Token.THROW :

case Token.SWITCH :

case Token.EXPR_RESULT :
fuseExpresssonIntoFirstChild(n.removeFirstChild(),last);
return ;

case Token.FOR :
if(NodeUtil.isForIn(last)){
fuseExpresssonIntoSecondChild(commaTree,last);
}
return ;

default :
throw new IllegalStateException("Statement fusion missing.");

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.declareType(sourceName,getNativeType(UNKNOWN_TYPE));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
builder.overwriteDeclaredType(sourceName,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldNameNode.isGetProp()){
defineSlot(candidate,candidate.getParent(),getNativeType(NO_TYPE),false);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastGeneration=true;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode==null||!callbackFunction.isFunction()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=n.cloneTree().getChildAtIndex(1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.setSideEffectFlags(Node.NO_SIDE_EFFECTS);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getFirstChild());
replaceNode(n.getParent(),getPropNode,IR.getelem(n.getFirstChild(),fieldNameNode));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.EXPR_RESULT :

case Token.FUNCTION :

case Token.VAR :
break;

case Token.ASSIGN :
Preconditions.checkArgument(fieldTypeNode.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",Token.name(parent.getType()));
break;

default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs "+Token.name(n.getType()));

}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.isFor()){
if(fieldName.isEmpty()){
replacements.add(IR.empty());
}else {
Node fieldNameNode=collapseReplacements(replacements);
replacements.clear();
replacements.add(expr);
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=firstPreciserScopeKnowingConditionOutcome(n,rightScope,!lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.lastIndexOf('.')==-1){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.substring(0,fieldName.lastIndexOf('.')).endsWith(".prototype")){
return null;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(first,fieldType.getFirstChild().cloneNode());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange("FOR-IN var declaration");
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.getParent().replaceChild(first,fieldType.getFirstChild().cloneNode());
reportCodeChange("FOR-IN var declaration");

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=mergeLineCharNo(PROPERTY_CHECKING_UNION_SIZE,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.detachFromParent();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PROPERTY_CHECKING_UNION_SIZE=-1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=fixupSourceLocation(sourceFile);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n.getLastChild());
Node fieldNameNode=n.getLastChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(ancestors.length>0);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeCutLine();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fp=FP.fingerprint(sourceName)+(serialVersionUID<<1);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CATCH :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeNode==null||Token.FUNCTION==source.getType());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.fieldTypeNode=source;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.templateTypeName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.VAR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()!=null&&info.getSuppressions().contains("duplicate")){
return true;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.getJSDocInfo()==null){
info=fieldNameNode.getJSDocInfo();
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordClassConstructorOrInterface(fieldName,fieldType,null,null,null,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(reporter.defineNameIfNotExists(sourceName,lastGeneration),"%s should be in the name graph as a node.",sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n!=null){
reporter.defineNameIfNotExists(sourceName,lastGeneration).addAssignmentDeclaration(assign);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
swtich (fieldTypeNode.getType()){
case Token.ASSIGN :
return fieldTypeNode.getJSDocInfo();

case Token.VAR :
return ref.node==fieldTypeNode.getFirstChild()?fieldTypeNode.getJSDocInfo():ref.node.getJSDocInfo();

}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
forbidTemps=NodeUtil.has(n.getLastChild(),new Predicate<Node>(){
  @Override public boolean apply(  Node n){
    if (n.isName()) {
      return n.getString().equals("eval");
    }
    if (!assumeMinimumCapture && n.isFunction()) {
      return n != fnNode;
    }
    return false;
  }
}
,NodeUtil.MATCH_NOT_FUNCTION);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeNode.getScope().isGlobal()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reporter.put(fieldTypeNode,n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.add(n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=n.removeFirstChild();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.AND :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
add(fieldNameNode,Context.STATEMENT);
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
reportCodeChange();
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
newNode=IR.number(Double.parseDouble(sourceName));
normalizedNewVal=normalizeNumericString(String.valueOf(Double.parseDouble(sourceName)));

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.copyInformationFromForTree(n);
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isWhile());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.removeChild(n.getParent(),n);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.redeclareVarsInsideBranch(n);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.putBooleanProp(Node.FREE_CALL,false);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(fieldNameNode,IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.addChildAfter(bind.thisValue.cloneTree(),IR.getprop(fieldNameNode.cloneTree(),IR.string("call").srcref(callTarget)));
n.putBooleanProp(Node.FREE_CALL,false);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getJSType(bind.target).restrictByNotNullOrUndefined().toMaybeFunctionType()==null){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.errorAtLine(templateTypeName,sourceName,fieldNameNode,fieldType);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkNotNull(reporter.get(sourceName.substring(0,PROPERTY_CHECKING_UNION_SIZE)));
Preconditions.checkNotNull(parentName.replacementNode);
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addStubsForUndeclaredProperties(n,sourceName,ref.node.getAncestor(2),ref.node.getParent());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.SHEQ :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.getParent().replaceChild(condition,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.POS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType=addMarker(fieldNameNode,nodeToInsertAfter,null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Iterables.addAll(Sets.newTreeSet(ALPHA),fieldNameNode.getAllImplementedInterfaces());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(scope,fieldNameNode.getChildAtIndex(2),new DefineCallbackReturnCallback());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode=src.restrictByNotNullOrUndefined();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
recordReference(sourceName,templateTypeName,fieldType);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.getLastChild().isReturn());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ImmutableMap.builder().putAll(Annotation.recognizedAnnotations);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(n.removeFirstChild()!=null){
fieldNameNode.addChildToBack(returnRhs);
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToFront(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").deleteCharAt(sb.length()-1);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder("(?:^|;)\\s*(").append(")\\s*\\((.*?)\\)");
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isName()||n.isGetProp());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceName==null){
return false;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(n.isNew(),"Expected: NEW, Got: %s",Token.name(node.getType()));
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.ASSIGN_BITOR :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.BITNOT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=getSourceId(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.originalName=templateTypeName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeTraversal.traverse(scope,fieldNameNode,new AbstractCfgNodeTraversalCallback(){
  @Override public void visit(  NodeTraversal t,  Node n,  Node parent){
    if (n.isName()) {
      if (parent == null) {
        return;
      }
      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isVar() || parent.isInc()|| parent.isDec()|| parent.isParamList()|| parent.isCatch()) {
        return;
      }
      String name=n.getString();
      if (compiler.getCodingConvention().isExported(name)) {
        return;
      }
      Node defNode=reachingDef.getDef(name,cfgNode);
      if (defNode != null && !reachingDef.dependsOnOuterScopeVars(name,cfgNode)) {
        candidates.add(new Candidate(name,defNode,n,cfgNode));
      }
    }
  }
}
);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(PROPERTY_CHECKING_UNION_SIZE==1||n.getType()==Token.BLOCK||parentType==Token.SCRIPT||parentType==Token.LABEL);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mapping.sourceFile=sourceName;
mapping.originalName=sourceName;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((n!=null)&&maybeInitMetaDataFromHelpVar(builder,parentOfVarNode.getChildBefore(fieldNameNode))){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeInitMetaDataFromHelpVar(builder,fieldNameNode.getNext());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if((sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='0'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='9')||(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)>='A'&&sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)<='Z')){
new StringBuilder().append(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE));
}else {
new StringBuilder().append('$');
new StringBuilder().append(Integer.toHexString(sourceName.charAt(PROPERTY_CHECKING_UNION_SIZE)));
protectHex=true;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(sourceName);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NEW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldTypeNode.setType(Token.ASSIGN);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
tempNameValue=n.cloneTree();
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(n.isName()||NodeUtil.isGet(expr));
fieldTypeNode.setType(Token.ASSIGN);
tempNameValue=n.cloneTree();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeNode.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP,true);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldNameNode.addChildToBack(fieldTypeNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!hasType){
String getExternalMessageId(templateTypeName)=getExternalMessageId(templateTypeName);
if(externalId!=null){
lastGeneration=true;
fieldType=externalId;
}
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=lp.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=templateTypeName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(templateTypeName==null){
return ;
}
replaced[i]=templateTypeName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.INC :

case Token.CALL :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.replaceChild(n,fieldNameNode);
reportCodeChange();

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
replaced[i]=sourceName;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
if(sourceName==null){
return ;
}
replaced[i]=sourceName;

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode.cloneTree();
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Preconditions.checkState(!n.isFunction()||!parent.isVar());
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
aliasRefs.references.get(PROPERTY_CHECKING_UNION_SIZE).getParent().replaceChild(aliasRef.getNode(),fieldNameNode);
Sets.newHashSetWithExpectedSize(aliasRefs.references.size()-1).add(fieldNameNode);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
fieldNameNode.setJSType(scope);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
n.removeChild(n);
fieldNameNode.setJSType(scope);

Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE<fieldName.getScope().getVarCount()){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(NodeUtil.containsFunction(fieldNameNode)){
return ;
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryRemoveDeadAssignments(fieldName,fieldName.getControlFlowGraph());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeSetBaseType(fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
makeLocalNamesUnique(fieldNameNode,lastGeneration);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
rewriteFunctionDeclarations(fieldNameNode.getLastChild());
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.getFunctionBody(fieldNameNode).detachFromParent();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(lastGeneration){
fixUnitializedVarDeclarations(NodeUtil.getFunctionBody(fieldNameNode));
}
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(replaceReturns(NodeUtil.getFunctionBody(fieldNameNode),templateTypeName,fieldName,lastGeneration)!=null);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
templateTypeName=collapseDots(basePath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sourceName=collapseDots(targetPath);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXPORT :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)<0){
index=fieldName.length();
}
PROPERTY_CHECKING_UNION_SIZE=fieldName.indexOf('\n',PROPERTY_CHECKING_UNION_SIZE)+1;
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THROW :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
foldedStringNode=IR.add(IR.string("").srcref(n),fieldNameNode);
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
edgeList[i]=formatNodeName(PROPERTY_CHECKING_UNION_SIZE)+ARROW;
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TYPE :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETELEM :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.LSH :
fieldType=PROPERTY_CHECKING_UNION_SIZE<<PROPERTY_CHECKING_UNION_SIZE;
break;

case Token.RSH :
result=lvalInt>>rvalInt;
break;

case Token.URSH :
long PROPERTY_CHECKING_UNION_SIZE&0xffffffffL=lvalInt&0xffffffffL;
result=lvalLong>>>rvalInt;
break;

default :
throw new AssertionError("Unknown shift operator: "+Token.name(n.getType()));

}
n.getParent().replaceChild(n,fieldNameNode);
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.LSH :
fieldType=PROPERTY_CHECKING_UNION_SIZE<<PROPERTY_CHECKING_UNION_SIZE;
break;

case Token.RSH :
result=lvalInt>>rvalInt;
break;

case Token.URSH :
long PROPERTY_CHECKING_UNION_SIZE&0xffffffffL=lvalInt&0xffffffffL;
result=lvalLong>>>rvalInt;
break;

default :
throw new AssertionError("Unknown shift operator: "+Token.name(n.getType()));

}
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (n.getType()){
case Token.LSH :
fieldType=PROPERTY_CHECKING_UNION_SIZE<<PROPERTY_CHECKING_UNION_SIZE;
break;

case Token.RSH :
result=lvalInt>>rvalInt;
break;

case Token.URSH :
long PROPERTY_CHECKING_UNION_SIZE&0xffffffffL=lvalInt&0xffffffffL;
result=lvalLong>>>rvalInt;
break;

default :
throw new AssertionError("Unknown shift operator: "+Token.name(n.getType()));

}
n.getParent().replaceChild(n,fieldNameNode);
reportCodeChange();
for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THIS :

for(Node fieldTypeNode=n.getFirstChild();fieldTypeNode!=null;fieldTypeNode=fieldTypeNode.getNext()){
Node fieldNameNode=fieldTypeNode;
boolean hasType=false;
if(fieldTypeNode.getType()==Token.COLON){
fieldNameNode=fieldTypeNode.getFirstChild();
hasType=true;
}
String fieldName=fieldNameNode.getString();
if(fieldName.startsWith("\'")||fieldName.startsWith("\"")){
fieldName=fieldName.substring(1,fieldName.length()-1);
}
JSType fieldType=null;
if(hasType){
fieldType=createFromTypeNodesInternal(fieldTypeNode.getLastChild(),sourceName,scope);
}else {
fieldType=getNativeType(JSTypeNative.UNKNOWN_TYPE);
}
if(builder.addProperty(fieldName,fieldType,fieldNameNode)==null){
reporter.warning("Duplicate record field "+fieldName,sourceName,n.getLineno(),fieldNameNode.getCharno());
}
}
return builder.build();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,1737
========
{
skipEOLs();
return parseArrayType(next());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
skipEOLs();
return parseUnionType(next());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(parseTopLevelTypeExpression(next())!=null){
skipEOLs();
if(!match(JsDocToken.RC)){
reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}else {
next();
}
}
skipEOLs();
return parseRecordType(next());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if(parseTypeName(next())!=null){
skipEOLs();
if(!match(JsDocToken.RC)){
reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}else {
next();
}
}
skipEOLs();
return parseRecordType(next());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
connectToPossibleExceptionHandler(associatedNode,node.getFirstChild());
skipEOLs();
return parseRecordType(next());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,1738
com.google.javascript.jscomp.parsing.JsDocInfoParser,2084
========
skipEOLs();
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.FUNCTION);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(token!=JsDocToken.LP){
restoreLookAhead(token);
return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");
}
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList!=null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==FunctionNode.FUNCTION_EXPRESSION){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==false){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=newNode(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(associatedNode);
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldTypeList;
}
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
fieldTypeList=createJSTypeExpression(parseAndRecordParamTypeNode(token));
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return wrapNode(Token.QMARK,fieldTypeList);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return wrapNode(Token.BANG,fieldTypeList);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return parseUnionTypeWithAlternate(token,fieldTypeList);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=parseTypeExpression(token);
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==null){
return null;
}
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
lineno=stream.getLineno();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
charno=stream.getCharno();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
fieldTypeList=wrapNode(Token.BANG,typeNode);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(token==JsDocToken.LC);
Node recordType=newNode(Token.LC);
Node fieldTypeList=parseFieldTypeList(token);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2085
com.google.javascript.jscomp.parsing.JsDocInfoParser,2087
========
if(fieldTypeList!=null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==JsDocToken.STRING){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2091
========
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return newNode(Token.EMPTY);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return newNode("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.COMMA)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(alternate==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
skipEOLs();
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
next();
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
skipEOLs();
next();

return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList!=null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportTypeSyntaxWarning("msg.jsdoc.function.varargs");
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(contextType==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
next();
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return newNode(Token.EMPTY);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return newNode("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==JsDocToken.STRING){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpr==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(paramType==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg!=null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(JsDocToken.RB!=token){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(JsDocToken.RB==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==token){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(RB==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode!=null){
return reportGenericTypeSyntaxWarning();
}
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
case EXTENDS :

skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2092
com.google.javascript.jscomp.parsing.JsDocInfoParser,2096
========
recordType.addChildToBack(fieldTypeList);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.GT)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
skipEOLs();
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(JsDocToken.EQUALS==token){
token=next();
if(JsDocToken.STRING==token){
token=next();
}
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}else {
recordType.addChildToBack(resultType);
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseTypeExpression(next())==null){
return null;
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return newNode(Token.EMPTY);
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return newNode("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
newProperty.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
block.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
prev.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
node.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
call.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
n.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
replacement.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(associatedNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
var.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
lhs.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList=fieldTypeList;
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
paramsType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(fieldTypeList==null){
return null;
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
array.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.getParent().addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
functionType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
union.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
labelName.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.setType(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
labelName.setType(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
node.setType(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
ifNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
newDestBlock.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(fieldTypeList==null){
return false;
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
externsRoot.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(associatedNode).addChildToBack(IR.string(string));
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
lp.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(associatedNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
comma.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
paramNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(Node.newString(Token.NAME,""));
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.setModule(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
nodeName.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
lit.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
arrayNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(charno>charno){
throw new MaxIterationsExceededException("Analysis did not terminate after "+maxSteps);
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
parent.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(string.equals(".")){
type=Token.GETPROP;
}else if(op.equals("[]")){
type=Token.GETELEM;
}else {
throw new JsonMLException("Invalid OP argument: "+op);
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
charno=0;
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldTypeList.putBooleanProp(Node.FREE_CALL,true);
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
destParent.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
nameNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldTypeList));
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.setLineno(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
key.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
flagsNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
node.setLineno(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lineno=stream.getLineno();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
charno=stream.getCharno();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
syntheticModuleJsRoot.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(associatedNode.cloneTree());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.block().addChildToBack(fieldTypeList);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(associatedNode.isFunction()){
break;
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
child.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
nextNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
newCond.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
newParam.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
keyNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setQuotedString();
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(IR.propdef(associatedNode,fieldTypeList));
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
tryNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(recordType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
Preconditions.checkState(recordType.isBlock());
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
string=stream.getRemainingJSDocLine();
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.replaceChild(fieldTypeList,associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
newName.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.setCharno(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.setLineno(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToFront(fieldTypeList);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
fncBlock.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if("jQuery.prototype".equals(recordType.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
script.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(!suppressionNames.contains(string)){
return ;
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldTypeList);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
parentName.replacementNode.getParent().addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
replacementNode.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),associatedNode.cloneTree())),associatedNode);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.getParent().removeChild(callbackBlock);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.getChildAtIndex(associatedNode.getIndexOfChild(fieldTypeList))!=null){
associatedNode.addChildBefore(associatedNode,before);
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
script.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(associatedNode.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
getConditionalStatementCondition(associatedNode).getParent().addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
getConditionalStatementCondition(associatedNode).addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
exprParent.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
expr.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
case EXTENDS :

next();
recordType.addChildToBack(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2098
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(JsDocToken.EQUALS==token){
token=next();
if(JsDocToken.STRING==token){
token=next();
}
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldType.addChildToBack(fieldTypeList);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
recordType.addChildToBack(associatedNode);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldTypeList.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(fieldTypeList==null){
return null;
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
newProperty.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(associatedNode);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
comma.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}else {
recordType.addChildToBack(resultType);
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
block.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
parent.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(string!=null){
fieldTypeList.addChildToBack(IR.labelName(label));
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
call.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
functionType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
union.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.string(string));
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldTypeList.addChildToBack(IR.string(flags));
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
n.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
replacement.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(associatedNode);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
paramsType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
array.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
script.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
externs.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(recordType.getLastChild());
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.getLastChild().addChildToBack(fieldTypeList);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
destParent.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
typeList.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
arrayNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
node.addChildToBack(fieldTypeList);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
node.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldTypeList=parseTypeExpression(token);
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(fieldTypeList==null){
return null;
}
union.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
var.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
lhs.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList=fieldTypeList;
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
externsRoot.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.setLineno(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
paramNode.addChildToBack(fieldTypeList);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
paramNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
associatedNode.addChildToBack(recordType);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
prev.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
cur.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.setLineno(fieldTypeList);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
name.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
ifNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
newDestBlock.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
lp.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
next();
recordType.addChildToBack(associatedNode);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
syntheticModuleJsRoot.addChildToBack(fieldTypeList);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
syntheticModuleJsRoot.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(associatedNode.cloneTree());
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
IR.block().addChildToBack(recordType);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(fieldTypeList);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
next();
script.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(IR.string(string));
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildAfter(fieldTypeList,associatedNode);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
tryNode.addChildToBack(fieldTypeList);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
tryNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
Preconditions.checkState(associatedNode.isBlock());
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
charno=0;
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(recordType==null){
return null;
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
jsRoot.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(!associatedNode.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
recordType.addChildToBack(associatedNode);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
body.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
nodeName.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(fieldTypeList==null){
return false;
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return exp2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
associatedNode.getParent().addChildToFront(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
associatedNode.getParent().addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
associatedNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
labelName.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.setType(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
labelName.setType(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
node.setType(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
lit.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
flagsNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
node.setLineno(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
n.addChildToBack(associatedNode);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.setModule(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
child.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
nextNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
newCond.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
parser.addParserWarning("msg.jsdoc.suppress.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.add(stream.getString());
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lineno=stream.getLineno();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
charno=stream.getCharno();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
keyNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setQuotedString();
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(IR.propdef(associatedNode,fieldTypeList));
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
newParam.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!modifiesAnnotationKeywords.contains(string)&&!jsdocBuilder.hasParameter(name)){
parser.addParserWarning("msg.jsdoc.modifies.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
modifiesAnnotationKeywords.add(stream.getString());
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
parentName.replacementNode.getParent().addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
replacementNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
newName.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.setCharno(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(associatedNode);
next();
recordType.setLineno(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
nameNode.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(fieldTypeList);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldTypeList));
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(!suppressionNames.contains(string)){
return ;
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldTypeList.putBooleanProp(Node.FREE_CALL,true);
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fncBlock.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(associatedNode.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if("jQuery.prototype".equals(associatedNode.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return array;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),associatedNode.cloneTree())),associatedNode);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
key.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.reportGetterParam(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.reportSetterParam(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToFront(associatedNode);
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldTypeList);
next();
recordType.setType(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return newNode(Token.EMPTY);
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
exprParent.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
expr.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
c.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
getConditionalStatementCondition(fieldTypeList).getParent().addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
getConditionalStatementCondition(fieldTypeList).addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return ControlFlowAnalysis.computeFollowNode(fieldTypeList);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return next;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
recordType.addChildToBack(fieldTypeList);
return nodeToInsertAfter;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(recordType.getNext()!=null){
add("(");
addList(next);
add(")");
}
next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

next();
recordType.addChildToBack(fieldTypeList);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2099
com.google.javascript.jscomp.parsing.JsDocInfoParser,2106
========
newNode(Token.COLON).addChildToBack(fieldTypeList);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.GT)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldType;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return typeNode;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Preconditions.checkArgument(token==JsDocToken.LC);
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Node fieldTypeList=newNode(Token.LB);
skipEOLs();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
token=next();
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Node fieldTypeList=newNode(Token.LB);
if(fieldType!=null){
skipEOLs();
if(false){
typeNode=wrapNode(Token.ELLIPSIS,fieldType);
}else if(match(JsDocToken.EQUALS)){
next();
skipEOLs();
typeNode=wrapNode(Token.EQUALS,fieldType);
}
if(!match(JsDocToken.RC)){
reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}else {
next();
}
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
token=next();
if(fieldType!=null){
skipEOLs();
if(false){
typeNode=wrapNode(Token.ELLIPSIS,fieldType);
}else if(match(JsDocToken.EQUALS)){
next();
skipEOLs();
typeNode=wrapNode(Token.EQUALS,fieldType);
}
if(!match(JsDocToken.RC)){
reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}else {
next();
}
}

Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Node fieldTypeList=newNode(Token.LB);
do {
paramType=wrapNode(Token.EQUALS,fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
paramType=parseTypeExpression(token);
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
if((Property)associatedNode.next().getRootVar()==null||!(Property)associatedNode.next().getRootVar().isGlobal()){
continue;
}
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
try{
newVal=Integer.parseInt(string,charno);
}catch (NumberFormatException e) {
  return n;
}

Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Preconditions.checkArgument(associatedNode.isCall());
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Preconditions.checkArgument(associatedNode.isString());
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
associatedNode.getParent().replaceChild(n,fieldTypeList);
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
reportCodeChange();
Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
{
Preconditions.checkArgument(associatedNode.isCall());
Preconditions.checkArgument(associatedNode.isString());
associatedNode.getParent().replaceChild(n,fieldTypeList);
reportCodeChange();

Node fieldTypeList=newNode(Token.LB);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2109
========
fieldTypeList.addChildToBack(fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldTypeList);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(typeExpr==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(parameters==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(typeNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(fieldTypeList==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(expr==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
fieldType=parseTypeExpression(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
Preconditions.checkState(token==JsDocToken.PIPE||token==JsDocToken.COMMA);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(paramType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(arg==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=parseFieldType(token);
if(typeNode!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2111
com.google.javascript.jscomp.parsing.JsDocInfoParser,2115
========
if(!match(JsDocToken.COMMA)){
break;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(associatedNode);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resultType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parameters==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(paramType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
paramsType.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(returnRhs==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
prev.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(alternate==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
recordType.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
next();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
newProperty.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpr==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
typeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(expr==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
union.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldType=parseTypeExpression(token);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
comma.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
block.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(argumentNode==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
parent.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(checkerNode==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(destBlock==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
n.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
replacement.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
destParent.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==JsDocToken.LP){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
paramNode.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
externsRoot.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(type==null){
token=eatTokensUntilEOL();
continue retry;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(paramType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null||!fieldType.isScript()){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(script==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(insertionPoint==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
call.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
name.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
labelName.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.setType(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
labelName.setType(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
node.setType(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(contextType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
Preconditions.checkArgument(token==JsDocToken.LC);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(memberType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldRoot==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldType.putBooleanProp(Node.FREE_CALL,true);
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
syntheticModuleJsRoot.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(associatedNode.cloneTree());
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(string.equals(".")){
type=Token.GETPROP;
}else if(op.equals("[]")){
type=Token.GETELEM;
}else {
throw new JsonMLException("Invalid OP argument: "+op);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newRoot==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
tryNode.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
Preconditions.checkState(fieldType.isBlock());
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
lp.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.setLineno(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(!fieldType.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
body.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextElse==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
fieldType=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
nameNode.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(associatedNode);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.replaceChild(fieldType,associatedNode);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
lit.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==-1){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
keyNode.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.propdef(associatedNode,fieldType));
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(before==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
script.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(fieldTypeList);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
newName.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.setCharno(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(innerElseBranch==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fncBlock.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if("jQuery.prototype".equals(associatedNode.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(!suppressionNames.contains(string)){
return ;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(associatedNode.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
key.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.reportGetterParam(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
fieldTypeList.reportSetterParam(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),associatedNode.cloneTree())),associatedNode);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
token=next();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
case EXTENDS :

fieldTypeList.addChildToBack(fieldType);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2117
========
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.RC)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.RP)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}else {
fieldTypeList.addChildToBack(resultType);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COLON)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
token=next();
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return reportGenericTypeSyntaxWarning();
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseTypeExpression(next())==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COLON)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeNameNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(token==JsDocToken.PIPE&&match(JsDocToken.PIPE)){
next();
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.LB)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
fieldType=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newProperty.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramsType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
call.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
union.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacement.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(associatedNode);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
comma.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ifNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newDestBlock.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.RB)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
token=eatTokensUntilEOL();
continue retry;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externsRoot.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
destParent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
name.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
arrayNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lp.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
script.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externs.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lit.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nodeName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return false;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
body.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
syntheticModuleJsRoot.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(associatedNode.cloneTree());
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(fieldTypeList.isBlock());
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(associatedNode);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
flagsNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(string.equals(".")){
type=Token.GETPROP;
}else if(op.equals("[]")){
type=Token.GETELEM;
}else {
throw new JsonMLException("Invalid OP argument: "+op);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(token==JsDocToken.LC);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getFirstChild().getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldType.putBooleanProp(Node.FREE_CALL,true);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newCond.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keyNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.propdef(associatedNode,fieldType));
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.reportGetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.reportSetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.setCharno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.replaceChild(fieldType,associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
return ;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fncBlock.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("jQuery.prototype".equals(associatedNode.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parentName.replacementNode.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacementNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList.getChildAtIndex(fieldTypeList.getIndexOfChild(fieldType))!=null){
fieldTypeList.addChildBefore(fieldTypeList,before);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(fieldTypeList);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(associatedNode.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),associatedNode.cloneTree())),associatedNode);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2118
com.google.javascript.jscomp.parsing.JsDocInfoParser,2119
com.google.javascript.jscomp.parsing.JsDocInfoParser,2130
========
skipEOLs();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return parseFieldName(token);
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(parseFieldName(token));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
union.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
expr=parseTypeExpression(token);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
expr=parseTypeExpression(token);
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
typeNode=wrapNode(Token.EQUALS,fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
paramType=wrapNode(Token.EQUALS,fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
typeNode=parseAndRecordTypeNode(token);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
matchingRc=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)){
token=next();
if(!jsdocBuilder.recordLends(stream.getString())){
parser.addTypeWarning("msg.jsdoc.lends.incompatible",stream.getLineno(),stream.getCharno());
}
}else {
parser.addTypeWarning("msg.jsdoc.lends.missing",stream.getLineno(),stream.getCharno());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType&&!match(JsDocToken.RC)){
parser.addTypeWarning("msg.jsdoc.missing.rc",stream.getLineno(),stream.getCharno());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=eatTokensUntilEOL();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MEANING :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
state=State.SEARCHING_NEWLINE;
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.EOL||token==JsDocToken.EOC||token==JsDocToken.EOF){
state=State.SEARCHING_ANNOTATION;
return token;
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state=State.SEARCHING_ANNOTATION;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
typeName+=stream.getString();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Sets.newLinkedHashSet().size()<=1){
return ;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.children().iterator().next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case PROTECTED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_SHADOW :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EOL :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
stream.update();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(stream.getRemainingJSDocLine());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state=State.SEARCHING_ANNOTATION;
token=next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case CONSTANT :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXPOSE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case JAVA_DISPATCH :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_COMPILE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NOT_IMPLEMENTED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MODIFIES :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case VERSION :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case INHERIT_DOC :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case THROWS :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setModule(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
found=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DEPRECATED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DESC :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
typeNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
var.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
string=stream.getRemainingJSDocLine();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
prev.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(newNode(Token.LABEL));
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(getDefinitionsReferencedAt(associatedNode).iterator().next().getLValue()));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
n.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
call.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NEXT_CROSS_CFG_NODE: for (DiGraphNode<Node,Branch> cfgNode : cfg.getDirectedGraphNodes()) {
  if (cfg.isImplicitReturn(cfgNode)) {
    continue NEXT_CROSS_CFG_NODE;
  }
  FlowState<LiveVariableLattice> state=cfgNode.getAnnotation();
  if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) || (state.getOut().isLive(v1) && state.getOut().isLive(v2))) {
    interferenceGraph.connectIfNotFound(v1,null,v2);
    continue NEXT_VAR_PAIR;
  }
}

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
ifNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
partNode=fieldType.getFirstChild().getFirstChild().cloneTree();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
functionType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
labelName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
labelName.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
arrayLiteral.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
++charno;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldType.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldTypeList);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.BLOCK).putBooleanProp(Node.SYNTHETIC_BLOCK_PROP,true);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(newNode(Token.BLOCK));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
script.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
script=IR.script();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
nodeName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkState(fieldType.getNext()==null);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
fieldTypeList.srcref(fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldType.getNext()==null);
fieldTypeList.srcref(fieldType);

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isGetElem()){
IR.stringKey(string).copyInformationFrom(associatedNode).setQuotedString();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.stringKey(string).copyInformationFrom(associatedNode).addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.stringKey(string).copyInformationFrom(associatedNode));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return false;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getRoot().getLastChild().addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
newParam.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
insertExprResultState=false;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=false;
insertExprResultState=true;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPosition(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
externsRoot.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
staleInputs=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
parser.addParserWarning("msg.jsdoc.desc.extra",stream.getLineno(),stream.getCharno());
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
jsdocBuilder.recordDescription(fieldType);
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
elseBody=IR.block().srcref(fieldTypeList);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
insertExprResultState=true;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=state;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
insertExprResultState=state;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPosition(fieldType);
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
nameNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldType));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
lit.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
insertExprResultState=false;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
charno--;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
result=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=false;
charno--;
insertExprResultState=true;
result=true;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
fileOverview=fileOverviewInfo.string;
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
flagsNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
child.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.detachFromParent();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
reportCodeChange();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
associatedNode.detachFromParent();
reportCodeChange();

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(associatedNode).addChildToBack(IR.string(string));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildAfter(fieldType,associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
name.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
continue;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestShadow.count<localAssignment.count){
continue;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
body.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
fieldTypeList.reportCodeChange();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
destParent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.cloneTree().copyInformationFromForTree(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setIsSyntheticBlock(true);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.block().addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
reportCodeChange();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
n.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
lp.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setCharno(position2charno(charno));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!associatedNode.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseDirectives(associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.reportGetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.reportSetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(IR.ifNode(fieldType,IR.block(IR.exprResult(IR.assign(IR.name(string),moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(token==JsDocToken.LC);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
newName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parentName.replacementNode.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
replacementNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(fieldTypeList.get(string.substring(0,fieldType)));
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(parentName.replacementNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(fieldTypeList.get(string.substring(0,fieldType)));
Preconditions.checkNotNull(parentName.replacementNode);

fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING_KEY :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.removeChild(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.getParent().removeChild(callbackBlock);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(associatedNode,Branch.ON_TRUE,node.getFirstChild().getNext());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(associatedNode,node.getFirstChild());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldTypeList.isName()||NodeUtil.isGet(expr));
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
new Node(NodeUtil.getOpFromAssignmentOp(fieldTypeList)).copyInformationFrom(parent).addChildToBack(fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
tempNameValue=fieldTypeList.cloneTree();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldTypeList.isName()||NodeUtil.isGet(expr));
new Node(NodeUtil.getOpFromAssignmentOp(fieldTypeList)).copyInformationFrom(parent).addChildToBack(fieldType);
tempNameValue=fieldTypeList.cloneTree();

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
tempNameValue=fieldTypeList;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.add(string);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
getConditionalStatementCondition(associatedNode).getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
getConditionalStatementCondition(associatedNode).addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
c.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new SourcePosition<AliasTransformation>(){
}
.setPositionInformation(fieldTypeList.getLineno(),n.getCharno(),fieldType,null==null?Integer.MAX_VALUE:next.getCharno());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
forbidTemps=NodeUtil.has(fieldType,new Predicate<Node>(){
  @Override public boolean apply(  Node n){
    if (n.isName()) {
      return n.getString().equals("eval");
    }
    if (!assumeMinimumCapture && n.isFunction()) {
      return n != fnNode;
    }
    return false;
  }
}
,NodeUtil.MATCH_NOT_FUNCTION);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
exprParent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
key=associatedNode.getNext();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
associatedNode.removeChildAfter(associatedNode);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.removeChildAfter(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
insertAfter=addToFront(fieldTypeList,associatedNode,fieldType);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(associatedNode);
fieldTypeList.removeChildAfter(associatedNode);
insertAfter=addToFront(fieldTypeList,associatedNode,fieldType);

fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeList!=null&&node.parent==this,"The existing child node of the parent should not be null.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addChildAfter(fieldTypeList,fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
prev.next=fieldTypeList;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.copyInformationFrom(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newChild.next=child.next;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newChild.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==fieldTypeList)last=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
last.next=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastSib.next=associatedNode;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==null){
last=fieldTypeList.getLastSibling();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return parseFieldName(token);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldName;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
skipEOLs();
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(parseFieldName(token));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return array;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return array;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
next();
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
union.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
expr=parseTypeExpression(token);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
expr=parseTypeExpression(token);
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType!=null){
return null;
}
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(token==JsDocToken.ELLIPSIS){
arg=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
hasVarArgs=true;
}else {
arg=parseTypeExpression(token);
}
if(fieldType==null){
return null;
}

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
if(fieldType==null){
return null;
}
array.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return typeExpr;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldTypeList.addChildToBack(fieldType);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
skipEOLs();
next();
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return typeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
paramType=wrapNode(Token.EQUALS,fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
typeNode=parseAndRecordTypeNode(token);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
matchingRc=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)){
token=next();
if(!jsdocBuilder.recordLends(stream.getString())){
parser.addTypeWarning("msg.jsdoc.lends.incompatible",stream.getLineno(),stream.getCharno());
}
}else {
parser.addTypeWarning("msg.jsdoc.lends.missing",stream.getLineno(),stream.getCharno());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType&&!match(JsDocToken.RC)){
parser.addTypeWarning("msg.jsdoc.missing.rc",stream.getLineno(),stream.getCharno());
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=eatTokensUntilEOL();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MEANING :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
state=State.SEARCHING_NEWLINE;
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
if(token==JsDocToken.EOL||token==JsDocToken.EOC||token==JsDocToken.EOF){
state=State.SEARCHING_ANNOTATION;
return token;
}
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state=State.SEARCHING_ANNOTATION;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
typeName+=stream.getString();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Sets.newLinkedHashSet().size()<=1){
return ;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.children().iterator().next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
stream.update();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(stream.getRemainingJSDocLine());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
state=State.SEARCHING_ANNOTATION;
token=next();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case PROTECTED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_SHADOW :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EOL :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case CONSTANT :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXPOSE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case JAVA_DISPATCH :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_COMPILE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NOT_IMPLEMENTED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MODIFIES :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEE :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case VERSION :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case INHERIT_DOC :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case THROWS :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(IR.labelName(string));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setModule(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
found=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DEPRECATED :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DESC :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
var.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
string=stream.getRemainingJSDocLine();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
block.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
lineSet=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldTypeList.addChildToBack(fieldType);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
prev.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(newNode(Token.LABEL));
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return newNode(Token.LABEL);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NEXT_CROSS_CFG_NODE: for (DiGraphNode<Node,Branch> cfgNode : cfg.getDirectedGraphNodes()) {
  if (cfg.isImplicitReturn(cfgNode)) {
    continue NEXT_CROSS_CFG_NODE;
  }
  FlowState<LiveVariableLattice> state=cfgNode.getAnnotation();
  if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) || (state.getOut().isLive(v1) && state.getOut().isLive(v2))) {
    interferenceGraph.connectIfNotFound(v1,null,v2);
    continue NEXT_VAR_PAIR;
  }
}

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(getDefinitionsReferencedAt(fieldTypeList).iterator().next().getLValue()));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
n.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
ifNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
typeNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
functionType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
call.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
partNode=fieldTypeList.cloneTree();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
arrayLiteral.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
++charno;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
labelName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
labelName.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
script.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
script=IR.script();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
newNode(Token.BLOCK).putBooleanProp(Node.SYNTHETIC_BLOCK_PROP,true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldTypeList.addChildToBack(newNode(Token.BLOCK));
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return IR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return partNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldType.setJSType(type);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldTypeList.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isNumber()){
string=NodeUtil.getStringValue(property);
}else {
propertyName=property.getString();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isGetElem()){
IR.stringKey(string).copyInformationFrom(associatedNode).setQuotedString();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.stringKey(string).copyInformationFrom(associatedNode).addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.stringKey(string).copyInformationFrom(associatedNode));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldType.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldTypeList);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
nodeName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkState(fieldType.getNext()==null);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
fieldTypeList.srcref(fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldType.getNext()==null);
fieldTypeList.srcref(fieldType);

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
newParam.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPosition(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return false;
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getRoot().getLastChild().addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
insertExprResultState=false;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=false;
insertExprResultState=true;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
parser.addParserWarning("msg.jsdoc.desc.extra",stream.getLineno(),stream.getCharno());
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
jsdocBuilder.recordDescription(fieldType);
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
externsRoot.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
staleInputs=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
charno++;
node.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
insertExprResultState=true;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=state;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
insertExprResultState=state;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
elseBody=IR.block().srcref(fieldTypeList);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPosition(fieldType);
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
insertExprResultState=false;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
charno--;
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
result=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=false;
charno--;
insertExprResultState=true;
result=true;

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
insertExprResultState=true;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(associatedNode).addChildToBack(IR.string(string));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildAfter(fieldType,associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
name.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
fileOverview=fileOverviewInfo.string;
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
flagsNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
nameNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldType));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
destParent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.cloneTree().copyInformationFromForTree(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setIsSyntheticBlock(true);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
child.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.detachFromParent();
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
reportCodeChange();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
associatedNode.detachFromParent();
reportCodeChange();

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
lit.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
body.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
Preconditions.checkState(associatedNode.isBlock());
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
fieldTypeList.addChildToBack(associatedNode);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
reportCodeChange();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
n.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
lp.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setCharno(position2charno(charno));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!associatedNode.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseDirectives(associatedNode);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return typeNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(token==JsDocToken.LC);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(IR.ifNode(fieldType,IR.block(IR.exprResult(IR.assign(IR.name(string),moduleExportsProp.cloneTree())))).copyInformationFromForTree(script));
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.reportGetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.reportSetterParam(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setType(Token.STRING_KEY);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
newName.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.setLineno(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parentName.replacementNode.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
replacementNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(parentName.replacementNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.removeChild(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.getParent().removeChild(callbackBlock);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.addChildToBack(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(fieldTypeList);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
associatedNode.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING_KEY :

do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldTypeList.isName()||NodeUtil.isGet(expr));
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
new Node(NodeUtil.getOpFromAssignmentOp(fieldTypeList)).copyInformationFrom(parent).addChildToBack(fieldType);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
tempNameValue=fieldTypeList.cloneTree();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Preconditions.checkState(fieldTypeList.isName()||NodeUtil.isGet(expr));
new Node(NodeUtil.getOpFromAssignmentOp(fieldTypeList)).copyInformationFrom(parent).addChildToBack(fieldType);
tempNameValue=fieldTypeList.cloneTree();

Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
tempNameValue=fieldTypeList;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
parent.setType(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
createEdge(associatedNode,Branch.ON_TRUE,node.getFirstChild().getNext());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
connectToPossibleExceptionHandler(associatedNode,node.getFirstChild());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
c.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
getConditionalStatementCondition(associatedNode).getParent().addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
getConditionalStatementCondition(associatedNode).addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new SourcePosition<AliasTransformation>(){
}
.setPositionInformation(associatedNode.getLineno(),n.getCharno(),fieldType,null==null?Integer.MAX_VALUE:next.getCharno());
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return next;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
advanceLookAhead(false);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
forbidTemps=NodeUtil.has(fieldType,new Predicate<Node>(){
  @Override public boolean apply(  Node n){
    if (n.isName()) {
      return n.getString().equals("eval");
    }
    if (!assumeMinimumCapture && n.isFunction()) {
      return n != fnNode;
    }
    return false;
  }
}
,NodeUtil.MATCH_NOT_FUNCTION);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
exprParent.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
key=associatedNode.getNext();
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return nodeToInsertAfter;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.removeChildAfter(associatedNode);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
insertAfter=addToFront(fieldTypeList,associatedNode,fieldType);
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
Preconditions.checkNotNull(associatedNode);
fieldTypeList.removeChildAfter(associatedNode);
insertAfter=addToFront(fieldTypeList,associatedNode,fieldType);

fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
fieldTypeList.removeChildAfter(fieldTypeList);
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(fieldTypeList!=null&&node.parent==this,"The existing child node of the parent should not be null.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
addChildAfter(fieldTypeList,fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
prev.next=fieldTypeList;
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList.copyInformationFrom(fieldType);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newChild.next=child.next;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newChild.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==fieldTypeList)last=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return child;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
Preconditions.checkArgument(prev.parent==this,"prev is not a child of this node.");
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
Preconditions.checkArgument(prev.next!=null,"no next sibling.");
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
prev.next=child.next;
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
if(fieldType==fieldTypeList)last=fieldTypeList;
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
child.next=null;
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
child.parent=null;
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
last.next=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.parent=this;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
Preconditions.checkArgument(child.next==null);
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.parent==null);
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(child.next==null);
child.parent=this;
child.next=null;
fieldTypeList=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastSib.next=fieldTypeList;
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
last=fieldTypeList.getLastSibling();
}
do {
Node fieldType=parseFieldType(token);
if(fieldType==null){
return null;
}
fieldTypeList.addChildToBack(fieldType);
skipEOLs();
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
token=next();
} while(true);
return fieldTypeList;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2137
========
skipEOLs();
Node fieldName=parseFieldName(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=newNode(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.COLON).addChildToBack(fieldName);
Node fieldName=parseFieldName(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(typeExpr==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(parameters==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(typeNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(fieldTypeList==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldName);
Node fieldName=parseFieldName(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(expr==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
fieldName=parseTypeExpression(token);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
Preconditions.checkState(token==JsDocToken.PIPE||token==JsDocToken.COMMA);
if(fieldName==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(fieldName!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(paramType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(arg==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldName=parseFieldName(token);
if(typeNode!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2139
com.google.javascript.jscomp.parsing.JsDocInfoParser,2143
========
if(!match(JsDocToken.COMMA)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.GT)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName!=null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parameters==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.RP)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COMMA)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(alternate==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(memberType==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(expr==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.RC)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.LB)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.RB)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.COLON).addChildToBack(fieldName);
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(paramType==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(arg!=null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
if(fieldName==null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeNode!=null){
return null;
}
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
case EXTENDS :

skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2144
com.google.javascript.jscomp.parsing.JsDocInfoParser,2149
========
skipEOLs();
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.GT)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
skipEOLs();
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RP)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseResultType(next())==null){
return null;
}else {
associatedNode.addChildToBack(resultType);
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RP)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToBack(associatedNode);
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(JsDocToken.EQUALS==token){
token=next();
if(JsDocToken.STRING==token){
token=next();
}
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode==null){
return null;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(charno>charno){
throw new MaxIterationsExceededException("Analysis did not terminate after "+maxSteps);
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToBack(associatedNode);
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode==null){
return null;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
if(associatedNode.isFunction()){
break;
}
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
string=stream.getRemainingJSDocLine();
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
case EXTENDS :

next();
skipEOLs();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2153
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=next();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return fieldName;
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
state=State.SEARCHING_ANNOTATION;
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
string=trimEnd(line);
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
parser.addParserWarning("msg.jsdoc.suppress.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.add(stream.getString());
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!modifiesAnnotationKeywords.contains(string)&&!jsdocBuilder.hasParameter(name)){
parser.addParserWarning("msg.jsdoc.modifies.unknown",name,stream.getLineno(),stream.getCharno());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
modifiesAnnotationKeywords.add(stream.getString());
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
skipEOLs();
Node typeExpression=newNode(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.COLON).addChildToBack(associatedNode);
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
add("(");
addList(next);
add(")");
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case IMPLICIT_CAST :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=typeExpression;
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2154
========
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.LB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=wrapNode(Token.ELLIPSIS,parseTypeExpression(next()));
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(contextType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeNode!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(resultType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(!match(JsDocToken.RP)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
}
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RB)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(token==JsDocToken.LC);
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(fieldType==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldName);
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(arg==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=newNode(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==fieldName){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(curNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(charno>charno){
throw new MaxIterationsExceededException("Analysis did not terminate after "+maxSteps);
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression.isFunction()){
break;
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(getDefinitionsReferencedAt(associatedNode).iterator().next().getLValue()));
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(null!=this.typeExpression.associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==this.typeExpression.associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stream.getRemainingJSDocLine().trim().length()>0){
jsdocBuilder.markText(line,lineno,charno,lineno,charno+line.length());
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(n==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(associatedNode==typeExpression){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(associatedNode==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(first==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(typeExpression!=null&&node.parent==this,"The existing child node of the parent should not be null.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(newChild.next==null,"The new child node has siblings.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(child==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(prev.parent==this,"prev is not a child of this node.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(prev.next!=null,"no next sibling.");
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
prev.next=child.next;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.parent=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(last==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(child.parent==null);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
Preconditions.checkArgument(child.next==null);
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
child.parent=this;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
child.next=associatedNode;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
associatedNode=associatedNode;
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Preconditions.checkArgument(newChild.parent==null,"The new child node already has a parent.");
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
associatedNode.copyInformationFrom(associatedNode);
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
newChild.next=child.next;
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
newChild.parent=this;
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lastSib.next=associatedNode;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==null){
last=associatedNode.getLastSibling();
}
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(prev==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode==associatedNode)last=typeExpression;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.next=null;
child.parent=null;
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(typeExpression==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(child==associatedNode){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result.last!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result.last==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(result==null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
Node typeExpression=parseTypeExpression(next());
if(last!=null){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2156
com.google.javascript.jscomp.parsing.JsDocInfoParser,2160
========
fieldType.addChildToBack(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldTypeList.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
paramsType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
array.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
union.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newProperty.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.detachFromParent();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parseDirectives(fieldType);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(IR.string(string));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
labelName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
labelName.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(argumentNode==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.FUNCTION);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
ifNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newDestBlock.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
replacement.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
paramNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
destParent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpr==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldTypeList==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.LC);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
nodeName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
externs.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sourceMapOutputPath==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(insertionPoint==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
IR.call(typeExpression).addChildToBack(IR.string(string));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return typeExpression;
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
recordType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
next();
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newName.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setCharno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
if(string.equals(".")){
type=Token.GETPROP;
}else if(op.equals("[]")){
type=Token.GETELEM;
}else {
throw new JsonMLException("Invalid OP argument: "+op);
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
fieldName.putBooleanProp(Node.FREE_CALL,true);
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
externsRoot.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
syntheticExternsAndJsRoot.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
tryNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Preconditions.checkState(typeExpression.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldRoot==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return false;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName=parseTypeExpression(token);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
lp.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
flagsNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!associatedNode.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextElse==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
nameNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.replaceChild(fieldName,associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
parentName.replacementNode.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
replacementNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToFront(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(before==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
associatedNode.getParent().removeChild(callbackBlock);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(associatedNode);
if(typeExpression!=null){
return null;
}
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
getSynthesizedExternsRoot().addChildToBack(IR.var(fieldType));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
lit.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setQuotedString();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(IR.propdef(associatedNode,fieldName));
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null&&!(isLowerPrecedenceInExpression(associatedNode,AND_PRECEDENCE)&&isLowerPrecedenceInExpression(fieldName,AND_PRECEDENCE))){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(innerElseBranch==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.setLineno(node.getFirstChild().getLineno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.setCharno(node.getFirstChild().getCharno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.setCharno(fieldType.getCharno());
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fncBlock.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if("jQuery.prototype".equals(typeExpression.getQualifiedName())){
typeExpression=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression.isQuotedString()){
typeExpression=IR.getelem(typeExpression.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression.isVar()){
typeExpression=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),typeExpression.cloneTree())),typeExpression);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.reportGetterParam(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.reportSetterParam(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeExpression.getParent().addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
typeExpression.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
if(typeExpression!=null){
if(secondArg.getNext()!=null||!secondArg.isNumber()){
return typeExpression;
}else {
charno=(int)secondArg.getDouble();
}
}
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(typeExpression==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==null){
return null;
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2161
========
Node fieldType=newNode(Token.COLON);
fieldTypeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
innerBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(fieldType.removeChildAfter(outerBlock));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newProperty.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
objectLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.PIPE);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
simplified.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
simplified.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(simplifyShortCircuitBranch(typeExpression));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lhs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
var.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayLiteral.addChildToBack(fieldName);
arrayLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayLiteral.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
arrayLiteral.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
replacement.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
simplified.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
simplified.addChildToBack(fieldName);
simplified.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
script.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
externs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
script.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
functionType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
call.addChildToBack(fieldName);
call.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
call.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.putBooleanProp(Node.DIRECT_EVAL,true);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramsType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
array.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
destParent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
charno--;
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.setLineno(fieldName);
node.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objKeyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lp.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldType);
node.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
charno++;
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(fieldName);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parent.addChildToBack(typeExpression);
block.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
root.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
labelName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
labelName.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
block.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newcall.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arraylit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
ifNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newDestBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
arrayOfStrings.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
jsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
varNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(typeExpression);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
name.addChildToBack(fieldName);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildrenToFront(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
varNode.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
var.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
original.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nextNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newCond.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(associatedNode.isBlock());
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
opNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode=associatedNode.cloneTree();
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
switchNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nodeName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(typeExpression==null){
return false;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!fieldName.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldName.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setCharno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
node.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkNotNull(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
script.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
externsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
flagsNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.setLineno(fieldType);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
Preconditions.checkState(fieldType.getType()==Token.BLOCK||parent.getType()==Token.SCRIPT);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
objectlit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
comma.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nameNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
lit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
charno++;
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
child.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newCond.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
nextNode.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
typeExpression.putBooleanProp(Node.FREE_CALL,true);
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
keyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!fieldType.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(IR.propdef(fieldType,typeExpression));
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
parentName.replacementNode.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
replacementNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
node.addChildToBack(fieldName);
parent.addChildToBack(fieldType);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
expandedBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
associatedNode.detachFromParent();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.LC);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseFieldTypeList(token)==null){
return reportGenericTypeSyntaxWarning();
}
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fncBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if("jQuery.prototype".equals(fieldType.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(fieldType.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
literalStringNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fncBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newBlock.addChildToBack(fieldName);
newBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newBlock.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.FUNCTION);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),fieldType.cloneTree())),fieldName);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);
newNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
newNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
newNode.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.reportGetterParam(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.reportSetterParam(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
Node fieldType=newNode(Token.COLON);
key.setType(fieldName);
key.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
if(fieldType==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.addChildToBack(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.setCharno(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
n.setLineno(fieldName);
n.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.addChildToBack(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(fieldName);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
prev.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
cur.setLineno(typeExpression);
prev.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
ancestor.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
typeExpression.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
paramList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Node fieldType=newNode(Token.COLON);
fieldType.copyInformationFromForTree(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

Node fieldType=newNode(Token.COLON);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2162
========
fieldTypeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldName==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newProperty.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
objectLiteral.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.detachFromParent();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
call.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramsType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
array.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
functionType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldType);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(string.equals(""))){
fieldType.addChildToBack(IR.string(flags));
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacement.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
destParent.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
script.addChildToBack(fieldName);
script.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
script.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externs.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
script.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
arrayNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeList.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression=parseTypeExpression(token);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
union.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return null;
}
union.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ifNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newDestBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
paramNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
root.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return paramNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
NodeUtil.tryMergeBlock(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
fieldType.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
block.addChildToBack(fieldName);
node.addChildToBack(fieldType);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
name.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
n.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
jsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
syntheticModuleJsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
syntheticModuleJsRoot.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode.cloneTree());
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
syntheticExternsAndJsRoot.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return typeExpression;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return syntheticModuleJsRoot;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cur.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
prev.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
call.addChildToBack(fieldName);
call.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
call.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildAfter(typeExpression,fieldName);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lp.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldType);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
tryNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(associatedNode);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return tryNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(associatedNode.isBlock());
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nodeName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!fieldName.isBlock()){
Preconditions.checkState(config.isIdeMode);
bodyNode=IR.block();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(fieldName);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
node.addChildToBack(fieldName);
return node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
body.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(typeExpression==null){
return false;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
parent.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return exp2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
comma.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return associatedNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
labelName.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
flagsNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setLineno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
node.setLineno(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
recordType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return recordType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
externsRoot.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lit.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
child.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newCond.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parent.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nameNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
varNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldName.addChildToFront(typeExpression);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
parent.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parentName.replacementNode.getParent().addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replacementNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keyNode.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keyNode.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
keyNode.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!associatedNode.isString()){
keyNode=IR.string(NodeUtil.getStringValue(keyNode)).srcref(keyNode);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(IR.propdef(associatedNode,typeExpression));
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType.getType()!=Token.GETPROP&&first.getType()!=Token.GETELEM){
typeExpression.putBooleanProp(Node.FREE_CALL,true);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newName.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setCharno(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
node.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
fieldType.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setLineno(fieldName);
node.addChildToBack(fieldName);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.remove(string);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fncBlock.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isQuotedString()){
associatedNode=IR.getelem(fieldType.cloneTree(),currentProp).srcref(currentProp);
}else {
newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
return ;
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeList.addChildToBack(typeExpression);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if("jQuery.prototype".equals(fieldType.getQualifiedName())){
associatedNode=objectToExtend.removeFirstChild();
}else {
targetVal=objectToExtend.detachFromParent();
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(associatedNode.isVar()){
associatedNode=IR.block(key,IR.exprResult(IR.assign(key.getFirstChild().cloneNode(),fieldType.cloneTree())),fieldName);
}else {
ifBody=IR.block(IR.exprResult(IR.assign(key,tmp.cloneTree())),body);
}
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.reportGetterParam(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.reportSetterParam(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
typeExpression.addChildToBack(fieldType);
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.setType(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key.setType(fieldName);
key.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldName;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.FUNCTION :

fieldType.addChildToBack(fieldName);
fieldType.addChildToBack(typeExpression);
return fieldType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2163
com.google.javascript.jscomp.parsing.JsDocInfoParser,2171
Find no block!
com.google.javascript.jscomp.parsing.JsDocInfoParser,2173
========
case '\n' :
ungetChar(charno);
this.string=getStringFromBuffer();
charno=0;
return this.string;

case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case BANG :

case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(token!=JsDocToken.STRING){
return reportGenericTypeSyntaxWarning();
}
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TYPEDEF :
lineno=stream.getLineno();
charno=stream.getCharno();
Node null=null;

case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!suppressionNames.contains(string)){
parser.addParserWarning("msg.jsdoc.suppress.unknown",name,stream.getLineno(),stream.getCharno());
}
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
suppressionNames.add(stream.getString());
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
stream.update();
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!modifiesAnnotationKeywords.contains(string)&&!jsdocBuilder.hasParameter(name)){
parser.addParserWarning("msg.jsdoc.modifies.unknown",name,stream.getLineno(),stream.getCharno());
}
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
modifiesAnnotationKeywords.add(stream.getString());
case STRING :
String string=stream.getString();
return newStringNode(string);


========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return parseTypeName(token);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case '\n' :
ungetChar(charno);
this.string=getStringFromBuffer();
charno=0;
return this.string;

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case OVERRIDE :
if(!jsdocBuilder.recordOverride()){
parser.addTypeWarning("msg.jsdoc.override",stream.getLineno(),stream.getCharno());
}
token=eatTokensUntilEOL();
continue retry;

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case THROWS :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case PROTECTED :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_SHADOW :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case CONSTANT :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTERNS :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EXTENDS :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case LENDS :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_TYPE_CHECK :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MODIFIES :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEE :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case VERSION :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case BANG :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case TEMPLATE :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case STAR :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return newNode(Token.EMPTY);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return newNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=next();
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(match(JsDocToken.STRING)&&"void".equals(stream.getString())){
next();
return newNode(Token.VOID);
}else {
return parseTypeExpression(next());
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case NO_ALIAS :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case EOL :

swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
parser.addTypeWarning(string,stream.getLineno(),stream.getCharno());
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
associatedNode.addChildToBack(parseFieldType(token));
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COMMA)){
break;
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.COLON)){
return parseFieldName(token);
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return reportGenericTypeSyntaxWarning();

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(string.length()>0){
if(fileLevelJsDocBuilder!=null){
fileLevelJsDocBuilder.append(preserve);
}
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=preserveInfo.token;
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
type=createJSTypeExpression(newStringNode("number"));
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!jsdocBuilder.recordEnumParameterType(type)){
parser.addTypeWarning("msg.jsdoc.incompat.type",lineno,charno);
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=eatTokensUntilEOL(token);
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(string.length()>0){
jsdocBuilder.recordDeprecationReason(reason);
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
token=reasonInfo.token;
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return parseUnionTypeWithAlternate(token,parseTypeExpression(token));

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!match(JsDocToken.RC)){
return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
}
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newNode(Token.LC).addChildToBack(parseFieldTypeList(token));
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
swtich (token){
case STRING :
String string=stream.getString();
return reportGenericTypeSyntaxWarning();

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
next();
swtich (token){
case STRING :
String string=stream.getString();
return reportGenericTypeSyntaxWarning();

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
skipEOLs();
next();
swtich (token){
case STRING :
String string=stream.getString();
return reportGenericTypeSyntaxWarning();

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return wrapNode(Token.ELLIPSIS,IR.empty());

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return parseTypeExpression(token);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
stream.update();
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder().append(string);
swtich (token){
case STRING :
String string=stream.getString();
return newStringNode(string);

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return wrapNode(Token.BANG,parseBasicTypeExpression(next()));

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return wrapNode(Token.QMARK,parseBasicTypeExpression(token));

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (token){
case STRING :
String string=stream.getString();
return wrapNode(Token.BANG,parseBasicTypeExpression(token));

default :
return null;

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.jscomp.parsing.JsDocInfoParser,2174
com.google.javascript.rhino.jstype.RecordTypeBuilder,57
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,53
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,55
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,58
========
super(registry);
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,false);
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(propertyNode);
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.propertyNode=typeExpr;
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null,isEmpty);
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.propertyNode=parameters==null?registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)):parameters;
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=returnType==null?getNativeType(UNKNOWN_TYPE):returnType;
this.registry=registry;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordTypeBuilder,59
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,71
========
if(properties.containsKey(propertyNode)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.containsKey(type)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parameters.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(throwsDescriptions.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(recognizedAnnotations.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.startsWith(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(reachingDef.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propertiesToErrorFor.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!propertyNode.isName()){
return ;
}
if(properties.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stripNameSuffixes.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(stripNamePrefixes.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(props.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.isUpperCase(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(mappedPaths.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.indexOf(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String name : name.split("\\.")){
if(!isValidSimpleName(part)){
return false;
}
}
if(properties.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.isFunctionExpression(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR)!=-1){
name=name.substring(0,name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));
}
if(properties.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(externedNames.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.containsKey(name)){
return new Bind(propertyNode.getNext(),null,safeNext(propertyNode.getNext()));
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scope.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(RENAME_PROPERTY_FUNCTION_NAME.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.containsKey(name)){
return new Bind(propertyNode.getNext(),safeNext(propertyNode.getNext()),safeNext(safeNext(propertyNode.getNext())));
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(scopes.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(globalSymbolNamespace.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(SPECIAL_EXTERNS.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compiler.containsKey(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(properties.isEquivalentTo(name)){
return null;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
consistNameGenerators.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
consistNameMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
nameGenerators.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(parameters.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(throwsDescriptions.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(type)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(recognizedAnnotations.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
register(type,name);
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(maybeAssign.nameNode,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
nameDefinitionMultimap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
definitionSiteMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
nameGenerator.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
renameMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
assignments.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(props.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(isEmpty){
return false;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(type,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(reachingDef.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(hasOwnDeclaredProperty(name)){
return false;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
properties.put(name,new Property(name,type,isEmpty,propertyNode));
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
propertyMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
affinityGraph.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
reachingDef.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(config.name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(getMethodFromDeclarationName(config.name),new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=true;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
checkModuleName(name);
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
mappedPaths.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(p.oldName,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(propertyNode,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(propertyNode)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propertyNode.isGetProp()){
String propertyNode.getLastChild().getString()=useSite.getLastChild().getString();
if(propName.equals("apply")||propName.equals("call")){
useSite=useSite.getFirstChild();
}
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETTER_DEF :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(depends.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(value.qName,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(decl.node,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
scopeUpRefMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(stripNameSuffixes.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(stripNamePrefixes.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(CLOSURE_LOCALE_CONSTANT_NAME,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(externedNames.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(COMPILED_CONSTANT_NAME,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.STRING_KEY :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(getDefinitionsReferencedAt(propertyNode)==null){
return ;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
putCompilerInput(new CompilerInput(new SyntheticAst(name),true).getInputId(),input);
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
propertyNode.addChildToFront(new SyntheticAst(name).getAstRoot(this));
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
globalNameNodes.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.THIS :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
this.name=name;
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.isUpperCase(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
externNames.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.isFunctionExpression(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propertyNode.getParent()==null){
return null;
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
typeRegistry.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
globalNames.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
nameMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.isEquivalentTo(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(typeSystem.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.startsWith(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
compiler.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
cssNames.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.OR :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.HOOK :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
symbolMap.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
reportCodeChange();
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(RENAME_PROPERTY_FUNCTION_NAME.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.indexOf(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isAnySymbolDeclared(name,propertyNode,sym.docScope)==null){
declareSymbol(name,type,type==null,sym.docScope,propertyNode,null);
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
case Token.NAME :

properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(propertiesToErrorFor.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String name : name.split("\\.")){
if(!isValidSimpleName(part)){
return false;
}
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
replaceSymbol(propertyNode,name);
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(mappedPaths.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
anonFns.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(scopes.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(dirtySymbols.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
props.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
accessors.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
mutators.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(ref.node,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
reservedNames.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(!propertyNode.isName()){
return ;
}
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
registry.registerPropertyOnType(name,this);
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(name.indexOf(".prototype.")==-1){
return false;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.PARAM_LIST :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
refNodes.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(instanceType.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(getSlot(name)!=null){
return fullyNamedSym;
}
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(compiler.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.GETPROP :

isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
varsToRemove.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
unknownNameUse.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null||type.isUnknownType()){
return "";
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(globalSymbolNamespace.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(SPECIAL_EXTERNS.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(scope.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
propertyNode=currentNode.getFirstChild();
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(typesToSkip.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.contains(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(!(type instanceof ObjectType)){
if(type.autoboxesTo()!=null){
type=type.autoboxesTo();
}else {
return null;
}
}
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
externMethodsWithoutSignatures.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(!propertyNode.isString()){
return ;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
externMethods.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
name.isFromExterns()?properties.put(name,new RecordProperty(type,propertyNode)):null;
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(name,propertyNode,type);
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(codingConvention.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
type=properties.getNativeType(UNKNOWN_TYPE);
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=true;
if(properties.containsKey(name)){
return null;
}
typeRegistry.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
type==null?null:properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
type=type.restrictByNotNullOrUndefined();
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
if(type.isUnionType()){
for(JSType type : type.toMaybeUnionType().getAlternates()){
addInvalidatingType(alt);
}
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(propertyNode.isName()){
Preconditions.checkArgument(propertyNode.isFunction()||parent.isVar());
}else {
Preconditions.checkArgument(n.isGetProp()&&(parent.isAssign()||parent.isExprResult()));
}
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defineSlot(propertyNode,propertyNode,n.getQualifiedName(),type,isEmpty);
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isEmpty=false;
if(properties.containsKey(name)){
return null;
}
type=type.restrictByNotNullOrUndefined();
if(type.isUnionType()){
for(JSType type : type.toMaybeUnionType().getAlternates()){
addInvalidatingType(alt);
}
}
properties.put(name,new RecordProperty(type,propertyNode));
return this;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordTypeBuilder,72
com.google.javascript.rhino.jstype.RecordTypeBuilder,75
com.google.javascript.rhino.jstype.RecordTypeBuilder,76
com.google.javascript.rhino.jstype.RecordTypeBuilder,85
com.google.javascript.rhino.jstype.RecordTypeBuilder,89
com.google.javascript.rhino.jstype.RecordTypeBuilder,96
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,97
========
this.type=type;
this.isEmpty=inferred;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(isTypeInferred());
this.type=type;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
this.propertyNode=value;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=varType;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=typeRegistry;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.isEmpty=inferred;
this.type=type;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
this.propertyNode=nameNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=OTHER;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.isEmpty=inExterns;
this.type=type;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=originalType;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
this.propertyNode=node;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
Preconditions.checkNotNull(propertyNode);
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type;
Preconditions.checkNotNull(type);
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propertyNode.setJSType(type);
this.type=type;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type.autoboxesTo();
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=leftType;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type.toMaybeUnionType().getRestrictedUnion(getNativeType(BOOLEAN_TYPE));
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=infoType;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=compiler;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.type=type.restrictByNotNullOrUndefined();
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
type=castType.restrictByNotNullOrUndefined();
this.type=type;
this.propertyNode=propertyNode;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordTypeBuilder,98
com.google.javascript.rhino.jstype.RecordTypeBuilder,99
Find no block!
com.google.javascript.rhino.jstype.RecordTypeBuilder,102
========
return type.restrictByNotNullOrUndefined();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return OBJECTLIT;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Assert.assertSame(type,assertValidResolve(type));
return type;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return type==null?getNativeType(UNKNOWN_TYPE):result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propertyNode.setJSType(type);
return type;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return type.getGreatestSubtype(type);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return resolvedType;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assertTypeEquals("JSType#resolve should not affect object equality",type,type);
return type;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Assert.assertEquals("JSType#resolve should not affect hash codes",type.hashCode(),type.hashCode());
return type;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordTypeBuilder,106
com.google.javascript.rhino.jstype.RecordType,79
========
Preconditions.checkState(prop.size()>0);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!otherRecord.properties.keySet().equals(properties.keySet())){
return false;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=reachingDef.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(def.reachingDef.get(property)==null){
continue;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null){
return implicitPrototype.getPropertyNode(property);
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop instanceof Number){
value=((Number)value).doubleValue();
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null){
return ;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(c.elements.get(0) instanceof Anchor&&c.elements.get(c.elements.size()-1) instanceof Anchor)){
return false;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=IR.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop!=null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==info.initialValue){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prop.removeAll(KNOWN_DEFINES);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=properties.setColumnPosition(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Lists.newArrayList().add(symbols.get(0));
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=node.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
swtich (ref.node.getParent().getType()){
case Token.ASSIGN :
return ref.node.getParent().getJSDocInfo();

case Token.VAR :
return ref.node==ref.node.getParent().getFirstChild()?ref.node.getParent().getJSDocInfo():ref.node.getJSDocInfo();

}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseHelperCode(property)==null){
continue;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(record.name.isEmpty()){
str="<anonymous>";
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
s.count++;
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null){
return implicitPrototype.isPropertyInExterns(property);
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cleanUpDuplicatedFiles(prop,parseSources(prop.keySet()));
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
result=null;
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(property)==null){
return ;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(bestShadow.count<localAssignment.count){
continue;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null||definitions.size()==0){
return ;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=references.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prop.append("function (");
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop.getSource()==null){
return null;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=graph.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=typeRegistry.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop.mutatesGlobalState()){
sideEffectInfo.resetLocalVars();
return ;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=properties.get(findRoot(property));
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(property==null){
continue;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(getCfg().hasNode(property));
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prop.numOccurrences++;
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
trimCanidatesNotMeetingMinimumRequirements();
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
trimCanidatesUsingOnCost();
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!prop.isVar()||declParent.hasOneChild(),"AST not normalized.");
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(properties.get(property)!=null&&a.newName!=null){
changed=isFrozen||!a.newName.equals(property);
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null||slotType.isAllType()||slotType.isNoType()){
return null;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=providedNames.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
Preconditions.checkNotNull(parentName.replacementNode);
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
Preconditions.checkNotNull(parentName.replacementNode);
parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);

RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
insertExprResultState=true;
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
insertExprResultState=isFrozen;
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
insertExprResultState=true;
insertExprResultState=isFrozen;

RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(p.newName!=null){
Preconditions.checkState(property.equals(p.oldName));
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=properties.get(r.namespace);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(expectedName.firstNode!=null){
error=LATE_PROVIDE_ERROR;
}else {
error=MISSING_PROVIDE_ERROR;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
if(p.newName!=null){
Preconditions.checkState(property.equals(p.oldName));
changed=isFrozen||!p.newName.equals(property);
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : properties.keySet()){
RecordProperty prop=slot.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(isFrozen||isFrozen);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.shouldRemove){
isFrozen=true;
}else {
if(current.canBeSideEffected){
isFrozen=true;
}
if(current.hasSideEffects){
isFrozen=true;
}
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop.getReferenceName()==null){
return true;
}
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop!=null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==info.initialValue){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null){
return implicitPrototype.getPropertyNode(property);
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=reachingDef.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
if(def.reachingDef.get(property)==null){
continue;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
if(bestShadow.count<localAssignment.count){
continue;
}
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=IR.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(c.elements.isEmpty()){
return false;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(c.elements.get(0) instanceof Anchor&&c.elements.get(c.elements.size()-1) instanceof Anchor)){
return false;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null||lineFragments.isEmpty()){
return null;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null){
return false;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
addChildToBack(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Lists.newArrayList().add(symbols.get(0));
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
report(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setModule(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=isFrozen;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuilder(32).append("function (");
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
addChildToFront(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
new StringBuilder(32).append("function (");
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isFrozen&&getFirstParameter()!=null){
new StringBuilder(32).append(", ");
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setString(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.setColumnPosition(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=node.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
swtich (ref.node.getParent().getType()){
case Token.ASSIGN :
return ref.node.getParent().getJSDocInfo();

case Token.VAR :
return ref.node==ref.node.getParent().getFirstChild()?ref.node.getParent().getJSDocInfo():ref.node.getJSDocInfo();

}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
appendLine(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(prop.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),"Externs zip must match our hard-coded list of externs.");
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : DEFAULT_EXTERNS_NAMES){
Lists.newArrayList().add(prop.get(key));
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setRemove(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setInline(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop.getSource()==null){
return null;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
result=null;
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null){
return implicitPrototype.isPropertyInExterns(property);
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setSource(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
swtich (prop.getType()){
case Token.SETTER_DEF :

case Token.GETTER_DEF :

case Token.STRING_KEY :
return parent.getString();

case Token.NUMBER :
return getStringValue(parent);

}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setType(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(record.name.isEmpty()){
str="<anonymous>";
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setShouldReport(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setAliased(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(TWEAK_FUNCTIONS_MAP.get(property)==null){
return ;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parseHelperCode(property)==null){
continue;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
stat.count++;
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setShouldRemove(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
Preconditions.checkArgument(getCfg().hasNode(property));
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(true);
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
if(p.newName!=null){
Preconditions.checkState(property.equals(p.oldName));
replacement=p.newName;
}else {
replacement=property;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=typeRegistry.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
s.count++;
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null){
oldPrototype.setOwnerFunction(null);
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop==null||slotType.isAllType()||slotType.isNoType()){
return null;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prop.numOccurrences++;
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setDepth(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
validateDependencies(prop.values(),parseSources(prop.keySet()).values());
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
writeDepsContent(prop,parseSources(prop.keySet()),new PrintStream(new ByteArrayOutputStream()));
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setDouble(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(findRoot(property));
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop.getReferenceName()==null){
return true;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setOptionalArg(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prop!=null&&!p.canCollapse()){
continue;
}
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
trimCanidatesUsingOnCost();
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setResolveMode(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
registry.setResolveMode(registry.getResolveMode());
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(r.namespace);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
if(expectedName.firstNode!=null){
error=LATE_PROVIDE_ERROR;
}else {
error=MISSING_PROVIDE_ERROR;
}
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=slot.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
combined.references.addAll(prop.refsBefore());
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
combined.references.addAll(newSourceCollection.references);
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
combined.references.addAll(prop.refsAfter());
super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setJSType(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
case Token.GETPROP :

setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.NAME :

super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
setLineno(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case BY_PART :

super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super(registry,null,null);
case Token.ADD :

setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.DELPROP :

super(registry,null,null);
setPrettyPrint(true);
for(String property : properties.keySet()){
RecordProperty prop=properties.get(property);
if(prop==null){
throw new IllegalStateException("RecordProperty associated with a property should not be null!");
}
defineDeclaredProperty(property,prop.getType(),prop.getPropertyNode());
}
isFrozen=true;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,67
Find no block!
com.google.javascript.rhino.jstype.RecordType,68
Find no block!
com.google.javascript.rhino.jstype.RecordType,80
com.google.javascript.rhino.jstype.RecordType,82
com.google.javascript.rhino.jstype.RecordType,83
com.google.javascript.rhino.jstype.RecordType,84
com.google.javascript.rhino.jstype.RecordType,88
com.google.javascript.rhino.jstype.RecordType,89
Find no block!
com.google.javascript.rhino.jstype.RecordType,92
com.google.javascript.rhino.jstype.RecordType,93
Find no block!
com.google.javascript.rhino.jstype.RecordType,122
========
return registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return registry.getNativeObjectType(JSTypeNative.NO_TYPE);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,128
========
if(!inferred){
properties.put(propertyName,type);
}
if(isFrozen){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,132
========
if(!mayHaveSecondarySideEffects){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
return ;
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!dropStub){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
nameDefinitionMultimap.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
properties.put(propertyName,new ExternalNameOnlyDefinition(propertyNode));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!recognizedAnnotations){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
properties.put(propertyName,Annotation.NOT_IMPLEMENTED);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions){
throwsDescriptions.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!throwsDescriptions){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
throwsDescriptions.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
properties.put(type,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
properties.put(propertyName,propertyName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
properties.put(type,propertyName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
return true;
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters){
parameters.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
parameters.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
return true;
properties.put(propertyName,propertyName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters){
return true;
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
return true;
parameters.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!parameters){
return true;
parameters.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props){
props.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!props){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
props.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!reachingDef){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!extraTracingStatistics){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!skipRenaming){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
if(properties.isInvalidatingType(type)){
invalidate();
return false;
}
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!instanceType){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!typesToSkip){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!externedNames){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
stringNodesToRename.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!foundInterfaceProperty){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!unflowable){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!nonLocalInferredSlot){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
if(type==null){
type=getNativeType(UNKNOWN_TYPE);
}
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!declaredOverride){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isValidValue){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inferred){
compiler.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!superClassHasProperty){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!addSuccess){
properties.put(propertyName,type);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,133
com.google.javascript.rhino.jstype.RecordType,136
========
if(isFrozen){
return false;
}
if(!inferred){
properties.put(propertyName,type);
}
if(getImplicitPrototype()!=null&&getImplicitPrototype().hasOwnDeclaredProperty(propertyName)){
return false;
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isFrozen){
return true;
}
if(!inferred){
properties.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isFrozen){
documentation.throwsDescriptions.put(type,propertyName);
return false;
}
if(!inferred){
properties.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
if(isFrozen){
return false;
}
if(!inferred){
properties.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isFrozen){
return false;
}
if(!isValidValue){
properties.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isFrozen){
return false;
}
if(!inferred){
compiler.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(!current.renameMap.containsKey(propertyName));
if(isFrozen){
return false;
}
if(!inferred){
properties.put(propertyName,type);
}
return super.defineProperty(propertyName,type,inferred,propertyNode);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,272
========
if(type!=null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
properties.put(entry.getKey(),config.name);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
mappedPaths.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(p.newName!=null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(p.newName!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
properties.put(entry.getKey(),p.newName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
return resolvedType;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
return false;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
nameGenerator.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
assignments.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
referenceInfo=new ReferenceCollection();
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
info=new NamedInfo();
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
fs=new FunctionState();
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
jsn=new JsName();
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType!=null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
props.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
return true;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info.siblingToInsertVarDeclBefore==null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info.siblingToInsertVarDeclBefore!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
parentForNewVarDecl.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
stat=new Stat();
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
return ;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==resolvedType){
return ;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=null){
return ;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
return ;
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
globalNames.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeNewDecl.type==Ref.Type.SET_FROM_GLOBAL){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(maybeNewDecl.type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=Ref.Type.SET_FROM_GLOBAL){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=resolvedType){
typeRegistry.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==resolvedType){
typeRegistry.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null){
typeRegistry.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=null){
typeRegistry.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
typeRegistry.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type.autoboxesTo()!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(leftLiterals.toBooleanOutcomes!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
handleUnresolvedType(t,true);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(p.newName!=null){
properties.put(entry.getKey(),p.newName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(p.newName!=resolvedType){
properties.put(entry.getKey(),p.newName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type!=null){
properties.put(entry.getKey(),p.newName);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type==resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=null){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(info.siblingToInsertVarDeclBefore==null){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(info.siblingToInsertVarDeclBefore!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
parentForNewVarDecl.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(!info.isAliased){
continue;
}
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type==null){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isFrozen=false;
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),config.name);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=safeResolve(returnType,t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
handleUnresolvedType(t,true);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
type=resolvedType;
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(!type.isReturn()){
return false;
}
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(resolvedType);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
return scope;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
type=type.restrictByNotNullOrUndefined();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=castType.restrictByNotNullOrUndefined();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(isFrozen||resolvedType!=null);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null||!isInterestingValue(value)){
continue;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!type.keySet().equals(resolvedType)){
return false;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=typeRegistry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setResolvedTypeInternal(this);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType!=null){
maybeTypeOfThis=maybeTypeOfThis.restrictByNotNullOrUndefined();
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type.isUnknownType()||type.isUnionType()){
return false;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
type.remove();
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(type.getLValue()));
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(state.out.size()==state.out.size());
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
symbol=addSymbol("this",resolvedType,false,scope,t.getScopeRoot());
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
symbol=resolvedType==null?null:getSymbolForTypeHelper(resolvedType,true);
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
replacement=p.newName;
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isFrozen=true;
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=resolveInternal(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType.setResolvedTypeInternal(resolveResult);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
type.addChildToBack(newStringNode(resolvedType));
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!resolvedType.contains("%s")){
throw new FlagUsageException("No %s placeholder in module wrapper: \'"+wrapper);
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null){
return null;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolveViaProperties(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.resolveInternal(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isResolved()){
finishPropertyContinuations();
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.RecordType,273
com.google.javascript.rhino.jstype.RecordType,274
com.google.javascript.rhino.jstype.RecordType,275
com.google.javascript.rhino.jstype.RecordType,278
Find no block!
com.google.javascript.rhino.jstype.RecordType,279
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(entry.getValue()==null){
continue;
}
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(b.reachingDef.containsKey(entry.getKey())){
Definition resolvedType=b.reachingDef.get(entry.getKey());
}
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(entry.getValue()==null){
continue;
}
if(b.reachingDef.containsKey(entry.getKey())){
Definition resolvedType=b.reachingDef.get(entry.getKey());
}

JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
type=(EnumElementType)elementsType.resolve(t,scope);
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type==resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=null){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(info.siblingToInsertVarDeclBefore==null){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(info.siblingToInsertVarDeclBefore!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
parentForNewVarDecl.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(!info.isAliased){
continue;
}
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type==null){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isFrozen=true;
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=resolveInternal(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType.setResolvedTypeInternal(resolveResult);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
isFrozen=false;
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=safeResolve(returnType,t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),config.name);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
handleUnresolvedType(t,true);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setResolvedTypeInternal(this);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType!=null){
maybeTypeOfThis=maybeTypeOfThis.restrictByNotNullOrUndefined();
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
type=resolvedType;
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(!type.isReturn()){
return false;
}
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(resolvedType);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null){
return scope;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
type=type.restrictByNotNullOrUndefined();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolvedType=castType.restrictByNotNullOrUndefined();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
reportCodeChange();
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(isFrozen||resolvedType!=null);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resolveViaProperties(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.resolveInternal(t,scope);
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isResolved()){
finishPropertyContinuations();
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null||!isInterestingValue(value)){
continue;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!type.keySet().equals(resolvedType)){
return false;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(getSimplifiedName(type.getLValue()));
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(state.out.size()==state.out.size());
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type.isUnknownType()||type.isUnionType()){
return false;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
type.remove();
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
symbol=addSymbol("this",resolvedType,false,scope,t.getScopeRoot());
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
symbol=resolvedType==null?null:getSymbolForTypeHelper(resolvedType,true);
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
replacement=p.newName;
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
type.addChildToBack(newStringNode(resolvedType));
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!resolvedType.contains("%s")){
throw new FlagUsageException("No %s placeholder in module wrapper: \'"+wrapper);
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case Token.EQUALS :

for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
entry.setAnnotation(new BranchedFlowState<L>(createInitialEstimateLattice(),Lists.newArrayList()));
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(Map.Entry<String,JSType> entry : properties.entrySet()){
if(!entry.getSource().getValue().isReturn()||entry.getSource().getValue().getFirstChild()==null||!entry.getSource().getValue().getFirstChild().isThis()){
return ;
}
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(type==null||slotType.isAllType()||slotType.isNoType()){
return null;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(resolvedType==null){
return null;
}
for(Map.Entry<String,JSType> entry : properties.entrySet()){
JSType type=entry.getValue();
JSType resolvedType=type.resolve(t,scope);
if(type!=resolvedType){
properties.put(entry.getKey(),resolvedType);
}
}
return super.resolveInternal(t,scope);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
com.google.javascript.rhino.jstype.PrototypeObjectType,356
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
return Sets.newHashSet("prototype");
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addInvalidatingType(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
instanceType=current.getOwnerFunction().getInstanceType();
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propNames=Sets.newHashSet(implicitPrototypeFallback.getOwnPropertyNames());
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
instanceType=current.getOwnerFunction().getInstanceType();
propNames=Sets.newHashSet(implicitPrototypeFallback.getOwnPropertyNames());

propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.add(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(propertyNames.size()==state.out.size());
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.join(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
return ;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.put(className,MAX_PRETTY_PRINTED_PROPERTIES);
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setResolvedTypeInternal(this);
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.or(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
progress=progressRange.initialValue;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
p.visited=false;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propertyNames.addAll(getMainOptimizationLoop());
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resultSet.names.addAll(fromNameAliasSet.names);
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
collectionTime+=propertyNames.getCollectionTime();
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current!=null){
implicitPrototype.collectPropertyNames(propertyNames);
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
return getDefaultExterns();
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.checkState(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkNotNull(propertyNames,"\"replacements\" is null.");
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&MAX_PRETTY_PRINTED_PROPERTIES<propertyNames.size();current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propertyNames.addAll(getCodeRemovingPasses());
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(options.inlineFunctions||options.inlineLocalFunctions){
propertyNames.add(inlineFunctions);
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Iterables.addAll(Sets.newTreeSet(ALPHA),ownerFunction.getAllImplementedInterfaces());
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!(c.elements.get(0) instanceof Anchor&&c.elements.get(c.elements.size()-1) instanceof Anchor)){
return false;
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
isBleedingIntoScope=false;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current!=null){
Property current.getSlot(className)=implicitPrototype.getSlot(className);
if(prop!=null){
return prop;
}
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
generatedDependencyInfoFromSource=true;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
break;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current!=null){
return implicitPrototype.isPropertyInExterns(className);
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current!=null){
return implicitPrototype.getPropertyNode(className);
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(propertyNames.size()>0);
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
propertyNames.add(createEmptyPass("beforeModuleMotion"));
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.newTreeSet(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.truncateEvents();
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.truncateOutstandingEvents();
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(MAX_PRETTY_PRINTED_PROPERTIES<propertyNames.size(),"Invalid mapping reference");
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES+=propertyNames.size()-1;
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
isAliased=true;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
return true;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
isAliased=true;
return true;

propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(implicitPrototypeFallback.getImplicitPrototype()!=null){
return getPropertyDeprecationInfo(implicitProto,className);
}
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
computeRelatedTypes(ownerFunction.getInstanceType());
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkArgument(isConstructor()||isInterface());
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
info=new StringInfo(propertyNames.size());
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.append(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
MAX_PRETTY_PRINTED_PROPERTIES--;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.write(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES+=MAX_PRETTY_PRINTED_PROPERTIES;
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
value=MAX_PRETTY_PRINTED_PROPERTIES>>>6;
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nodeB.size+=nodeA.size;
for(ObjectType current=this;current!=null&&!current.isNativeObjectType()&&propertyNames.size()<=MAX_PRETTY_PRINTED_PROPERTIES;current=current.getImplicitPrototype()){
propertyNames.addAll(current.getOwnPropertyNames());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
break;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.append(i);
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.append(getDouble());
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
hexSize=2;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
hexSize=4;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
MAX_PRETTY_PRINTED_PROPERTIES++;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
lineLength=0;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
MAX_PRETTY_PRINTED_PROPERTIES++;
lineLength=0;

sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" * ");
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('\n');
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(' ');
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
appendDebugInfo(sb);
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(Base64.toBase64(MAX_PRETTY_PRINTED_PROPERTIES));
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(className);
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
if(className.length()==0){
return sb.substring(0,builder.length()-1);
}
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("  ");
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>MAX_INTERATIONS){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.join(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
LineMapEncoder.encodeEntry(new StringBuilder(),MAX_PRETTY_PRINTED_PROPERTIES,MAX_PRETTY_PRINTED_PROPERTIES,i);
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
return ;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES+=1;
if(i>0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.report(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
iArgumentType=getJSType(sb.getChildAtIndex(MAX_PRETTY_PRINTED_PROPERTIES+1)).restrictByNotNullOrUndefined().collapseUnion().toObjectType();
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=0){
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.checkState(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
removed=true;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
removed=true;
break;

sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
i+=2;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
k+=MAX_PRETTY_PRINTED_PROPERTIES-i;
sb.append(", ");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==1){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(i);
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(className);
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES++;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!prettyPrint&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isEscaped&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
if(null==sb){
sb=new StringBuilder(className.length()+16);
}
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
pos=MAX_PRETTY_PRINTED_PROPERTIES;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
if(null==sb){
sb=new StringBuilder(className.length()+16);
}
pos=MAX_PRETTY_PRINTED_PROPERTIES;

sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(']');
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(getDouble());
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
hexSize=2;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
hexSize=4;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
MAX_PRETTY_PRINTED_PROPERTIES++;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
lineLength=0;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
MAX_PRETTY_PRINTED_PROPERTIES++;
lineLength=0;

sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&className.length()==2){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!inverted&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(' '<=sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)&&sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)<='~'&&sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)!=i&&sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)!='\\'){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(' '<=sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)&&c<='~'&&c!=i&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&sb.charAt(MAX_PRETTY_PRINTED_PROPERTIES)!='\\'){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=null&&p.newName!=null){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=null&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&p.newName!=null){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.checkState(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
replacement=p.newName;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(sb.length()>0){
sb.append('.');
}
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" ");
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
className=className;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=2&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_PRETTY_PRINTED_PROPERTIES>16&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('\n');
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ignoreStar&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((isWordChar(i)||c=='\\')&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
append(className);
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
prevLineStartPosition=MAX_PRETTY_PRINTED_PROPERTIES;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append('\n');
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
lineStartPosition=sb.length();
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
prevLineStartPosition=MAX_PRETTY_PRINTED_PROPERTIES;
sb.append('\n');
lineLength=0;
MAX_PRETTY_PRINTED_PROPERTIES++;
lineStartPosition=sb.length();

sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
lineLength=0;
MAX_PRETTY_PRINTED_PROPERTIES++;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
LineMapEncoder.encodeEntry(new StringBuilder(),MAX_PRETTY_PRINTED_PROPERTIES,MAX_PRETTY_PRINTED_PROPERTIES,i);
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if('0'<=i&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
className=className.substring(0,i);
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_PRETTY_PRINTED_PROPERTIES==baseFragments.length&&MAX_PRETTY_PRINTED_PROPERTIES==targetFragments.length){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_PRETTY_PRINTED_PROPERTIES==baseFragments.length&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&MAX_PRETTY_PRINTED_PROPERTIES==targetFragments.length){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==targetFragments.length){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==length){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
closeEntry(MAX_PRETTY_PRINTED_PROPERTIES,i-MAX_PRETTY_PRINTED_PROPERTIES);
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
removed=true;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&MAX_PRETTY_PRINTED_PROPERTIES==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==max){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.shouldRemove&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.report(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
iArgumentType=getJSType(sb.getChildAtIndex(MAX_PRETTY_PRINTED_PROPERTIES+1)).restrictByNotNullOrUndefined().collapseUnion().toObjectType();
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.join(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_PRETTY_PRINTED_PROPERTIES<MAX_PRETTY_PRINTED_PROPERTIES&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==end){
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
i+=2;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
k+=MAX_PRETTY_PRINTED_PROPERTIES-i;
sb.append(", ...");
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" min=").append(MAX_PRETTY_PRINTED_PROPERTIES).append(", max=").append(MAX_PRETTY_PRINTED_PROPERTIES);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
delta=tracer.extraTracingValues[i];
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(property);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(Token.name(i));
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
hexSize=2;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
hexSize=4;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
swtich (MAX_PRETTY_PRINTED_PROPERTIES){
default :
value=lookupProperty(MAX_PRETTY_PRINTED_PROPERTIES).toString();
break;

}
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
sb.append(property);
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
sb.append(']');
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
swtich (MAX_PRETTY_PRINTED_PROPERTIES){
default :
value=lookupProperty(MAX_PRETTY_PRINTED_PROPERTIES).toString();
break;

}
sb.append(property);
sb.append(']');

if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property.charAt(MAX_PRETTY_PRINTED_PROPERTIES));
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(error.description);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('\n');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(info.numOccurrences);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
sb.append('\n');
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('[');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(']');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" (");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(property!=null){
sb.append(sourceName);
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>0){
sb.append('#');
buf.append(lineNumber);
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(')');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
sb.append("\n");
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(INDENT);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" [label=\"");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(error.lineNumber);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(error.sourceName).append(":");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!forAnnotations){
property=LINE_NUMBER.matcher(descriptionFirstLine).replaceAll(":");
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("  ").append(property);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prettyPrint){
sb.append('^');
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('[');
sb.append(property);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(" {\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("node [color=lightblue2, style=filled];\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(i);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
protectHex=true;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.add(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("}\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
firstAlternate=false;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("(");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(")");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
start=-1;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
start=i+1;
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
MAX_PRETTY_PRINTED_PROPERTIES++;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
start=i+1;
MAX_PRETTY_PRINTED_PROPERTIES++;

if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("# This is a list of legacy warnings that have yet to be fixed.\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=null){
sb.append("# When you fix any of these warnings, run "+generatorTarget);
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(JSError property : propertyNames){
TreeMultimap.create().put(warning.getType(),formatWarning(warning,forAnnotations));
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('/');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
appendSourceCode(sb);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("</li>");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("</ul></li>");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(i&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(false);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("function (");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!implicitPrototypeFallback.isUnknownType()){
if(isConstructor()){
sb.append("new:");
}else {
b.append("this:");
}
b.append(implicitPrototypeFallback.toStringHelper(forAnnotations));
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
appendArgString(sb,call.parameters.getFirstChild(),forAnnotations);
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
p=call.parameters.getFirstChild().getNext();
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
appendArgString(sb,call.parameters.getFirstChild(),forAnnotations);
p=call.parameters.getFirstChild().getNext();

if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("): ");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(call.returnType.toStringHelper(forAnnotations));
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPrettyPrint(true);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(className);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i+className.length()!=className.length()){
sb.append(wrapper.substring(suffixStart));
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(INDENT);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES+=property.length();
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
appendAnnotation(sb,"extends",implicitPrototypeFallback.toAnnotationString());
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
i++;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("Pure functions:\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("\n");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
value=i>>>6;
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.deleteCharAt(sb.length()-1);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(")\\s*\\((.*?)\\)");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append("  ");
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(Strings.repeat(" ",i-Integer.toString(MAX_PRETTY_PRINTED_PROPERTIES).length()));
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(MAX_PRETTY_PRINTED_PROPERTIES);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maybeEndStatement();
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((isWordChar(i)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}else if(c=='/'&&getLastChar()=='/'){
append(" ");
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
append(property);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Preconditions.checkState(className!=null);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(Integer.toString(property.charAt(i),16));
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(property,MAX_PRETTY_PRINTED_PROPERTIES,MAX_PRETTY_PRINTED_PROPERTIES);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new CRC32().update(className.getBytes());
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append('_');
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
sb.append(Long.toHexString(serialVersionUID));
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
lineStartPosition=MAX_PRETTY_PRINTED_PROPERTIES;
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
reportLineCut(MAX_PRETTY_PRINTED_PROPERTIES,i+1,false);
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
MAX_PRETTY_PRINTED_PROPERTIES--;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
prevCutPosition=0;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
prevLineStartPosition=0;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
append(";");
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
startNewLine();
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
lineStartPosition=MAX_PRETTY_PRINTED_PROPERTIES;
reportLineCut(MAX_PRETTY_PRINTED_PROPERTIES,i+1,false);
MAX_PRETTY_PRINTED_PROPERTIES--;
prevCutPosition=0;
prevLineStartPosition=0;
append(";");
startNewLine();

if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.checkState(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb=new StringBuffer(L+3);
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.add(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
sb=null;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
lastIndex=-1;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
MAX_PRETTY_PRINTED_PROPERTIES+=property.length();
}else {
colCount=str.length()-(lastIndex+1);
}
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
lineLength=0;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
MAX_PRETTY_PRINTED_PROPERTIES++;
lineLength=0;

if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
this.firstChar=true;
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
LineMapEncoder.encodeEntry(new StringBuilder(),i,MAX_PRETTY_PRINTED_PROPERTIES,MAX_PRETTY_PRINTED_PROPERTIES);
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_PRETTY_PRINTED_PROPERTIES=i;
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(String property : propertyNames){
if(i>0){
sb.append(", ");
}
sb.append(result.externExport);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if(!forAnnotations&&i==MAX_PRETTY_PRINTED_PROPERTIES){
sb.append(", ...");
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_2/closure/closure_25_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
