java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 7bbddc22 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 7bbddc22:350b2b1a..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Math-29b........................................ OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 3
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3
PURIFY IS TRUE
=================================================
Project : math_29	start : 19/10/28 10:19

Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector3D and Vector2D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector3D and Vector2D
Field type inconsistancy 'start' with types : Vector3D and Vector2D
Field type inconsistancy 'end' with types : Vector3D and Vector2D
readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/math/29.txtTESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Running ant (compile.tests)................................................ 
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
IN COMMENT TEST CASE: /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java

# FAILING TESTS: 1
TIMEOUT : 6000000
===========
locations= [<org.apache.commons.math3.linear.OpenMapRealVector,360>, <org.apache.commons.math3.linear.OpenMapRealVector,361>, <org.apache.commons.math3.linear.OpenMapRealVector,362>, <org.apache.commons.math3.linear.OpenMapRealVector,363>, <org.apache.commons.math3.linear.OpenMapRealVector,364>, <org.apache.commons.math3.linear.OpenMapRealVector,365>, <org.apache.commons.math3.linear.OpenMapRealVector,374>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,281>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,282>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,283>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,285>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,292>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,277>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,278>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,279>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,291>, <org.apache.commons.math3.linear.OpenMapRealVector,592>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,247>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,323>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,351>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,352>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,353>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,354>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,391>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,392>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,393>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,394>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,395>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,396>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,397>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,210>, <org.apache.commons.math3.linear.RealVector,180>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,421>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,434>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,435>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,436>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,437>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,439>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,440>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,441>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,442>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,443>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,444>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,445>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,446>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,447>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,449>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,450>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,454>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,455>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,456>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,457>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,459>, <org.apache.commons.math3.linear.OpenMapRealVector,591>, <org.apache.commons.math3.linear.OpenMapRealVector,179>, <org.apache.commons.math3.linear.OpenMapRealVector,180>, <org.apache.commons.math3.linear.OpenMapRealVector,181>, <org.apache.commons.math3.linear.OpenMapRealVector,182>, <org.apache.commons.math3.linear.OpenMapRealVector,183>, <org.apache.commons.math3.linear.OpenMapRealVector,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,207>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,209>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,130>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,131>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,132>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,133>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,134>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,135>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,136>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,137>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,138>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,139>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,140>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,141>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,142>, <org.apache.commons.math3.linear.OpenMapRealVector,342>, <org.apache.commons.math3.linear.OpenMapRealVector,343>, <org.apache.commons.math3.linear.OpenMapRealVector,349>, <org.apache.commons.math3.linear.OpenMapRealVector,350>, <org.apache.commons.math3.linear.OpenMapRealVector,351>, <org.apache.commons.math3.linear.OpenMapRealVector,352>, <org.apache.commons.math3.linear.OpenMapRealVector,354>, <org.apache.commons.math3.linear.RealVector,176>, <org.apache.commons.math3.linear.RealVector,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,274>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,332>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,411>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,412>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,413>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,526>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,529>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,532>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,273>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,238>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,495>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,498>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,501>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,503>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,506>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,508>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,515>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,543>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,546>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,549>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,560>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,565>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,569>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,577>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,572>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,573>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,574>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,579>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,183>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,184>, <org.apache.commons.math3.linear.OpenMapRealVector,589>, <org.apache.commons.math3.linear.OpenMapRealVector,590>, <org.apache.commons.math3.linear.OpenMapRealVector,594>, <org.apache.commons.math3.linear.OpenMapRealVector,588>, <org.apache.commons.math3.linear.OpenMapRealVector,449>, <org.apache.commons.math3.linear.OpenMapRealVector,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,178>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,179>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,382>, <org.apache.commons.math3.linear.RealVector,194>, <org.apache.commons.math3.linear.OpenMapRealVector,140>, <org.apache.commons.math3.linear.RealVector,189>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,256>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,269>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,270>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,271>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,272>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,407>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,408>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,409>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,410>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,415>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,416>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,417>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,418>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,419>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,420>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,423>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,425>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,466>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,475>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,476>, <org.apache.commons.math3.linear.OpenMapRealVector,123>, <org.apache.commons.math3.linear.OpenMapRealVector,124>, <org.apache.commons.math3.linear.OpenMapRealVector,133>, <org.apache.commons.math3.linear.OpenMapRealVector,134>, <org.apache.commons.math3.linear.OpenMapRealVector,135>, <org.apache.commons.math3.linear.OpenMapRealVector,136>, <org.apache.commons.math3.linear.OpenMapRealVector,137>, <org.apache.commons.math3.linear.OpenMapRealVector,138>, <org.apache.commons.math3.linear.OpenMapRealVector,139>, <org.apache.commons.math3.linear.OpenMapRealVector,143>, <org.apache.commons.math3.linear.OpenMapRealVector,401>, <org.apache.commons.math3.linear.RealVector,59>, <org.apache.commons.math3.linear.RealVector,1049>, <org.apache.commons.math3.linear.SparseRealVector,25>, <org.apache.commons.math3.linear.OpenMapRealVector,220>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,100>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,101>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,117>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,118>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,119>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,120>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,121>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,122>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,123>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,124>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,150>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,153>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,154>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,155>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,156>, <org.apache.commons.math3.util.FastMath,113>, <org.apache.commons.math3.util.FastMath,126>, <org.apache.commons.math3.util.FastMath,139>, <org.apache.commons.math3.util.FastMath,158>, <org.apache.commons.math3.util.FastMath,177>, <org.apache.commons.math3.util.FastMath,196>, <org.apache.commons.math3.util.FastMath,216>, <org.apache.commons.math3.util.FastMath,235>, <org.apache.commons.math3.util.FastMath,254>, <org.apache.commons.math3.util.FastMath,275>, <org.apache.commons.math3.util.FastMath,283>, <org.apache.commons.math3.util.FastMath,286>, <org.apache.commons.math3.util.FastMath,3020>, <org.apache.commons.math3.util.FastMath,3334>, <org.apache.commons.math3.util.FastMath,3338>, <org.apache.commons.math3.util.FastMath,3342>, <org.apache.commons.math3.util.FastMath,3343>, <org.apache.commons.math3.util.FastMath,3347>, <org.apache.commons.math3.util.FastMath,3351>, <org.apache.commons.math3.util.FastMath,3361>, <org.apache.commons.math3.util.FastMath,3365>]
======================org.apache.commons.math3.linear.OpenMapRealVector,360
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
while(iter.hasNext()){
if(Double.doubleToLongBits(iter.value())!=Double.doubleToLongBits(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
entries.put(iter.key(),iter.value()/DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
d+=iter.value()*entries.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
if(iter.value()>DEFAULT_ZERO_TOLERANCE){
max=iter.value();
}
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
max+=FastMath.abs(iter.value()-res.getEntry(iter.key()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=res.getEntries().iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
if(Double.doubleToLongBits(res.getEntry(iter.key()))!=Double.doubleToLongBits(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(FastMath.abs(iter.value()-res.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-res.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
delta=iter.value()-res.getEntry(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
double FastMath.abs(iter.value())=FastMath.abs(iter.value());
max+=FastMath.abs(FastMath.abs(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE*(HALF*suma+DEFAULT_ZERO_TOLERANCE));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize++;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!iter.value().equals(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
res.setEntry(virtualSize,ZERO);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
v.setEntry(virtualSize,v.getEntry(virtualSize)/DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
++virtualSize;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.incrementCount();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(current.getIndex());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(current);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=-1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
bp[i][k]=0;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,DEFAULT_ZERO_TOLERANCE*(DEFAULT_ZERO_TOLERANCE*d5));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.addValue(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(iter.key()>=virtualSize&&iter.key()<virtualSize){
res.setEntry(iter.key()-virtualSize,iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.increment(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(vData.length);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(shouldContract()){
contract();
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
denominator=BigInteger.ONE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.v=new ArrayRealVector(new double[lhsCoefficients.length],false);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize+virtualSize)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(FastMath.abs(iter.value()-v.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-v.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=v.getEntries().iterator();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
max+=FastMath.abs(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.size()<v.entries.size()?entries.iterator():v.entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
d+=iter.value()*res.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!iter.value().equals(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+(int)(serialVersionUID^(temp>>>32));
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+virtualSize;
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*DEFAULT_ZERO_TOLERANCE;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*d2;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=ZERO;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize=virtualSize*result+virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
mapper.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
components=new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=getDimension();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current=new Entry();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setIndex(current.getIndex());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res=new ArrayRealVector(getStartPoint());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<0){
i=-i-2;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEQUENTIAL :

checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE*d3)*(DEFAULT_ZERO_TOLERANCE*d4));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE*d4)*(DEFAULT_ZERO_TOLERANCE*d5));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.getMax()>DEFAULT_ZERO_TOLERANCE||Double.isNaN(max)){
max=current.getMax();
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE+=current.getSum();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
super(virtualSize,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.virtualSize=virtualSize;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.entries=new OpenIntToDoubleHashMap(0.0);
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize<0)||(end>=getDimension())){
throw new OutOfRangeException(LocalizedFormats.INDEX,end,0,dim-1);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<virtualSize){
throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,end,start,false);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs((long)FastMath.floor(DEFAULT_ZERO_TOLERANCE)-DEFAULT_ZERO_TOLERANCE)<epsilon){
this.virtualSize=(int)a0;
this.virtualSize=1;
return ;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(DEFAULT_ZERO_TOLERANCE)){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.linear.OpenMapRealVector,361
org.apache.commons.math3.linear.OpenMapRealVector,362
org.apache.commons.math3.linear.OpenMapRealVector,363
org.apache.commons.math3.linear.OpenMapRealVector,364
org.apache.commons.math3.linear.OpenMapRealVector,365
org.apache.commons.math3.linear.OpenMapRealVector,374
org.apache.commons.math3.util.OpenIntToDoubleHashMap,281
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
keys[index]=key;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
keys[index]=key;
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=index||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==totalSize){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==length){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=index||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values=values;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=j;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(true){
p=realEigenvalues[j];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,secondaryState.length);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,perturb,out.data,0,PERTURB_SHIFT);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j>=seed.length){
j=0;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(j);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
++PERTURB_SHIFT;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int index=seed.length;i<v.length;++i){
 final long keys[index-seed.length]=keys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=0;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clear();
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=index;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=sn;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
e[j-1]=values[j]/FastMath.hypot(values[j],missingEntries)*e[j-1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[j]=FastMath.hypot(values[j],missingEntries);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=sn&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&cs;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
U[i][j]=missingEntries;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
U[i][j]=missingEntries;

j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[j+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[index]-realEigenvalues[j]+values[j]/(q-FastMath.sqrt(1+(values[j+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,282
org.apache.commons.math3.util.OpenIntToDoubleHashMap,283
org.apache.commons.math3.util.OpenIntToDoubleHashMap,285
org.apache.commons.math3.util.OpenIntToDoubleHashMap,292
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]==FREE){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==max){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==max){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(key,index)){
return true;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==high){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==n){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,277
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=findInsertionIndex(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=missingEntries;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(perturb<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=stateDim;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>perturb){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2Prime;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vi2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^(PERTURB_SHIFT^(z1<<18));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=blockWidth(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(z1<<7));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=time;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d23;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==nSing){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==solvedCols){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT+1]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==p){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=begin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==ZERO){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==initialTrustRegionRadius){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(key==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=halfOfN;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT+=PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=bdtol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==k){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=FastMath.hypot(values[index],missingEntries);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==m){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(key==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
key++;
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E7;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=key;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,278
========
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==delta){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
j+=j;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=PERTURB_SHIFT;
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=hash;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=values;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=i;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=stateDim;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==nSing){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==solvedCols){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=d;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockHeight(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=length;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=current;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=previous;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs(missingEntries)>0.001*FastMath.abs(current-missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=begin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockWidth(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=n;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=halfOfN;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=initialTrustRegionRadius;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
t=-missingEntries/A[k][k];
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=index;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=bdtol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0xe46e1700);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0x9b868000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(key>>>9)^(RESIZE_MULTIPLIER^(vM3>>>1));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=j^((PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(z1<<9));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=time;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d23;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(mask==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
mask++;
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=z2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0x93dd1400);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0xfa118000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E7;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=t;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=f;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+mask;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,279
org.apache.commons.math3.util.OpenIntToDoubleHashMap,291
org.apache.commons.math3.linear.OpenMapRealVector,592
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(entries.containsKey(index)){
entries.remove(virtualSize);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(entries.isDefaultValue(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(randomAccess.containsKey(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,247
org.apache.commons.math3.util.OpenIntToDoubleHashMap,323
========
return j<PERTURB_SHIFT?i*(i+1)/2+j:j*(j+1)/2+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return (j<<1)+j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return (j<<2)+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,351
========
if(states[index]==FREE){
return missingEntries;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return false;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=findInsertionIndex(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
hash=key;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=i&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&increment;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&factor;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=blockWidth(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=key&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=key&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=key;
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,352
org.apache.commons.math3.util.OpenIntToDoubleHashMap,353
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,354
org.apache.commons.math3.util.OpenIntToDoubleHashMap,391
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=value;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>=simplex.length){
throw new OutOfRangeException(index,0,simplex.length-1);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
System.arraycopy(keys,0,keys,0,Math.min(seed.length,v.length));
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=0;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new ArrayIndexOutOfBoundsException(index);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index+1>previous){
numElements=index+1;
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
previous=values.length;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
this.missingEntries=epsilon;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^((PERTURB_SHIFT^(vi<<16))^(PERTURB_SHIFT^(vi1<<15))^(z1<<18));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=index;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(RESIZE_MULTIPLIER^(vM1>>>8))^(z1<<7));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return new Sum().evaluate(values,PERTURB_SHIFT,PERTURB_SHIFT)/PERTURB_SHIFT+(missingEntries/PERTURB_SHIFT);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return missingEntries+(missingEntries/missingEntries);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=curr;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(d.length<PERTURB_SHIFT+size){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,392
org.apache.commons.math3.util.OpenIntToDoubleHashMap,393
org.apache.commons.math3.util.OpenIntToDoubleHashMap,394
org.apache.commons.math3.util.OpenIntToDoubleHashMap,395
org.apache.commons.math3.util.OpenIntToDoubleHashMap,396
org.apache.commons.math3.util.OpenIntToDoubleHashMap,397
org.apache.commons.math3.util.OpenIntToDoubleHashMap,210
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.linear.RealVector,180
Find no block!
org.apache.commons.math3.util.OpenIntToDoubleHashMap,421
org.apache.commons.math3.util.OpenIntToDoubleHashMap,434
========
oldKeys=new int[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=fval.length){
throw new DimensionMismatchException(xval.length,fval.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sample1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength!=sample2.length){
throw new DimensionMismatchException(n,sample2.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=init.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength<MINIMUM_PROBLEM_DIMENSION){
throw new NumberIsTooSmallException(dimension,MINIMUM_PROBLEM_DIMENSION,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=dataR.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dataR.length!=dataI.length){
throw new DimensionMismatchException(dataI.length,dataR.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=a.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert b.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=matrixT.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=y.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.length!=b.length){
throw new DimensionMismatchException(len,b.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
throw new NullArgumentException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=upperBounds.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=values.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert dataI.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=zval;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=singularValues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=variance.moment.m1;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=f.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(oldLength)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,Integer.valueOf(f.length));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=binaryRepresentation.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=c.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=seed.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=rsl;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(keys,0,keys,0,Math.min(seed.length,oldLength));
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=qrt.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=eigenvectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=p.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=pivot.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=guess.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PolynomialFunctionLagrangeForm.verifyInterpolationArray(values,values,true);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues[0]=values.clone()[0];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkSampleData(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yDotK.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=interpolator.currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.data.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,v1.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,FastMath.min(coefficients.length,p.coefficients.length),new double[oldLength],lowLength,oldLength-lowLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
computeDerivatives(missingEntries+missingEntries,values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=main.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.oldValues=secondary.clone();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=point.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=getStartPoint();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getGoalType()==GoalType.MINIMIZE){
for(int PERTURB_SHIFT=0;i<oldLength;++i){
computeObjectiveGradient(values)[i]=-r[i];
}
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=lTData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
verifyInputArray(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=rowData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,2,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<3){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,3,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=guess.length;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initializeCMA(oldValues);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=0;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=outBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mant.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys[mant.length-1]==0){
return 0;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sums.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=FastMath.PI;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=current;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=z;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=FastMath.max((int)(FastMath.min(4,FastMath.pow(missingEntries/missingEntries,0.5/abscissas.length))*n),n+1);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=observations.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0){
throw new ZeroException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=false;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
finalizeStep();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new long[components.length*(PERTURB_SHIFT+1-PERTURB_SHIFT+62)/63];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=r.length-(PERTURB_SHIFT-1-PERTURB_SHIFT)*(nvm-in+1)/2;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[PERTURB_SHIFT]>0.0){
values[in+PERTURB_SHIFT]=1.0/Math.sqrt(d[in]);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PERTURB_SHIFT>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[0]!=0.0){
throw new MathIllegalArgumentException(LocalizedFormats.FIRST_ELEMENT_NOT_ZERO,Double.valueOf(f[0]));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==1){
values[0]=0.0;
return transformed;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==4503599627370496L){
mantissa=0;
PERTURB_SHIFT++;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,435
org.apache.commons.math3.util.OpenIntToDoubleHashMap,436
========
 final int[] oldKeys=length;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int[] oldKeys=m1;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,437
========
 final double[] oldValues=length;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=begin*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=newLength*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=m1;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*sampleSize;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final double newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,439
org.apache.commons.math3.util.OpenIntToDoubleHashMap,440
org.apache.commons.math3.util.OpenIntToDoubleHashMap,441
org.apache.commons.math3.util.OpenIntToDoubleHashMap,442
org.apache.commons.math3.util.OpenIntToDoubleHashMap,443
========
if(oldStates[i]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==previous){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==stopTolX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
pointValuePair=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[j--]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
work[j--]=key;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==value){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==npt){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==N){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[1]=next;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
bandwidthInterval[1]=next;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==isav){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==v){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
i=-i-2;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=polynomials.length){
i--;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[i]=FastMath.sqrt(ltI[i]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i[newLength]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1664525l))+oldKeys[newLength]&0xffffffffl);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nh){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
realEigenvalues[i+1]-=missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=i[newLength+1]-missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(i[newLength]-missingEntries)*missingEntries+2.0*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
newLength++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
newLength++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==dimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<index;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<l;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
count+=uniCounterOffset[i]*c[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<last;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[newLength]=oldLength-count;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newLength]=oldLength-count;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
System.arraycopy(keys,0,newKeys,0,Math.min(seed.length,v.length));
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int i=seed.length;i<v.length;++i){
 final long newKeys[i-seed.length]=newKeys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=0;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldStates[index]=FULL;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<z.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<ranks.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lB.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numPoints;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<point.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==stopTolUpX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numberOfRegressors;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<special.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<variablesToInclude.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<root.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=oldLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimensionSize.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
vector[i]++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<val.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<max;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lower.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<len;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rawData.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coordinates.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=index;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dim;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==firstPointIndex){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.values.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<limit;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observations.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])>missingEntries){
maxAbsoluteValue=FastMath.abs(newValues[i]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iHeight;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<yListLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<simplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])<=Precision.EPSILON*missingEntries){
e[i]=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==bytes.length){
return ;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(newLength==bytes.length){
return ;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<series.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<end;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[i]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
list[i]=key;

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xval.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0.0){
key+=oldLength-i;
continue;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=newValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
xAug[i][0]=1.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<m;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<list.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<randomBytes.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<hash.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mant.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(result.mant[mant.length-1]!=0){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
addData(index[i][0],data[i][1]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<p.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(x[i]>1.0){
return false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mappers.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<idx;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==m){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
matrixT[i][i-2]=0.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<adiff;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<imagEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<starts;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<main.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ba[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<guess.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength>=Wmax){
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=u-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<=EXPONENTIAL_SA_QI[0]){
return missingEntries*(missingEntries+u);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mainSetDimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<n;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
itest=0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[0][i]=values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[1][i]=newValues[i]-values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[2][i]=newValues[i]-values[i]-missingEntries*oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[3][i]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<vertices.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<components.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
j+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed1.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<binCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nVars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outline.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<init.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,key,0,secondaryState.length);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rows;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
out[ranks[i].getPosition()]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<after.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==mainSetDimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
after[i]+=previous[i]+scaled[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<beta.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ltI[i]=FastMath.sqrt(values[newLength]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numTrials;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<scale.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=missingEntries*missingEntries+missingEntries-missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=FastMath.abs(oldValues[i]-values[i]);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iright;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=getMinimalIterationCount()){
 final double FastMath.abs(index[i]-missingEntries)=FastMath.abs(index[i]-missingEntries);
 final double getRelativeAccuracy()*(FastMath.abs(missingEntries)+FastMath.abs(index[i]))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,newMask,out.data,0,newLength);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coefficients.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=index[i+1]-missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(index[i]-missingEntries)*missingEntries+2.0*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[i+1]=missingEntries+missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<checkFeasableCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<values.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(newLength,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplySameType
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
i++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<high;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
IN COMMENT TEST CASE: /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java

# FAILING TESTS: 1
TIMEOUT : 6000000
===========
locations= [<org.apache.commons.math3.linear.OpenMapRealVector,360>, <org.apache.commons.math3.linear.OpenMapRealVector,361>, <org.apache.commons.math3.linear.OpenMapRealVector,362>, <org.apache.commons.math3.linear.OpenMapRealVector,363>, <org.apache.commons.math3.linear.OpenMapRealVector,364>, <org.apache.commons.math3.linear.OpenMapRealVector,365>, <org.apache.commons.math3.linear.OpenMapRealVector,374>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,281>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,282>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,283>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,285>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,292>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,277>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,278>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,279>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,291>, <org.apache.commons.math3.linear.OpenMapRealVector,592>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,247>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,323>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,351>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,352>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,353>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,354>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,391>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,392>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,393>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,394>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,395>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,396>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,397>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,210>, <org.apache.commons.math3.linear.RealVector,180>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,421>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,434>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,435>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,436>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,437>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,439>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,440>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,441>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,442>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,443>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,444>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,445>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,446>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,447>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,449>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,450>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,454>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,455>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,456>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,457>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,459>, <org.apache.commons.math3.linear.OpenMapRealVector,591>, <org.apache.commons.math3.linear.OpenMapRealVector,179>, <org.apache.commons.math3.linear.OpenMapRealVector,180>, <org.apache.commons.math3.linear.OpenMapRealVector,181>, <org.apache.commons.math3.linear.OpenMapRealVector,182>, <org.apache.commons.math3.linear.OpenMapRealVector,183>, <org.apache.commons.math3.linear.OpenMapRealVector,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,207>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,209>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,130>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,131>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,132>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,133>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,134>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,135>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,136>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,137>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,138>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,139>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,140>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,141>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,142>, <org.apache.commons.math3.linear.OpenMapRealVector,342>, <org.apache.commons.math3.linear.OpenMapRealVector,343>, <org.apache.commons.math3.linear.OpenMapRealVector,349>, <org.apache.commons.math3.linear.OpenMapRealVector,350>, <org.apache.commons.math3.linear.OpenMapRealVector,351>, <org.apache.commons.math3.linear.OpenMapRealVector,352>, <org.apache.commons.math3.linear.OpenMapRealVector,354>, <org.apache.commons.math3.linear.RealVector,176>, <org.apache.commons.math3.linear.RealVector,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,274>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,332>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,411>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,412>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,413>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,526>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,529>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,532>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,273>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,238>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,495>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,498>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,501>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,503>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,506>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,508>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,515>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,543>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,546>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,549>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,560>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,565>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,569>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,577>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,572>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,573>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,574>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,579>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,183>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,184>, <org.apache.commons.math3.linear.OpenMapRealVector,589>, <org.apache.commons.math3.linear.OpenMapRealVector,590>, <org.apache.commons.math3.linear.OpenMapRealVector,594>, <org.apache.commons.math3.linear.OpenMapRealVector,588>, <org.apache.commons.math3.linear.OpenMapRealVector,449>, <org.apache.commons.math3.linear.OpenMapRealVector,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,178>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,179>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,382>, <org.apache.commons.math3.linear.RealVector,194>, <org.apache.commons.math3.linear.OpenMapRealVector,140>, <org.apache.commons.math3.linear.RealVector,189>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,256>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,269>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,270>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,271>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,272>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,407>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,408>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,409>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,410>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,415>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,416>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,417>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,418>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,419>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,420>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,423>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,425>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,466>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,475>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,476>, <org.apache.commons.math3.linear.OpenMapRealVector,123>, <org.apache.commons.math3.linear.OpenMapRealVector,124>, <org.apache.commons.math3.linear.OpenMapRealVector,133>, <org.apache.commons.math3.linear.OpenMapRealVector,134>, <org.apache.commons.math3.linear.OpenMapRealVector,135>, <org.apache.commons.math3.linear.OpenMapRealVector,136>, <org.apache.commons.math3.linear.OpenMapRealVector,137>, <org.apache.commons.math3.linear.OpenMapRealVector,138>, <org.apache.commons.math3.linear.OpenMapRealVector,139>, <org.apache.commons.math3.linear.OpenMapRealVector,143>, <org.apache.commons.math3.linear.OpenMapRealVector,401>, <org.apache.commons.math3.linear.RealVector,59>, <org.apache.commons.math3.linear.RealVector,1049>, <org.apache.commons.math3.linear.SparseRealVector,25>, <org.apache.commons.math3.linear.OpenMapRealVector,220>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,100>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,101>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,117>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,118>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,119>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,120>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,121>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,122>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,123>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,124>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,150>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,153>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,154>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,155>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,156>, <org.apache.commons.math3.util.FastMath,113>, <org.apache.commons.math3.util.FastMath,126>, <org.apache.commons.math3.util.FastMath,139>, <org.apache.commons.math3.util.FastMath,158>, <org.apache.commons.math3.util.FastMath,177>, <org.apache.commons.math3.util.FastMath,196>, <org.apache.commons.math3.util.FastMath,216>, <org.apache.commons.math3.util.FastMath,235>, <org.apache.commons.math3.util.FastMath,254>, <org.apache.commons.math3.util.FastMath,275>, <org.apache.commons.math3.util.FastMath,283>, <org.apache.commons.math3.util.FastMath,286>, <org.apache.commons.math3.util.FastMath,3020>, <org.apache.commons.math3.util.FastMath,3334>, <org.apache.commons.math3.util.FastMath,3338>, <org.apache.commons.math3.util.FastMath,3342>, <org.apache.commons.math3.util.FastMath,3343>, <org.apache.commons.math3.util.FastMath,3347>, <org.apache.commons.math3.util.FastMath,3351>, <org.apache.commons.math3.util.FastMath,3361>, <org.apache.commons.math3.util.FastMath,3365>]
======================org.apache.commons.math3.linear.OpenMapRealVector,360
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
while(iter.hasNext()){
if(Double.doubleToLongBits(iter.value())!=Double.doubleToLongBits(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
entries.put(iter.key(),iter.value()/DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
d+=iter.value()*entries.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
if(iter.value()>DEFAULT_ZERO_TOLERANCE){
max=iter.value();
}
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
max+=FastMath.abs(iter.value()-res.getEntry(iter.key()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=res.getEntries().iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
if(Double.doubleToLongBits(res.getEntry(iter.key()))!=Double.doubleToLongBits(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(FastMath.abs(iter.value()-res.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-res.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
delta=iter.value()-res.getEntry(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
double FastMath.abs(iter.value())=FastMath.abs(iter.value());
max+=FastMath.abs(FastMath.abs(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE*(HALF*suma+DEFAULT_ZERO_TOLERANCE));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize++;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!iter.value().equals(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
res.setEntry(virtualSize,ZERO);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
v.setEntry(virtualSize,v.getEntry(virtualSize)/DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
++virtualSize;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.incrementCount();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(current.getIndex());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(current);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=-1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
bp[i][k]=0;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,DEFAULT_ZERO_TOLERANCE*(DEFAULT_ZERO_TOLERANCE*d5));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.addValue(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(iter.key()>=virtualSize&&iter.key()<virtualSize){
res.setEntry(iter.key()-virtualSize,iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.increment(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(vData.length);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(shouldContract()){
contract();
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
denominator=BigInteger.ONE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.v=new ArrayRealVector(new double[lhsCoefficients.length],false);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize+virtualSize)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(FastMath.abs(iter.value()-v.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-v.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=v.getEntries().iterator();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
max+=FastMath.abs(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.size()<v.entries.size()?entries.iterator():v.entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
d+=iter.value()*res.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!iter.value().equals(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+(int)(serialVersionUID^(temp>>>32));
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+virtualSize;
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*DEFAULT_ZERO_TOLERANCE;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*d2;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=ZERO;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize=virtualSize*result+virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
mapper.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
components=new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=getDimension();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current=new Entry();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setIndex(current.getIndex());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res=new ArrayRealVector(getStartPoint());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<0){
i=-i-2;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEQUENTIAL :

checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE*d3)*(DEFAULT_ZERO_TOLERANCE*d4));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE*d4)*(DEFAULT_ZERO_TOLERANCE*d5));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.getMax()>DEFAULT_ZERO_TOLERANCE||Double.isNaN(max)){
max=current.getMax();
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE+=current.getSum();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
super(virtualSize,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.virtualSize=virtualSize;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.entries=new OpenIntToDoubleHashMap(0.0);
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize<0)||(end>=getDimension())){
throw new OutOfRangeException(LocalizedFormats.INDEX,end,0,dim-1);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<virtualSize){
throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,end,start,false);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs((long)FastMath.floor(DEFAULT_ZERO_TOLERANCE)-DEFAULT_ZERO_TOLERANCE)<epsilon){
this.virtualSize=(int)a0;
this.virtualSize=1;
return ;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(DEFAULT_ZERO_TOLERANCE)){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.linear.OpenMapRealVector,361
org.apache.commons.math3.linear.OpenMapRealVector,362
org.apache.commons.math3.linear.OpenMapRealVector,363
org.apache.commons.math3.linear.OpenMapRealVector,364
org.apache.commons.math3.linear.OpenMapRealVector,365
org.apache.commons.math3.linear.OpenMapRealVector,374
org.apache.commons.math3.util.OpenIntToDoubleHashMap,281
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
keys[index]=key;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
keys[index]=key;
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=index||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==totalSize){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==length){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=index||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values=values;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=j;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(true){
p=realEigenvalues[j];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,secondaryState.length);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,perturb,out.data,0,PERTURB_SHIFT);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j>=seed.length){
j=0;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(j);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
++PERTURB_SHIFT;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int index=seed.length;i<v.length;++i){
 final long keys[index-seed.length]=keys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=0;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clear();
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=index;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=sn;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
e[j-1]=values[j]/FastMath.hypot(values[j],missingEntries)*e[j-1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[j]=FastMath.hypot(values[j],missingEntries);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=sn&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&cs;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
U[i][j]=missingEntries;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
U[i][j]=missingEntries;

j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[j+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[index]-realEigenvalues[j]+values[j]/(q-FastMath.sqrt(1+(values[j+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,282
org.apache.commons.math3.util.OpenIntToDoubleHashMap,283
org.apache.commons.math3.util.OpenIntToDoubleHashMap,285
org.apache.commons.math3.util.OpenIntToDoubleHashMap,292
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]==FREE){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==max){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==max){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(key,index)){
return true;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==high){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==n){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,277
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=findInsertionIndex(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=missingEntries;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(perturb<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=stateDim;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>perturb){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2Prime;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vi2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^(PERTURB_SHIFT^(z1<<18));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=blockWidth(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(z1<<7));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=time;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d23;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==nSing){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==solvedCols){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT+1]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==p){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=begin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==ZERO){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==initialTrustRegionRadius){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(key==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=halfOfN;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT+=PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=bdtol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==k){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=FastMath.hypot(values[index],missingEntries);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==m){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(key==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
key++;
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E7;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=key;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,278
========
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==delta){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
j+=j;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=PERTURB_SHIFT;
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=hash;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=values;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=i;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=stateDim;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==nSing){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==solvedCols){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=d;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockHeight(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=length;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=current;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=previous;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs(missingEntries)>0.001*FastMath.abs(current-missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=begin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockWidth(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=n;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=halfOfN;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=initialTrustRegionRadius;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
t=-missingEntries/A[k][k];
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=index;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=bdtol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0xe46e1700);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0x9b868000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(key>>>9)^(RESIZE_MULTIPLIER^(vM3>>>1));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=j^((PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(z1<<9));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=time;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d23;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(mask==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
mask++;
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=z2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0x93dd1400);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0xfa118000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E7;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=t;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=f;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+mask;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,279
org.apache.commons.math3.util.OpenIntToDoubleHashMap,291
org.apache.commons.math3.linear.OpenMapRealVector,592
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(entries.containsKey(index)){
entries.remove(virtualSize);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(entries.isDefaultValue(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(randomAccess.containsKey(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,247
org.apache.commons.math3.util.OpenIntToDoubleHashMap,323
========
return j<PERTURB_SHIFT?i*(i+1)/2+j:j*(j+1)/2+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return (j<<1)+j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return (j<<2)+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,351
========
if(states[index]==FREE){
return missingEntries;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return false;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=findInsertionIndex(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
hash=key;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=i&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&increment;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&factor;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=blockWidth(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=key&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=key&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=key;
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,352
org.apache.commons.math3.util.OpenIntToDoubleHashMap,353
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,354
org.apache.commons.math3.util.OpenIntToDoubleHashMap,391
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=value;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>=simplex.length){
throw new OutOfRangeException(index,0,simplex.length-1);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
System.arraycopy(keys,0,keys,0,Math.min(seed.length,v.length));
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=0;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new ArrayIndexOutOfBoundsException(index);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index+1>previous){
numElements=index+1;
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
previous=values.length;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
this.missingEntries=epsilon;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^((PERTURB_SHIFT^(vi<<16))^(PERTURB_SHIFT^(vi1<<15))^(z1<<18));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=index;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(RESIZE_MULTIPLIER^(vM1>>>8))^(z1<<7));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return new Sum().evaluate(values,PERTURB_SHIFT,PERTURB_SHIFT)/PERTURB_SHIFT+(missingEntries/PERTURB_SHIFT);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return missingEntries+(missingEntries/missingEntries);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=curr;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(d.length<PERTURB_SHIFT+size){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,392
org.apache.commons.math3.util.OpenIntToDoubleHashMap,393
org.apache.commons.math3.util.OpenIntToDoubleHashMap,394
org.apache.commons.math3.util.OpenIntToDoubleHashMap,395
org.apache.commons.math3.util.OpenIntToDoubleHashMap,396
org.apache.commons.math3.util.OpenIntToDoubleHashMap,397
org.apache.commons.math3.util.OpenIntToDoubleHashMap,210
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.linear.RealVector,180
Find no block!
org.apache.commons.math3.util.OpenIntToDoubleHashMap,421
org.apache.commons.math3.util.OpenIntToDoubleHashMap,434
========
oldKeys=new int[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=fval.length){
throw new DimensionMismatchException(xval.length,fval.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sample1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength!=sample2.length){
throw new DimensionMismatchException(n,sample2.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=init.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength<MINIMUM_PROBLEM_DIMENSION){
throw new NumberIsTooSmallException(dimension,MINIMUM_PROBLEM_DIMENSION,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=dataR.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dataR.length!=dataI.length){
throw new DimensionMismatchException(dataI.length,dataR.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=a.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert b.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=matrixT.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=y.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.length!=b.length){
throw new DimensionMismatchException(len,b.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
throw new NullArgumentException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=upperBounds.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=values.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert dataI.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=zval;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=singularValues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=variance.moment.m1;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=f.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(oldLength)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,Integer.valueOf(f.length));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=binaryRepresentation.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=c.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=seed.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=rsl;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(keys,0,keys,0,Math.min(seed.length,oldLength));
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=qrt.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=eigenvectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=p.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=pivot.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=guess.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PolynomialFunctionLagrangeForm.verifyInterpolationArray(values,values,true);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues[0]=values.clone()[0];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkSampleData(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yDotK.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=interpolator.currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.data.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,v1.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,FastMath.min(coefficients.length,p.coefficients.length),new double[oldLength],lowLength,oldLength-lowLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
computeDerivatives(missingEntries+missingEntries,values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=main.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.oldValues=secondary.clone();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=point.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=getStartPoint();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getGoalType()==GoalType.MINIMIZE){
for(int PERTURB_SHIFT=0;i<oldLength;++i){
computeObjectiveGradient(values)[i]=-r[i];
}
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=lTData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
verifyInputArray(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=rowData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,2,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<3){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,3,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=guess.length;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initializeCMA(oldValues);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=0;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=outBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mant.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys[mant.length-1]==0){
return 0;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sums.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=FastMath.PI;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=current;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=z;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=FastMath.max((int)(FastMath.min(4,FastMath.pow(missingEntries/missingEntries,0.5/abscissas.length))*n),n+1);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=observations.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0){
throw new ZeroException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=false;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
finalizeStep();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new long[components.length*(PERTURB_SHIFT+1-PERTURB_SHIFT+62)/63];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=r.length-(PERTURB_SHIFT-1-PERTURB_SHIFT)*(nvm-in+1)/2;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[PERTURB_SHIFT]>0.0){
values[in+PERTURB_SHIFT]=1.0/Math.sqrt(d[in]);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PERTURB_SHIFT>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[0]!=0.0){
throw new MathIllegalArgumentException(LocalizedFormats.FIRST_ELEMENT_NOT_ZERO,Double.valueOf(f[0]));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==1){
values[0]=0.0;
return transformed;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==4503599627370496L){
mantissa=0;
PERTURB_SHIFT++;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,435
org.apache.commons.math3.util.OpenIntToDoubleHashMap,436
========
 final int[] oldKeys=length;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int[] oldKeys=m1;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,437
========
 final double[] oldValues=length;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=begin*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=newLength*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=m1;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*sampleSize;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final double newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,439
org.apache.commons.math3.util.OpenIntToDoubleHashMap,440
org.apache.commons.math3.util.OpenIntToDoubleHashMap,441
org.apache.commons.math3.util.OpenIntToDoubleHashMap,442
org.apache.commons.math3.util.OpenIntToDoubleHashMap,443
========
if(oldStates[i]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==previous){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==stopTolX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
pointValuePair=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[j--]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
work[j--]=key;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==value){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==npt){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==N){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[1]=next;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
bandwidthInterval[1]=next;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==isav){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==v){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
i=-i-2;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=polynomials.length){
i--;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[i]=FastMath.sqrt(ltI[i]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i[newLength]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1664525l))+oldKeys[newLength]&0xffffffffl);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nh){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
realEigenvalues[i+1]-=missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=i[newLength+1]-missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(i[newLength]-missingEntries)*missingEntries+2.0*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
newLength++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
newLength++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==dimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<index;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<l;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
count+=uniCounterOffset[i]*c[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<last;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[newLength]=oldLength-count;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newLength]=oldLength-count;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
System.arraycopy(keys,0,newKeys,0,Math.min(seed.length,v.length));
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int i=seed.length;i<v.length;++i){
 final long newKeys[i-seed.length]=newKeys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=0;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldStates[index]=FULL;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<z.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<ranks.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lB.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numPoints;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<point.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==stopTolUpX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numberOfRegressors;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<special.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<variablesToInclude.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<root.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=oldLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimensionSize.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
vector[i]++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<val.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<max;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lower.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<len;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rawData.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coordinates.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=index;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dim;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==firstPointIndex){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.values.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<limit;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observations.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])>missingEntries){
maxAbsoluteValue=FastMath.abs(newValues[i]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iHeight;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<yListLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<simplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])<=Precision.EPSILON*missingEntries){
e[i]=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==bytes.length){
return ;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(newLength==bytes.length){
return ;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<series.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<end;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[i]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
list[i]=key;

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xval.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0.0){
key+=oldLength-i;
continue;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=newValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
xAug[i][0]=1.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<m;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<list.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<randomBytes.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<hash.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mant.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(result.mant[mant.length-1]!=0){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
addData(index[i][0],data[i][1]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<p.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(x[i]>1.0){
return false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mappers.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<idx;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==m){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
matrixT[i][i-2]=0.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<adiff;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<imagEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<starts;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<main.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ba[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<guess.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength>=Wmax){
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=u-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<=EXPONENTIAL_SA_QI[0]){
return missingEntries*(missingEntries+u);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mainSetDimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<n;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
itest=0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[0][i]=values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[1][i]=newValues[i]-values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[2][i]=newValues[i]-values[i]-missingEntries*oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[3][i]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<vertices.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<components.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
j+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed1.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<binCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nVars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outline.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<init.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,key,0,secondaryState.length);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rows;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
out[ranks[i].getPosition()]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<after.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==mainSetDimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
after[i]+=previous[i]+scaled[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<beta.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ltI[i]=FastMath.sqrt(values[newLength]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numTrials;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<scale.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=missingEntries*missingEntries+missingEntries-missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=FastMath.abs(oldValues[i]-values[i]);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iright;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=getMinimalIterationCount()){
 final double FastMath.abs(index[i]-missingEntries)=FastMath.abs(index[i]-missingEntries);
 final double getRelativeAccuracy()*(FastMath.abs(missingEntries)+FastMath.abs(index[i]))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,newMask,out.data,0,newLength);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coefficients.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=index[i+1]-missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(index[i]-missingEntries)*missingEntries+2.0*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[i+1]=missingEntries+missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<checkFeasableCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<values.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(newLength,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
i++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<high;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<virtualSize;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newLength+1>newLength){
numElements=index+1;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>=internalArray.length){
expandTo(startIndex+(index+1));
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength+newLength]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<n;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,newMask);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,newLength);
MatrixUtils.checkColumnIndex(this,newMask);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lastI;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mu;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(newLength);
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]!=iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
oldStates[index]=FULL;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=newMask;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldStates[index]=FULL;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
oldStates[index]=FULL;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=i-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<index;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<l;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
count+=uniCounterOffset[i]*c[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<last;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[newLength]=oldLength-count;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newLength]=oldLength-count;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
System.arraycopy(keys,0,newKeys,0,Math.min(seed.length,v.length));
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int i=seed.length;i<v.length;++i){
 final long newKeys[i-seed.length]=newKeys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newMask=0;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<parameters.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
this.newMask=-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<ranks.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<z.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<lB.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<x.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numPoints;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<in.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<point.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<this.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<special.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<root.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==stopTolUpX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<variablesToInclude.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numberOfRegressors;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.oldKeys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<val.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=oldLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<len;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<coordinates.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<rawData.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<max;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dimensionSize.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
vector[i]++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<lower.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(divisor.mant[i]<remainder[i]){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==firstPointIndex){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dim;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
pointValuePair=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<this.values.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=index;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=key-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<outCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<simplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])>missingEntries){
maxAbsoluteValue=FastMath.abs(newValues[i]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+newLength)>internalArray.length){
expandTo(startIndex+i);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newMask=newLength;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<in.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observations.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<limit;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<yListLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<iHeight;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[observations];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])<=Precision.EPSILON*missingEntries){
e[i]=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<end;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[target]=list[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[i]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[target]=list[i];
list[i]=key;

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xval.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<series.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<randomBytes.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<hash.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength==bytes.length){
return ;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(newLength==bytes.length){
return ;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
xAug[i][0]=1.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<x.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final double newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<m;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<mant.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(result.mant[mant.length-1]!=0){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++PERTURB_SHIFT;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<p.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=dm-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=trial-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
addData(index[i][0],data[i][1]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<imagEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<starts;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<mappers.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<idx;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==m){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
matrixT[i][i-2]=0.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
newLength=PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
i=PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<PERTURB_SHIFT;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<PERTURB_SHIFT;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<main.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ba[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(x[i]>1.0){
return false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<adiff;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=rsize-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=decimalPos-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT-=i;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=i;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength>=Wmax){
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
itest=0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<guess.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
missingEntries=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength]=missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<components.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=relativeSymmetryThreshold-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[length];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observed.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*d1+missingEntries*d2;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nVars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observed1.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<rows;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<outline.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
j+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<binCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
out[ranks[i].getPosition()]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<after.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==mainSetDimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
after[i]+=previous[i]+scaled[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,secondaryState.length);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<beta.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[0][i]=values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[1][i]=oldValues[i]-values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[2][i]=oldValues[i]-values[i]-missingEntries*values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[3][i]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DECREASING :

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ltI[i]=FastMath.sqrt(values[newLength]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<init.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numTrials;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=u-1;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.nextUniform(0,1)<=EXPONENTIAL_SA_QI[0]){
return missingEntries*(missingEntries+u);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=getMinimalIterationCount()){
 final double FastMath.abs(index[i]-missingEntries)=FastMath.abs(index[i]-missingEntries);
 final double getRelativeAccuracy()*(FastMath.abs(missingEntries)+FastMath.abs(index[i]))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<iright;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<scale.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<referenceSimplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(refI.length!=newLength){
throw new DimensionMismatchException(refI.length,newLength);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(PERTURB_SHIFT>0){
for(int i=0;i<newLength;i++){
confI[k]=refI[k]-ref0[k];
}
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(refI.length!=newLength){
throw new DimensionMismatchException(refI.length,newLength);
}
if(PERTURB_SHIFT>0){
for(int i=0;i<newLength;i++){
confI[k]=refI[k]-ref0[k];
}
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<coefficients.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,newLength,out.data,0,PERTURB_SHIFT);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<checkFeasableCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=missingEntries*missingEntries+missingEntries-missingEntries*missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=FastMath.abs(oldValues[i]-values[i]);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final double newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final int newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final double newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final double newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<values.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(newLength,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
i++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==N){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
mt[i]=(int)(((keys[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l)^(((keys[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l)^(l1>>30))*1664525l))+oldKeys[PERTURB_SHIFT]&0xffffffffl);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
i++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
PERTURB_SHIFT++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(PERTURB_SHIFT>=seed.length){
j=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
mt[i]=(int)(((keys[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l)^(((keys[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l)^(l1>>30))*1664525l))+oldKeys[PERTURB_SHIFT]&0xffffffffl);
i++;
PERTURB_SHIFT++;
if(PERTURB_SHIFT>=seed.length){
j=0;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<high;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PERTURB_SHIFT+1>newLength){
numElements=index+1;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+PERTURB_SHIFT)>=internalArray.length){
expandTo(startIndex+(index+1));
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[PERTURB_SHIFT+PERTURB_SHIFT]=missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<virtualSize;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=z-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=index[newLength+1]-missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(index[newLength]-missingEntries)*missingEntries+2.0*missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[newLength+1]=missingEntries+missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries-missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(newMask);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
MatrixUtils.checkColumnIndex(this,newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=x-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=s-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=r-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final double newMask=z-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=z1-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[i]=key;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(keys[index]^(z0<<2))^((keys[i]^(vi<<16))^(keys[keys[i]]^(vi1<<15))^(z1<<18));
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=index;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<mu;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs(missingEntries)>0.001*FastMath.abs(current-missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=dt2-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=dt3-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=iMax-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=dt1-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=iMed-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=iMin-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=vM2-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-RESIZE_MULTIPLIER;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeDivideMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newMask]=key;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=i^((PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(z1<<9));
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]&=0x80000000;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newMask=PERTURB_SHIFT;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[PERTURB_SHIFT]=key;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[PERTURB_SHIFT]=i;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[PERTURB_SHIFT]&=0xffff8000;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=PERTURB_SHIFT;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
checkRowIndex(PERTURB_SHIFT);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,444
org.apache.commons.math3.util.OpenIntToDoubleHashMap,445
Timeout!
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
IN COMMENT TEST CASE: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
IN COMMENT TEST CASE: /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java

# FAILING TESTS: 1
TIMEOUT : 6000000
===========
locations= [<org.apache.commons.math3.linear.OpenMapRealVector,360>, <org.apache.commons.math3.linear.OpenMapRealVector,361>, <org.apache.commons.math3.linear.OpenMapRealVector,362>, <org.apache.commons.math3.linear.OpenMapRealVector,363>, <org.apache.commons.math3.linear.OpenMapRealVector,364>, <org.apache.commons.math3.linear.OpenMapRealVector,365>, <org.apache.commons.math3.linear.OpenMapRealVector,374>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,281>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,282>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,283>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,285>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,292>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,277>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,278>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,279>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,291>, <org.apache.commons.math3.linear.OpenMapRealVector,592>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,247>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,323>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,351>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,352>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,353>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,354>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,391>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,392>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,393>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,394>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,395>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,396>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,397>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,210>, <org.apache.commons.math3.linear.RealVector,180>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,421>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,434>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,435>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,436>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,437>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,439>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,440>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,441>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,442>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,443>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,444>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,445>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,446>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,447>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,449>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,450>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,454>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,455>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,456>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,457>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,459>, <org.apache.commons.math3.linear.OpenMapRealVector,591>, <org.apache.commons.math3.linear.OpenMapRealVector,179>, <org.apache.commons.math3.linear.OpenMapRealVector,180>, <org.apache.commons.math3.linear.OpenMapRealVector,181>, <org.apache.commons.math3.linear.OpenMapRealVector,182>, <org.apache.commons.math3.linear.OpenMapRealVector,183>, <org.apache.commons.math3.linear.OpenMapRealVector,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,207>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,208>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,209>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,130>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,131>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,132>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,133>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,134>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,135>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,136>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,137>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,138>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,139>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,140>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,141>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,142>, <org.apache.commons.math3.linear.OpenMapRealVector,342>, <org.apache.commons.math3.linear.OpenMapRealVector,343>, <org.apache.commons.math3.linear.OpenMapRealVector,349>, <org.apache.commons.math3.linear.OpenMapRealVector,350>, <org.apache.commons.math3.linear.OpenMapRealVector,351>, <org.apache.commons.math3.linear.OpenMapRealVector,352>, <org.apache.commons.math3.linear.OpenMapRealVector,354>, <org.apache.commons.math3.linear.RealVector,176>, <org.apache.commons.math3.linear.RealVector,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,274>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,332>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,411>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,412>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,413>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,526>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,529>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,532>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,273>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,238>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,495>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,498>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,501>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,503>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,506>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,508>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,515>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,543>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,546>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,549>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,560>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,565>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,569>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,577>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,572>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,573>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,574>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,579>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,183>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,184>, <org.apache.commons.math3.linear.OpenMapRealVector,589>, <org.apache.commons.math3.linear.OpenMapRealVector,590>, <org.apache.commons.math3.linear.OpenMapRealVector,594>, <org.apache.commons.math3.linear.OpenMapRealVector,588>, <org.apache.commons.math3.linear.OpenMapRealVector,449>, <org.apache.commons.math3.linear.OpenMapRealVector,448>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,177>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,178>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,179>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,382>, <org.apache.commons.math3.linear.RealVector,194>, <org.apache.commons.math3.linear.OpenMapRealVector,140>, <org.apache.commons.math3.linear.RealVector,189>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,256>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,269>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,270>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,271>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,272>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,407>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,408>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,409>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,410>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,415>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,416>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,417>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,418>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,419>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,420>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,423>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,425>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,466>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,475>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,476>, <org.apache.commons.math3.linear.OpenMapRealVector,123>, <org.apache.commons.math3.linear.OpenMapRealVector,124>, <org.apache.commons.math3.linear.OpenMapRealVector,133>, <org.apache.commons.math3.linear.OpenMapRealVector,134>, <org.apache.commons.math3.linear.OpenMapRealVector,135>, <org.apache.commons.math3.linear.OpenMapRealVector,136>, <org.apache.commons.math3.linear.OpenMapRealVector,137>, <org.apache.commons.math3.linear.OpenMapRealVector,138>, <org.apache.commons.math3.linear.OpenMapRealVector,139>, <org.apache.commons.math3.linear.OpenMapRealVector,143>, <org.apache.commons.math3.linear.OpenMapRealVector,401>, <org.apache.commons.math3.linear.RealVector,59>, <org.apache.commons.math3.linear.RealVector,1049>, <org.apache.commons.math3.linear.SparseRealVector,25>, <org.apache.commons.math3.linear.OpenMapRealVector,220>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,100>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,101>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,117>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,118>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,119>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,120>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,121>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,122>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,123>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,124>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,150>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,153>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,154>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,155>, <org.apache.commons.math3.util.OpenIntToDoubleHashMap,156>, <org.apache.commons.math3.util.FastMath,113>, <org.apache.commons.math3.util.FastMath,126>, <org.apache.commons.math3.util.FastMath,139>, <org.apache.commons.math3.util.FastMath,158>, <org.apache.commons.math3.util.FastMath,177>, <org.apache.commons.math3.util.FastMath,196>, <org.apache.commons.math3.util.FastMath,216>, <org.apache.commons.math3.util.FastMath,235>, <org.apache.commons.math3.util.FastMath,254>, <org.apache.commons.math3.util.FastMath,275>, <org.apache.commons.math3.util.FastMath,283>, <org.apache.commons.math3.util.FastMath,286>, <org.apache.commons.math3.util.FastMath,3020>, <org.apache.commons.math3.util.FastMath,3334>, <org.apache.commons.math3.util.FastMath,3338>, <org.apache.commons.math3.util.FastMath,3342>, <org.apache.commons.math3.util.FastMath,3343>, <org.apache.commons.math3.util.FastMath,3347>, <org.apache.commons.math3.util.FastMath,3351>, <org.apache.commons.math3.util.FastMath,3361>, <org.apache.commons.math3.util.FastMath,3365>]
======================org.apache.commons.math3.linear.OpenMapRealVector,360
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
while(iter.hasNext()){
if(Double.doubleToLongBits(iter.value())!=Double.doubleToLongBits(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Running ant (compile.tests)................................................ 
========
while(iter.hasNext()){
entries.put(iter.key(),iter.value()/DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Running ant (compile.tests)................................................ 
========
while(iter.hasNext()){
d+=iter.value()*entries.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
if(iter.value()>DEFAULT_ZERO_TOLERANCE){
max=iter.value();
}
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
max+=FastMath.abs(iter.value()-res.getEntry(iter.key()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=res.getEntries().iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
if(Double.doubleToLongBits(res.getEntry(iter.key()))!=Double.doubleToLongBits(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(FastMath.abs(iter.value()-res.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-res.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
delta=iter.value()-res.getEntry(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
double FastMath.abs(iter.value())=FastMath.abs(iter.value());
max+=FastMath.abs(FastMath.abs(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE*(HALF*suma+DEFAULT_ZERO_TOLERANCE));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize++;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(!iter.value().equals(getEntry(iter.key()))){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
res.setEntry(virtualSize,ZERO);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
checkIndex(virtualSize);
checkIndex(virtualSize+v.getDimension()-1);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
v.setEntry(virtualSize,v.getEntry(virtualSize)/DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setEntry(virtualSize,virtualSize,DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
b=FastMath.min(DEFAULT_ZERO_TOLERANCE+1.0,DEFAULT_ZERO_TOLERANCE);
++virtualSize;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.incrementCount();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(current.getIndex());
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(current);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=-1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
state=100;
++virtualSize;
state=100;

iter.advance();
++virtualSize;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
bp[i][k]=0;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,DEFAULT_ZERO_TOLERANCE*(DEFAULT_ZERO_TOLERANCE*d5));
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.addValue(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
if(iter.key()>=virtualSize&&iter.key()<virtualSize){
res.setEntry(iter.key()-virtualSize,iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.increment(DEFAULT_ZERO_TOLERANCE);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(vData.length);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(shouldContract()){
contract();
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(iter.hasNext()){
denominator=BigInteger.ONE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.v=new ArrayRealVector(new double[lhsCoefficients.length],false);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize+virtualSize)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(FastMath.abs(iter.value()-v.getEntry(iter.key()))>DEFAULT_ZERO_TOLERANCE){
max=FastMath.abs(iter.value()-v.getEntry(iter.key()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iter=v.getEntries().iterator();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
max+=FastMath.abs(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.size()<v.entries.size()?entries.iterator():v.entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
d+=iter.value()*res.get(iter.key());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!entries.containsKey(iter.key())){
 final double iter.value()=iter.value();
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res[iter.key()]=iter.value();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().divide(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key(),iter.value().multiply(v.getEntry(iter.key())));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(!iter.value().equals(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(Double.isNaN(iter.value())){
return false;
}
if(Double.isInfinite(iter.value())){
infiniteFound=true;
}

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res=res.add(v.getEntry(iter.key()).multiply(iter.value()));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).add(iter.value()));
}else {
res.setEntry(iter.key(),iter.value());
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
if(entries.containsKey(iter.key())){
res.setEntry(iter.key(),entries.get(key).subtract(iter.value()));
}
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
res.setEntry(iter.key()+virtualSize,iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
temp=Double.doubleToLongBits(iter.value());
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+(int)(serialVersionUID^(temp>>>32));
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
virtualSize=virtualSize*result+virtualSize;
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*DEFAULT_ZERO_TOLERANCE;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE*d1+DEFAULT_ZERO_TOLERANCE*d2;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
DEFAULT_ZERO_TOLERANCE=DEFAULT_ZERO_TOLERANCE-DEFAULT_ZERO_TOLERANCE*d1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=virtualSize+1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iubd=-virtualSize-1;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=ZERO;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize=virtualSize*result+virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
mapper.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
components=new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize=getDimension();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current=new Entry();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatioPositions=new ArrayList<Integer>();
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
minRatio=DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE;
minRatioPositions=new ArrayList<Integer>();

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res.setIndex(current.getIndex());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
MatrixUtils.checkRowIndex(this,virtualSize);
MatrixUtils.checkColumnIndex(this,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize--;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
res=new ArrayRealVector(getStartPoint());
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
virtualSize<=virtualSize-virtualSize?iter.advance():null;
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
new ArrayList<BigFraction>().add(BigFraction.ONE);
new ArrayList<BigFraction>().add(new BigFraction(v-virtualSize,2));
new ArrayList<BigFraction>().add(new BigFraction(2+v,2));

iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
++virtualSize;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<0){
i=-i-2;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize>=polynomials.length){
i--;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case SEQUENTIAL :

checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE*d3)*(DEFAULT_ZERO_TOLERANCE*d4));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE=Math.max(biglsq,Math.max(ONE,DEFAULT_ZERO_TOLERANCE/DEFAULT_ZERO_TOLERANCE*d4)*(DEFAULT_ZERO_TOLERANCE*d5));
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(current.getMax()>DEFAULT_ZERO_TOLERANCE||Double.isNaN(max)){
max=current.getMax();
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DEFAULT_ZERO_TOLERANCE+=current.getSum();
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
super(virtualSize,virtualSize);
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.virtualSize=virtualSize;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.entries=new OpenIntToDoubleHashMap(0.0);
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
virtualSize++;
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((virtualSize<0)||(end>=getDimension())){
throw new OutOfRangeException(LocalizedFormats.INDEX,end,0,dim-1);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize<virtualSize){
throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,end,start,false);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs((long)FastMath.floor(DEFAULT_ZERO_TOLERANCE)-DEFAULT_ZERO_TOLERANCE)<epsilon){
this.virtualSize=(int)a0;
this.virtualSize=1;
return ;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
virtualSize+=1;
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isInfinite(DEFAULT_ZERO_TOLERANCE)){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
totalWeight+=DEFAULT_ZERO_TOLERANCE;
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(virtualSize+1>virtualSize){
numElements=index+1;
}
checkVectorDimensions(v.getDimension());
OpenMapRealVector res=new OpenMapRealVector(this);
Iterator iter=entries.iterator();
while(iter.hasNext()){
iter.advance();
res.setEntry(iter.key(),iter.value()*v.getEntry(iter.key()));
}
return res;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.linear.OpenMapRealVector,361
org.apache.commons.math3.linear.OpenMapRealVector,362
org.apache.commons.math3.linear.OpenMapRealVector,363
org.apache.commons.math3.linear.OpenMapRealVector,364
org.apache.commons.math3.linear.OpenMapRealVector,365
org.apache.commons.math3.linear.OpenMapRealVector,374
org.apache.commons.math3.util.OpenIntToDoubleHashMap,281
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
keys[index]=key;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
keys[index]=key;
states[index]=FULL;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=index||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==totalSize){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL||keys[index]==length){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]!=FULL||keys[index]==key){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=index||keys[index]==end){
break;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values=values;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=j;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
while(true){
p=realEigenvalues[j];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,secondaryState.length);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,perturb,out.data,0,PERTURB_SHIFT);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j>=seed.length){
j=0;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=(int)(serialVersionUID&0xffffffffl);
j++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
current.setIndex(j);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
++PERTURB_SHIFT;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int index=seed.length;i<v.length;++i){
 final long keys[index-seed.length]=keys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=0;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clear();
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=index;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
PERTURB_SHIFT=(key+BLOCK_SIZE-1)/BLOCK_SIZE;
j=(mask+BLOCK_SIZE-1)/BLOCK_SIZE;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=missingEntries;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=sn;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
e[j-1]=values[j]/FastMath.hypot(values[j],missingEntries)*e[j-1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[j]=FastMath.hypot(values[j],missingEntries);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=sn&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
j=probe(perturb,j);
index=j&cs;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
U[i][j]=missingEntries;
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
while(true){
t=missingEntries*U[i][j]+missingEntries*U[i][j+1];
U[i][j]=missingEntries;

j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key++;
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[j+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[index]-realEigenvalues[j]+values[j]/(q-FastMath.sqrt(1+(values[j+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
states[index]=FULL;
while(true){
previous=values[index];
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(perturb);
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,282
org.apache.commons.math3.util.OpenIntToDoubleHashMap,283
org.apache.commons.math3.util.OpenIntToDoubleHashMap,285
org.apache.commons.math3.util.OpenIntToDoubleHashMap,292
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]==FREE){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==max){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==max){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(key,index)){
return true;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(index);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==high){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==n){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==n){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,277
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==totalSize){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL&&keys[index]==length){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index&&keys[index]==end){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==totalSize){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>PERTURB_SHIFT){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return PERTURB_SHIFT;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return firstRemoved;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL||keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FULL){
return index;
}else if(states[index]!=FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL){
return changeIndexSign(index);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=findInsertionIndex(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=missingEntries;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return missingEntries;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==previous){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==key){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==end){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(perturb<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==numElements){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==low){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==n){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=stateDim;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>perturb){
numElements=index+1;
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2Prime;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vi2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^(PERTURB_SHIFT^(z1<<18));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=z2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=blockWidth(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=vM3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(z1<<7));
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[perturb]=PERTURB_SHIFT^j;
perturb=index;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=time;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMax;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=dt1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMed;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=iMin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d23;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==nSing){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==solvedCols){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT+1]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==p){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=begin;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==ZERO){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==initialTrustRegionRadius){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(key==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=halfOfN;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT+=PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=hash;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(containsKey(hash,index)){
return values[index];
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=hashOf(hash);
int j=mask;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=bdtol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=iHeight){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(j==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==k){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=FastMath.hypot(values[index],missingEntries);
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=x;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=d6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==m){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
if(key==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
key++;
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+PERTURB_SHIFT;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E3;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E4;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E5;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E6;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E7;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=scalRelativeTolerance;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=yScale;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=h;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=errSum;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
double j=tol;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E1_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_01;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_06;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_07;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_08;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_09;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_10;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_11;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=E2_12;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=errSum2;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
int perturb=perturb(hash);
int j=key;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,278
========
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
perturb=PERTURB_SHIFT;
if(states[PERTURB_SHIFT]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==delta){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]!=iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
j+=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
j+=j;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
perturb=PERTURB_SHIFT;
if(oldStates[i]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=hash;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=hashOf(hash);
int j=mask;
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=missingEntries;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=hash;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=hash;
states[index]=FULL;
int perturb=findInsertionIndex(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==previous){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==length){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=values;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=i;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(j<0){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_CONSIDER_PADDING,Integer.valueOf(hash));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(values==null){
return Double.NaN;
}
if(states[index]==index){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=stateDim;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=index;
if(states[index]==zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]!=zLen){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==p){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==iHeight){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(this.keys[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==i){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index+1>key){
numElements=index+1;
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[PERTURB_SHIFT+index]=missingEntries;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==nSing){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==solvedCols){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[j]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=d;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockHeight(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==j){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=relativeSymmetryThreshold;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=length;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=current;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=previous;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(FastMath.abs(missingEntries)>0.001*FastMath.abs(current-missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES,FastMath.abs(gap));
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=j;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=begin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=blockWidth(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=n;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=halfOfN;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=initialTrustRegionRadius;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
t=-missingEntries/A[k][k];
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vi1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=index;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int perturb=perturb(hash);
int j=bdtol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(states[index]==m){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0xe46e1700);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0x9b868000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(key>>>9)^(RESIZE_MULTIPLIER^(vM3>>>1));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=j^((PERTURB_SHIFT^(v0<<25))^(RESIZE_MULTIPLIER^(vM1>>>27))^(z1<<9));
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=v0;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0x80000000;
index=PERTURB_SHIFT;
int perturb=perturb(hash);
int j=vM1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=tMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=time;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMax;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=dt1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMed;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=iMin;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d23;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=index;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=x;
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(mask==FREE){
throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,maxIter);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
mask++;
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((values[index+1]-realEigenvalues[j])/(2*values[j])<0.0){
q=values[PERTURB_SHIFT]-realEigenvalues[index]+values[j]/(q-FastMath.sqrt(1+(values[index+1]-realEigenvalues[j])/(2*values[j])*q));
}else {
q=realEigenvalues[m]-realEigenvalues[j]+e[j]/(q+t);
}
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=z2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<7)&0x93dd1400);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT=z4^((z4<<15)&0xfa118000);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=d6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E3;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E4;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E5;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E6;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E7;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalAbsoluteTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=scalRelativeTolerance;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=yScale;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=h;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=errSum;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
double j=tol;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=t;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=f;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
if(searchIndex(missingEntries,values)==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return values[index];
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=perturb;
int perturb=perturb(hash);
int j=newLength;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=index;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=hash;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=hashOf(hash);
int j=mask;
if(containsKey(key,index)){
return doRemove(index);
}
if(states[index]==FREE){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+key;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=hash*PERTURB_SHIFT+mask;
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E1_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_01;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_06;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_07;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_08;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_09;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_10;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_11;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=E2_12;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum1;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=errSum2;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(PERTURB_SHIFT);
int perturb=perturb(hash);
int j=index;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int perturb=perturb(hash);
int j=key;
if(states[index]==FULL){
while(true){
j=probe(perturb,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,279
org.apache.commons.math3.util.OpenIntToDoubleHashMap,291
org.apache.commons.math3.linear.OpenMapRealVector,592
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(entries.containsKey(index)){
entries.remove(virtualSize);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(entries.isDefaultValue(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(randomAccess.containsKey(index)){
entries.remove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,247
org.apache.commons.math3.util.OpenIntToDoubleHashMap,323
========
return j<PERTURB_SHIFT?i*(i+1)/2+j:j*(j+1)/2+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return (j<<1)+j;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return (j<<2)+i;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,351
========
if(states[index]==FREE){
return missingEntries;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return false;
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FREE){
return index;
}else if(states[index]==FULL&&keys[index]==key){
return changeIndexSign(index);
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=findInsertionIndex(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&mask;
states[PERTURB_SHIFT]=FULL;
values[PERTURB_SHIFT]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
hash=key;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=i&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&increment;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&factor;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,PERTURB_SHIFT);
MatrixUtils.checkColumnIndex(this,key);
 final int hash=hashOf(key);
double index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(PERTURB_SHIFT);
checkColumnIndex(key);
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=z0&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[PERTURB_SHIFT]=PERTURB_SHIFT;
keys[PERTURB_SHIFT]=mask^(PERTURB_SHIFT^(z1>>>20));
keys[PERTURB_SHIFT]&=0xffff8000;
 final int hash=hashOf(key);
int index=hash&z1;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=blockWidth(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int hash=hashOf(key);
int index=key&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=key&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int hash=hashOf(key);
int index=hash&key;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[PERTURB_SHIFT]==FULL){
while(true){
hash=probe(index,j);
index=j&mask;
perturb>>=PERTURB_SHIFT;
if(states[index]!=FULL||keys[index]==key){
break;
}
}
}
 final int hash=perturb(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
hash=key;
keys=keys;
 final int hash=hashOf(key);
int index=hash&mask;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,352
org.apache.commons.math3.util.OpenIntToDoubleHashMap,353
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return doRemove(index);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.util.OpenIntToDoubleHashMap,354
org.apache.commons.math3.util.OpenIntToDoubleHashMap,391
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=value;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=PERTURB_SHIFT;
states[index]=FULL;
 final double previous=values[index];
values[index]=missingEntries;
--count;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0||index>=simplex.length){
throw new OutOfRangeException(index,0,simplex.length-1);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(index,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
System.arraycopy(keys,0,keys,0,Math.min(seed.length,v.length));
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=0;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new ArrayIndexOutOfBoundsException(index);
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index+1>previous){
numElements=index+1;
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+index)>=internalArray.length){
expandTo(startIndex+(index+1));
}
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
previous=values.length;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
this.missingEntries=epsilon;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<2))^((PERTURB_SHIFT^(vi<<16))^(PERTURB_SHIFT^(vi1<<15))^(z1<<18));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=index;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=(PERTURB_SHIFT^(z0<<11))^(PERTURB_SHIFT^(RESIZE_MULTIPLIER^(vM1>>>8))^(z1<<7));
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return new Sum().evaluate(values,PERTURB_SHIFT,PERTURB_SHIFT)/PERTURB_SHIFT+(missingEntries/PERTURB_SHIFT);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=missingEntries;
--size;
++count;
return missingEntries+(missingEntries/missingEntries);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
values[index]=curr;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[index];
if(d.length<PERTURB_SHIFT+size){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final double previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[index];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
previous=PERTURB_SHIFT;
keys[index]=0;
states[index]=REMOVED;
 final int previous=values[PERTURB_SHIFT];
values[index]=missingEntries;
--size;
++count;
return previous;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,392
org.apache.commons.math3.util.OpenIntToDoubleHashMap,393
org.apache.commons.math3.util.OpenIntToDoubleHashMap,394
org.apache.commons.math3.util.OpenIntToDoubleHashMap,395
org.apache.commons.math3.util.OpenIntToDoubleHashMap,396
org.apache.commons.math3.util.OpenIntToDoubleHashMap,397
org.apache.commons.math3.util.OpenIntToDoubleHashMap,210
UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + v.getDimension() - 1);
}

========
if(containsKey(index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(containsKey(key)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
states[index]=FULL;
values[index]=missingEntries;
if(containsKey(key,index)){
return true;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.apache.commons.math3.linear.RealVector,180
Find no block!
org.apache.commons.math3.util.OpenIntToDoubleHashMap,421
org.apache.commons.math3.util.OpenIntToDoubleHashMap,434
========
oldKeys=new int[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(xval.length!=fval.length){
throw new DimensionMismatchException(xval.length,fval.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sample1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength!=sample2.length){
throw new DimensionMismatchException(n,sample2.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=xval.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=init.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength<MINIMUM_PROBLEM_DIMENSION){
throw new NumberIsTooSmallException(dimension,MINIMUM_PROBLEM_DIMENSION,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=dataR.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(dataR.length!=dataI.length){
throw new DimensionMismatchException(dataI.length,dataR.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=a.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert b.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=matrixT.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=y.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(a.length!=b.length){
throw new DimensionMismatchException(len,b.length);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
throw new NullArgumentException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=upperBounds.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=values.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
assert dataI.length == n;

 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=zval;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=singularValues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ensureDataConformance(values,values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=variance.moment.m1;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=f.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(oldLength)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE,Integer.valueOf(f.length));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=binaryRepresentation.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=null;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=c.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=seed.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=rsl;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys==null){
setSeed(System.currentTimeMillis()+System.identityHashCode(this));
return ;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(keys,0,keys,0,Math.min(seed.length,oldLength));
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[main.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,oldValues,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=qrt.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=eigenvectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=p.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=keys;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=secondary;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=householderVectors.length;
 final int[] oldKeys=length;
 final double[] oldValues=main;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(v.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,v1.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,v1.length,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=pivot.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
resetTables(PERTURB_SHIFT);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=guess.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v2.data,0,data,PERTURB_SHIFT,oldLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[PERTURB_SHIFT+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PolynomialFunctionLagrangeForm.verifyInterpolationArray(values,values,true);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues[0]=values.clone()[0];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkSampleData(values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=length;
 final double[] oldValues=y0;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yDotK.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=data.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=interpolator.currentState.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=v1.data.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[v1.data.length+oldLength];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(v1.data,0,data,0,v1.data.length);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy((coefficients.length<p.coefficients.length)?p.coefficients:coefficients,FastMath.min(coefficients.length,p.coefficients.length),new double[oldLength],lowLength,oldLength-lowLength);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
computeDerivatives(missingEntries+missingEntries,values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=main.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.oldValues=secondary.clone();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=point.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=getStartPoint();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getGoalType()==GoalType.MINIMIZE){
for(int PERTURB_SHIFT=0;i<oldLength;++i){
computeObjectiveGradient(values)[i]=-r[i];
}
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=lTData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
verifyInputArray(values,values);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=loop.length;
 final int[] oldKeys=length;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=rowData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<2){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,2,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathArrays.checkOrder(values);
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(x.length<3){
throw new NumberIsTooSmallException(LocalizedFormats.NUMBER_OF_POINTS,x.length,3,true);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[matT.length];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=guess.length;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
initializeCMA(oldValues);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=0;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=outBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mBlock.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=mant.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keys[mant.length-1]==0){
return 0;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=sums.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=FastMath.PI;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=current;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=z;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=x.length;
 final int[] oldKeys=length;
 final double[] oldValues=length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=FastMath.max((int)(FastMath.min(4,FastMath.pow(missingEntries/missingEntries,0.5/abscissas.length))*n),n+1);
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=observations.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0){
throw new ZeroException();
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkVectorDimensions(oldLength);
 final int oldLength=vData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=false;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double oldLength=counts.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
finalizeStep();
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new long[components.length*(PERTURB_SHIFT+1-PERTURB_SHIFT+62)/63];
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldLength=r.length-(PERTURB_SHIFT-1-PERTURB_SHIFT)*(nvm-in+1)/2;
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[PERTURB_SHIFT]>0.0){
values[in+PERTURB_SHIFT]=1.0/Math.sqrt(d[in]);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!isNonSingular()){
throw new SingularMatrixException();
}
 final int oldLength=realEigenvalues.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int oldLength=yval.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(PERTURB_SHIFT>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=subMatrix.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!ArithmeticUtils.isPowerOfTwo(x.length)){
throw new MathIllegalArgumentException(LocalizedFormats.NOT_POWER_OF_TWO,Integer.valueOf(n));
}
 final int oldLength=x.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=columnData.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int oldLength=d.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MathUtils.checkNotNull(values);
if(oldLength==0){
throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[0]!=0.0){
throw new MathIllegalArgumentException(LocalizedFormats.FIRST_ELEMENT_NOT_ZERO,Double.valueOf(f[0]));
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==1){
values[0]=0.0;
return transformed;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<values[0]){
return -1;
}
 final int oldLength=val.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==4503599627370496L){
mantissa=0;
PERTURB_SHIFT++;
}
 final int oldLength=states.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldLength==0){
throw new NoDataException(LocalizedFormats.POLYNOMIAL);
}
 final int oldLength=coefficients.length;
 final int[] oldKeys=keys;
 final double[] oldValues=values;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,435
org.apache.commons.math3.util.OpenIntToDoubleHashMap,436
========
 final int[] oldKeys=length;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldValues=new double[source.keys.length];
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys=new int[source.keys.length];
System.arraycopy(source.keys,0,keys,0,source.keys.length);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int[] oldKeys=m1;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final int[] oldKeys=keys;
 final double[] oldValues=values;
 final byte[] oldStates=states;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,437
========
 final double[] oldValues=length;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=begin*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*length;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=newLength*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=m1;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new Variance().incrementAll(values,PERTURB_SHIFT,PERTURB_SHIFT);
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*sampleSize;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final double newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(Double.isNaN(missingEntries)){
throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
}
 final double[] oldValues=values;
 final byte[] oldStates=states;
 final int newLength=RESIZE_MULTIPLIER*oldLength;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.apache.commons.math3.util.OpenIntToDoubleHashMap,439
org.apache.commons.math3.util.OpenIntToDoubleHashMap,440
org.apache.commons.math3.util.OpenIntToDoubleHashMap,441
org.apache.commons.math3.util.OpenIntToDoubleHashMap,442
org.apache.commons.math3.util.OpenIntToDoubleHashMap,443
========
if(oldStates[i]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(states[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(states[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[index]==FREE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==previous){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==stopTolX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
pointValuePair=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=zLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[j--]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
work[i++]=work[j];
work[j--]=key;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==value){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==npt){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==N){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[1]=next;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
bandwidthInterval[0]=key;
bandwidthInterval[1]=next;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==j){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==isav){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==v){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
i=-i-2;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>=polynomials.length){
i--;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[i]=FastMath.sqrt(ltI[i]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i[newLength]=(int)((serialVersionUID^((serialVersionUID^(l1>>30))*1664525l))+oldKeys[newLength]&0xffffffffl);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==nh){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
realEigenvalues[i+1]-=missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=i[newLength+1]-missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(i[newLength]-missingEntries)*missingEntries+2.0*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
newLength++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
newLength++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values==null){
return Double.NaN;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(oldStates[i]==dimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<index;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<l;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
count+=uniCounterOffset[i]*c[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<last;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[newLength]=oldLength-count;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newLength]=oldLength-count;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
System.arraycopy(keys,0,newKeys,0,Math.min(seed.length,v.length));
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int i=seed.length;i<v.length;++i){
 final long newKeys[i-seed.length]=newKeys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=0;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldStates[index]=FULL;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<z.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<ranks.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lB.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numPoints;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<point.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==stopTolUpX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numberOfRegressors;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<special.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<variablesToInclude.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<root.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=oldLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dimensionSize.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
vector[i]++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<val.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<max;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lower.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<len;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rawData.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coordinates.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=index;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<dim;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==firstPointIndex){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<this.values.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<limit;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observations.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])>missingEntries){
maxAbsoluteValue=FastMath.abs(newValues[i]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<in.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
key=newLength;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iHeight;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<yListLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<simplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])<=Precision.EPSILON*missingEntries){
e[i]=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==bytes.length){
return ;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(newLength==bytes.length){
return ;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<data.length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<series.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<end;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[i]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
list[target]=list[i];
list[i]=key;

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xval.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries==0.0){
key+=oldLength-i;
continue;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=newValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
xAug[i][0]=1.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<x.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<m;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<list.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength=oldKeys[newMask];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<xLen;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<randomBytes.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<hash.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mant.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(result.mant[mant.length-1]!=0){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
addData(index[i][0],data[i][1]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<p.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(x[i]>1.0){
return false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mappers.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<idx;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==m){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
matrixT[i][i-2]=0.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<adiff;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<imagEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<starts;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<main.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ba[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<guess.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength>=Wmax){
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=newLength;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=u-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(missingEntries<=EXPONENTIAL_SA_QI[0]){
return missingEntries*(missingEntries+u);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mainSetDimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength-=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=i;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<n;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
itest=0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[0][i]=values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[1][i]=newValues[i]-values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[2][i]=newValues[i]-values[i]-missingEntries*oldValues[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[3][i]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<vertices.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<components.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
j+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<observed1.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<binCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<nVars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<outline.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<init.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,key,0,secondaryState.length);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<rows;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
out[ranks[i].getPosition()]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<after.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==mainSetDimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
after[i]+=previous[i]+scaled[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=newLength;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<beta.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ltI[i]=FastMath.sqrt(values[newLength]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=oldLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=j;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<=newLength;++i){
newMask++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<numTrials;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<scale.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=missingEntries*missingEntries+missingEntries-missingEntries*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=FastMath.abs(oldValues[i]-values[i]);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<iright;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=key;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=getMinimalIterationCount()){
 final double FastMath.abs(index[i]-missingEntries)=FastMath.abs(index[i]-missingEntries);
 final double getRelativeAccuracy()*(FastMath.abs(missingEntries)+FastMath.abs(index[i]))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,newMask,out.data,0,newLength);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<coefficients.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=index[i+1]-missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=(index[i]-missingEntries)*missingEntries+2.0*missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index[i+1]=missingEntries+missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<checkFeasableCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<values.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<n;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(newLength,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
i++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<high;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<virtualSize;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],zval[zval.length-1]);
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newLength+1>newLength){
numElements=index+1;
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((newLength+newLength)>=internalArray.length){
expandTo(startIndex+(index+1));
}
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength+newLength]=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=0;i<n;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
current.setIndex(key);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
advance(next);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkColumnIndex(this,newMask);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MatrixUtils.checkRowIndex(this,newLength);
MatrixUtils.checkColumnIndex(this,newMask);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<lastI;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<mu;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkRowIndex(newLength);
checkColumnIndex(newLength);
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<blockColumns;++i){
if(oldStates[i]!=iHeight){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
oldStates[index]=FULL;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<buf.length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=0;i<length;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
mask=newMask;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldStates[index]=FULL;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
oldKeys[index]=key;
oldStates[index]=FULL;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=i-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<index;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<l;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dimension;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==index){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
count+=uniCounterOffset[i]*c[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<last;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
keys[newLength]=oldLength-count;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
keys[newLength]=oldLength-count;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
System.arraycopy(keys,0,newKeys,0,Math.min(seed.length,v.length));
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(seed.length<v.length){
for(int i=seed.length;i<v.length;++i){
 final long newKeys[i-seed.length]=newKeys[i-seed.length];
v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
}
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newMask=0;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clear();
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<parameters.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
this.newMask=-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<ranks.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<z.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<lB.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<x.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numPoints;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<in.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<point.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<this.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<special.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==maxAbsoluteValue){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<root.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==stopTolUpX){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<variablesToInclude.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numberOfRegressors;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.oldKeys[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<val.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=oldLength;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<len;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<coordinates.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==length){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<rawData.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<max;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dimensionSize.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
vector[i]++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<lower.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(divisor.mant[i]<remainder[i]){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(a.mant[i]<b.mant[i]){
return -a.sign;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==firstPointIndex){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<dim;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
pointValuePair=key;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<this.values.oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=index;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<newLength+oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<begin;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=key-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<outCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<simplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])>missingEntries){
maxAbsoluteValue=FastMath.abs(newValues[i]);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((PERTURB_SHIFT+newLength)>internalArray.length){
expandTo(startIndex+i);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newMask=newLength;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<in.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observations.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<limit;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<yListLen;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<iHeight;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[observations];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(FastMath.abs(newValues[i])<=Precision.EPSILON*missingEntries){
e[i]=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==EPSILON){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.oldKeys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<data.length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]!=nCols){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==sp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<end;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[target]=list[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[i]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
list[target]=list[i];
list[i]=key;

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xval.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<series.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(this.keys[index]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<randomBytes.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<hash.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength==bytes.length){
return ;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
bytes[bytesOut++]=(byte)key;
if(newLength==bytes.length){
return ;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==nVars){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
xAug[i][0]=1.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<x.length;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final double newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nCols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<m;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==p){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==i){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<mant.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(result.mant[mant.length-1]!=0){
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]!=FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]==yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<xLen;++i){
if(oldStates[i]!=yLen){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==small){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<singularValues.length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==tol){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(i>0&&variablesToInclude[i]==variablesToInclude[i-1]){
variablesToInclude[i]=-1;
++PERTURB_SHIFT;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<order;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<p.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=dm-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=trial-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
addData(index[i][0],data[i][1]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(values[i]-xval[key]>xval[index]-xval[i]){
newLength=ileft;
}else {
edge=iright;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i<0){
i=-i-2;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=polynomials.length){
i--;
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<imagEigenvalues.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<starts;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<mappers.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<idx;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==m){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
matrixT[i][i-2]=0.0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(weights[i]>0.0){
containsPositiveWeight=true;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(Double.isNaN(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(values[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,values[i],i);
}
if(weights[i]>0.0){
containsPositiveWeight=true;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
newLength=PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
i=PERTURB_SHIFT;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ta[i][i]=main[i];
if(i<main.length-1){
ta[i][i+1]=secondary[i];
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<PERTURB_SHIFT;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<PERTURB_SHIFT;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<cols;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<main.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ba[i][i]=main[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==ZERO){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(x[i]>1.0){
return false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<adiff;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=rsize-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=decimalPos-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
PERTURB_SHIFT-=i;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newLength+=i;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<points.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength>=Wmax){
++newLength;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
itest=0;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<guess.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
missingEntries=missingEntries;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[newLength]=missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<components.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=relativeSymmetryThreshold-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[length];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observed.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries=missingEntries*d1+missingEntries*d2;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<nVars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<observed1.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=newLength;i<nvars;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<rows;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<outline.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final double key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
temp=b[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[i]=b[j];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
b[j]=values[i];
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
a[i]=a[j];
a[j]=values[i];
temp=b[i];
b[i]=b[j];
b[j]=values[i];

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
j+=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<binCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
out[ranks[i].getPosition()]=key;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<after.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==mainSetDimension){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
after[i]+=previous[i]+scaled[i];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
System.arraycopy(values,0,values,0,secondaryState.length);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<beta.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=PERTURB_SHIFT;i<nreq;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[0][i]=values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[1][i]=oldValues[i]-values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[2][i]=oldValues[i]-values[i]-missingEntries*values[i];
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
index[3][i]=key;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case DECREASING :

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<j;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=oldLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<newLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
newLength++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=j;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<=newLength;++i){
newLength++;
if(oldStates[i]==j){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==absolutePositivityThreshold){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ltI[i]=FastMath.sqrt(values[newLength]);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<init.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<numTrials;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
missingEntries+=u-1;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.nextUniform(0,1)<=EXPONENTIAL_SA_QI[0]){
return missingEntries*(missingEntries+u);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>=getMinimalIterationCount()){
 final double FastMath.abs(index[i]-missingEntries)=FastMath.abs(index[i]-missingEntries);
 final double getRelativeAccuracy()*(FastMath.abs(missingEntries)+FastMath.abs(index[i]))=getRelativeAccuracy()*(FastMath.abs(olds)+FastMath.abs(s));
if((delta<=rLimit)||(delta<=getAbsoluteAccuracy())){
return s;
}
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<iright;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<=oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=key;i<=newLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<scale.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<blockColumns;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<referenceSimplex.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(refI.length!=newLength){
throw new DimensionMismatchException(refI.length,newLength);
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(PERTURB_SHIFT>0){
for(int i=0;i<newLength;i++){
confI[k]=refI[k]-ref0[k];
}
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(refI.length!=newLength){
throw new DimensionMismatchException(refI.length,newLength);
}
if(PERTURB_SHIFT>0){
for(int i=0;i<newLength;i++){
confI[k]=refI[k]-ref0[k];
}
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<coefficients.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(newLength==(oldLength/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<buf.length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(buf[i]=='.'){
sig+=(400-newLength)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
newLength++;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
System.arraycopy(values,newLength,out.data,0,PERTURB_SHIFT);
}catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<checkFeasableCount;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
values[index]=missingEntries*missingEntries+missingEntries-missingEntries*missingEntries;
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
newValues[index]=FastMath.abs(oldValues[i]-values[i]);
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(i==-1){
throw new OutOfRangeException(missingEntries,values[0],xval[xval.length-1]);
}
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final double newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final int newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final double newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
if(index==-1){
throw new OutOfRangeException(missingEntries,values[0],yval[yval.length-1]);
}
 final double newMask=y-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<values.length;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==n){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==MINUS_ONE){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!Double.isNaN(this.getVcvElement(newLength,index))&&var>Double.MIN_VALUE){
return FastMath.sqrt(var);
}
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==FULL){
imagEigenvalues[i+1]=-missingEntries;
i++;

 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<realEigenvalues.length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<length;++i){
if(oldStates[i]==FULL){
i++;
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==N){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
mt[i]=(int)(((keys[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l)^(((keys[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l)^(l1>>30))*1664525l))+oldKeys[PERTURB_SHIFT]&0xffffffffl);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
i++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COUNT THESE===> Subject [_name=math, _id=29, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.apache.commons.math3.linear.SparseRealVectorTest testEbeMultiplyMixedTypes
TESTING : org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
  - org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
PERTURB_SHIFT++;
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(PERTURB_SHIFT>=seed.length){
j=0;
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
mt[i]=(int)(((keys[i]&0x7fffffffl)|((mt[i]<0)?0x80000000l:0x0l)^(((keys[i-1]&0x7fffffffl)|((mt[i-1]<0)?0x80000000l:0x0l)^(l1>>30))*1664525l))+oldKeys[PERTURB_SHIFT]&0xffffffffl);
i++;
PERTURB_SHIFT++;
if(PERTURB_SHIFT>=seed.length){
j=0;
}

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<high;++i){
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<n;++i){
if(oldStates[i]==bigstp){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
split(FACT[i],values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitReciprocal(values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitAdd(values,values,values);
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[0]=as[0];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
split(FACT[i],values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitAdd(values,values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
ys[1]=as[1];
splitMult(values,values,values);
ys[0]=as[0];
ys[1]=as[1];
split(FACT[i],values);
splitReciprocal(values,values);
if((i&2)!=0){
facts[0]=-facts[0];
facts[1]=-facts[1];
}
splitAdd(values,values,values);
ys[0]=as[0];
ys[1]=as[1];

if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final byte[] newStates=new byte[newLength];
 final int newMask=newLength-1;
for(int i=0;i<oldLength;++i){
splitMult(values,values,values);
split(FACT[i],values);
splitReciprocal(values,values);
if(oldStates[i]==FULL){
 final int key=oldKeys[i];
 final int index=findInsertionIndex(newKeys,newStates,key,newMask);
newKeys[index]=key;
newValues[index]=oldValues[i];
newStates[index]=FULL;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_3/math/math_29_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
