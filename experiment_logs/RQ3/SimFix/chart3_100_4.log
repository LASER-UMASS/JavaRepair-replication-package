java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 2227 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/SIMF OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 2227:2225............................................................. OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Chart-3b........................................ OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 1
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4
PURIFY IS FALSE
=================================================
Project : chart_3	start : 19/10/28 16:50

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/chart/3.txt#ATTEMPTS: 1

# FAILING TESTS: 1
TIMEOUT : 18000000
===========
locations= [<org.jfree.data.time.TimeSeries,1050>, <org.jfree.data.time.TimeSeries,1053>, <org.jfree.data.time.TimeSeries,1056>, <org.jfree.data.time.TimeSeries,1057>, <org.jfree.data.time.TimeSeries,1058>, <org.jfree.data.time.TimeSeries,1059>, <org.jfree.data.time.TimeSeries,1060>, <org.jfree.data.time.TimeSeries,1062>, <org.jfree.data.time.TimeSeries,1064>, <org.jfree.data.time.TimeSeries,1068>, <org.jfree.data.time.TimeSeries,1071>, <org.jfree.data.time.TimeSeries,564>, <org.jfree.data.time.TimeSeries,565>, <org.jfree.data.general.Series,243>, <org.jfree.data.general.Series,244>, <org.jfree.data.general.Series,245>, <org.jfree.data.general.Series,246>, <org.jfree.data.time.TimeSeries,345>, <org.jfree.data.time.TimeSeries,360>, <org.jfree.data.time.TimeSeries,653>, <org.jfree.data.time.TimeSeries,654>, <org.jfree.data.time.TimeSeries,666>, <org.jfree.data.time.TimeSeries,667>, <org.jfree.data.time.TimeSeries,668>, <org.jfree.data.time.TimeSeriesDataItem,121>, <org.jfree.data.time.TimeSeriesDataItem,122>, <org.jfree.data.time.TimeSeries,680>, <org.jfree.data.time.TimeSeries,681>, <org.jfree.data.time.TimeSeries,693>, <org.jfree.data.time.TimeSeries,694>, <org.jfree.data.time.TimeSeries,695>, <org.jfree.data.time.Year,171>, <org.jfree.data.time.Year,253>, <org.jfree.data.time.Year,348>, <org.jfree.data.time.Year,349>, <org.jfree.data.time.Year,350>, <org.jfree.data.time.Year,351>, <org.jfree.data.time.Year,367>, <org.jfree.data.time.Year,114>, <org.jfree.data.time.Year,115>, <org.jfree.data.time.Year,119>, <org.jfree.data.time.Year,120>, <org.jfree.data.time.Year,121>, <org.jfree.data.time.Year,211>, <org.jfree.data.time.Year,212>, <org.jfree.data.time.Year,213>, <org.jfree.data.time.Year,268>, <org.jfree.data.time.Year,269>, <org.jfree.data.time.Year,272>, <org.jfree.data.time.Year,287>, <org.jfree.data.time.Year,288>, <org.jfree.data.time.Year,291>, <org.jfree.data.time.TimeSeries,429>, <org.jfree.data.time.TimeSeries,463>, <org.jfree.data.time.TimeSeries,584>, <org.jfree.data.time.TimeSeries,603>, <org.jfree.data.time.TimeSeries,604>, <org.jfree.data.time.TimeSeries,605>, <org.jfree.data.time.TimeSeries,606>, <org.jfree.data.time.TimeSeries,878>, <org.jfree.data.time.TimeSeries,879>, <org.jfree.data.time.TimeSeries,881>, <org.jfree.data.time.TimeSeries,885>, <org.jfree.data.time.TimeSeries,1269>, <org.jfree.data.time.TimeSeries,1273>, <org.jfree.data.time.TimeSeries,1292>, <org.jfree.data.time.TimeSeries,1296>, <org.jfree.data.general.Series,315>, <org.jfree.data.general.Series,316>, <org.jfree.data.general.Series,318>, <org.jfree.data.general.Series,328>, <org.jfree.data.general.Series,329>, <org.jfree.data.general.Series,336>, <org.jfree.data.time.TimeSeries,576>, <org.jfree.data.time.TimeSeries,579>, <org.jfree.data.time.TimeSeries,580>, <org.jfree.data.time.TimeSeries,581>, <org.jfree.data.time.TimeSeries,582>, <org.jfree.data.time.TimeSeries,596>, <org.jfree.data.time.TimeSeries,597>, <org.jfree.data.time.TimeSeries,598>, <org.jfree.data.time.TimeSeries,599>, <org.jfree.data.time.TimeSeries,600>, <org.jfree.data.time.TimeSeries,626>, <org.jfree.data.time.TimeSeries,627>, <org.jfree.data.time.TimeSeries,629>, <org.jfree.data.time.TimeSeries,634>, <org.jfree.data.time.TimeSeries,637>, <org.jfree.data.time.TimeSeries,638>, <org.jfree.data.time.TimeSeries,642>, <org.jfree.data.time.TimeSeries,877>, <org.jfree.data.time.TimeSeries,892>, <org.jfree.data.time.TimeSeries,1211>, <org.jfree.data.time.TimeSeries,1212>, <org.jfree.data.time.TimeSeries,1213>, <org.jfree.data.time.TimeSeries,1214>, <org.jfree.data.time.TimeSeries,1215>, <org.jfree.data.time.TimeSeries,1217>, <org.jfree.data.time.TimeSeries,1265>, <org.jfree.data.time.TimeSeries,1266>, <org.jfree.data.time.TimeSeries,1288>, <org.jfree.data.time.TimeSeries,1289>, <org.jfree.data.time.RegularTimePeriod,71>, <org.jfree.data.time.TimeSeriesDataItem,105>, <org.jfree.data.time.TimeSeriesDataItem,106>, <org.jfree.data.time.TimeSeriesDataItem,109>, <org.jfree.data.time.TimeSeriesDataItem,110>, <org.jfree.data.time.TimeSeriesDataItem,111>, <org.jfree.data.time.TimeSeriesDataItem,112>, <org.jfree.data.time.TimeSeriesDataItem,130>, <org.jfree.data.time.TimeSeriesDataItem,141>, <org.jfree.data.time.TimeSeriesDataItem,266>, <org.jfree.data.time.TimeSeriesDataItem,268>, <org.jfree.data.time.TimeSeriesDataItem,272>, <org.jfree.data.time.TimeSeriesDataItem,273>, <org.jfree.data.event.SeriesChangeEvent,70>, <org.jfree.data.event.SeriesChangeEvent,71>, <org.jfree.data.event.SeriesChangeEvent,82>, <org.jfree.data.event.SeriesChangeEvent,83>, <org.jfree.data.event.SeriesChangeEvent,84>, <org.jfree.data.time.TimeSeries,254>, <org.jfree.data.general.Series,104>, <org.jfree.data.general.Series,105>, <org.jfree.data.general.Series,113>, <org.jfree.data.general.Series,114>, <org.jfree.data.general.Series,117>, <org.jfree.data.general.Series,118>, <org.jfree.data.general.Series,119>, <org.jfree.data.general.Series,120>, <org.jfree.data.general.Series,121>, <org.jfree.data.general.Series,122>, <org.jfree.data.time.TimeSeries,169>, <org.jfree.data.time.TimeSeries,170>, <org.jfree.data.time.TimeSeries,186>, <org.jfree.data.time.TimeSeries,187>, <org.jfree.data.time.TimeSeries,188>, <org.jfree.data.time.TimeSeries,189>, <org.jfree.data.time.TimeSeries,190>, <org.jfree.data.time.TimeSeries,191>, <org.jfree.data.time.TimeSeries,192>, <org.jfree.data.time.TimeSeries,193>, <org.jfree.data.time.TimeSeries,194>, <org.jfree.data.time.TimeSeries,195>, <org.jfree.data.general.Series,115>, <org.jfree.data.general.Series,132>, <org.jfree.data.general.Series,144>, <org.jfree.data.general.Series,145>, <org.jfree.data.general.Series,147>, <org.jfree.data.general.Series,148>, <org.jfree.data.general.Series,149>, <org.jfree.data.general.Series,150>, <org.jfree.data.general.Series,160>, <org.jfree.data.general.Series,172>, <org.jfree.data.general.Series,173>, <org.jfree.data.general.Series,174>, <org.jfree.data.general.Series,176>, <org.jfree.data.general.Series,187>, <org.jfree.data.general.Series,199>, <org.jfree.data.general.Series,200>, <org.jfree.data.general.Series,201>, <org.jfree.data.general.Series,203>, <org.jfree.data.general.Series,214>, <org.jfree.data.general.Series,258>, <org.jfree.data.general.Series,259>, <org.jfree.data.general.Series,261>, <org.jfree.data.general.Series,262>, <org.jfree.data.general.Series,264>, <org.jfree.data.general.Series,265>, <org.jfree.data.general.Series,266>, <org.jfree.data.general.Series,268>, <org.jfree.data.general.Series,269>, <org.jfree.data.general.Series,271>, <org.jfree.data.general.Series,281>, <org.jfree.data.general.Series,282>, <org.jfree.data.general.Series,284>, <org.jfree.data.general.Series,297>, <org.jfree.data.general.Series,298>, <org.jfree.data.general.Series,307>, <org.jfree.data.general.Series,308>, <org.jfree.data.general.Series,330>, <org.jfree.data.general.Series,331>, <org.jfree.data.general.Series,344>, <org.jfree.data.general.Series,345>, <org.jfree.data.general.Series,353>, <org.jfree.data.general.Series,354>, <org.jfree.data.general.Series,365>, <org.jfree.data.general.Series,367>, <org.jfree.data.time.TimeSeries,205>, <org.jfree.data.time.TimeSeries,218>, <org.jfree.data.time.TimeSeries,219>, <org.jfree.data.time.TimeSeries,220>, <org.jfree.data.time.TimeSeries,221>, <org.jfree.data.time.TimeSeries,231>, <org.jfree.data.time.TimeSeries,243>, <org.jfree.data.time.TimeSeries,244>, <org.jfree.data.time.TimeSeries,245>, <org.jfree.data.time.TimeSeries,246>, <org.jfree.data.time.TimeSeries,265>, <org.jfree.data.time.TimeSeries,277>, <org.jfree.data.time.TimeSeries,292>]
======================org.jfree.data.time.TimeSeries,1050
========
if(end<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(start<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<0){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(newline<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<0){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1053
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(include<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<INCLUDE_FIRST){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(start==SerialDate.INCLUDE_FIRST){
return (maximumItemCount>=start&&s<end);
}else if(include==SerialDate.INCLUDE_SECOND){
return (s>start&&s<=end);
}else {
return (s>start&&s<end);
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1056
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Requires start >= 0.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.startData=clone(this.startData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.endData=clone(this.endData);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesOutlineStrokeList=(StrokeList)this.seriesOutlineStrokeList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=(ArrayList)this.keys.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(ArrayList)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.indexMap=(HashMap)this.indexMap.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.DEFAULT_DOMAIN_DESCRIPTION=prefix;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=seriesParameterName;
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(end<start){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.dates=new java.util.ArrayList(this.dates);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(length<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=new java.util.ArrayList(this.keys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sectionPaints=new HashMap(this.sectionPaints);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.formatter=(NumberFormat)this.formatter.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.zValues=DataUtilities.clone(this.zValues);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data!=null){
clone.data=ArrayUtilities.clone(this.data);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.entities=new java.util.ArrayList(this.entities.size());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<position){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("\'position\' out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(series<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(series<start){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<series){
throw new IllegalArgumentException("Series index out of bounds");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(series<start){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<series){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(series<series){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<maximum){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
if(maximumItemCount<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
clone.domainAxes=new ObjectList();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
setSelectionState(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sublabels=new HashMap(this.sublabels);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.plot=null;
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XYSeries)this.data.get(start).removeChangeListener(this);
this.data.remove(start);
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(YIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(XIntervalSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if((start<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(TaskSeries)this.data.get(start).removeChangeListener(this);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=new IntervalXYDelegate((CategoryTableXYDataset)super.clone());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.listeners=new EventListenerList();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
clone.xCrosshairs=(List)ObjectUtilities.deepClone(this.xCrosshairs);
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(startIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFontMap=new HashMap(this.tickLabelFontMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelPaintMap=new HashMap(this.tickLabelPaintMap);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryLabelToolTips=new HashMap(this.categoryLabelToolTips);
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(pos<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
updateBoundsForRemovedItem((XYDataItem)this.data.remove(start));
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException("X-value already exists.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(start>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(remove<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<VERTICAL){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(position<=start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end<=start){
return end;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<newline){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
if(end>start){
return newline;
}
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
if(this.data.size()==0){
return ;
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
if(end<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException("There is no existing value for the "+"specified \'period\'.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(keyIndex<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index<start){
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new SeriesException(new StringBuffer().toString());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append("the time period ");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(end<start){
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");
new StringBuffer().append("You are attempting to add an observation for ");
new StringBuffer().append("the time period ");
new StringBuffer().append(" but the series already contains an observation");
new StringBuffer().append(" for that time period. Duplicates are not ");
new StringBuffer().append("permitted.  Try using the addOrUpdate() method.");

throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
if(newline<start){
throw new IllegalArgumentException("Requires start <= end.");
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.jfree.data.time.TimeSeries,1057
========
clone.shape=ShapeUtilities.clone(this.shape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesLinesVisible=(BooleanList)this.seriesLinesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.xDateFormat=(DateFormat)this.xDateFormat.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundRangeMarkers=(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundRangeMarkers=(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.data.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBoundsForRemovedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.frame=(BlockFrame)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getItemCount()>this.end){
XYDataItem clone=(XYDataItem)this.data.remove(0);
updateBoundsForRemovedItem(removed);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.entities.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.subplotInfo.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(index).clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
(TimeSeriesDataItem)this.data.get(index).setValue(item.getValue());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ValueDataset[])this.datasets.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listenerList=new EventListenerList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null!=null){
result=Collections.unmodifiableCollection(result);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.legendTextPaint=(PaintList)this.legendTextPaint.clone();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxis=(ValueAxis)ObjectUtilities.clone(this.rangeAxis);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.rangeAxis!=null){
clone.rangeAxis.setPlot((ThermometerPlot)super.clone());
clone.rangeAxis.addChangeListener(clone);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.paintScale=(PaintScale)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(CategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(XYDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.underlying=(GanttCategoryDataset)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.object=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxes=new ObjectList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chart.subtitles=new ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemURLGenerator instanceof PublicCloneable){
clone.legendItemURLGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemToolTipGenerator instanceof PublicCloneable){
clone.legendItemToolTipGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundAnnotations=(List)ObjectUtilities.deepClone(this.foregroundAnnotations);
clone.backgroundAnnotations=(List)ObjectUtilities.deepClone(this.backgroundAnnotations);
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxes=(ObjectList)ObjectUtilities.clone(this.rangeAxes);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone!=null){
removeLayer(existing);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=(Number)data.get(index).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervals=new java.util.ArrayList(this.intervals);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*maxY,start*maxY,width,height));
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if(item!=null){
item.setBounds(new Rectangle2D.Double(start*maxY,start*maxY,width,height));
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
toAdd=item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
copy.data=new java.util.ArrayList();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(index>=0){
return item.getObject(index);
}else {
return null;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.index=DefaultAxisEditor.getInstance(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(clone,0,new double[z.length],0,z.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
System.arraycopy(clone,0,new double[z.length],0,z.length);
clone.seriesList.add(index,new double[][]{new double[x.length],new double[y.length],new double[z.length]});

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
System.arraycopy(data[0],0,new double[x.length],0,x.length);
System.arraycopy(data[1],0,new double[y.length],0,y.length);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxH=Math.max(clone,item.getHeight());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(index>=data.size()){
break;
}
if((Block)data.get(index)!=null){
maxW=Math.max(clone,item.getWidth());
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(DEFAULT_DOMAIN_DESCRIPTION);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=np;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
d[i]=cpi.y;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
x[i]=cpi.x;
d[i]=cpi.y;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=(Number)data.get(0).doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.entities=(EntityCollection)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<seriesCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=new java.util.ArrayList(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.rows.add(item.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=new java.util.ArrayList(this.rows.size());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[1],clone)){
return false;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(!Arrays.equals((double[][])this.data.get(index)[0],(double[][])that.seriesList.get(index)[0])){
return false;
}
if(!Arrays.equals((double[][])this.data.get(index)[1],clone)){
return false;
}

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(isTickMarksVisible()){
maxY=getTickMarkOutsideLength();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureDomainAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireChartChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=item.getDomainAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
result=item.getRangeAxis(index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=last;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<last;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<n;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<n;index++){
totalWeight+=item.getWeight();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=samples;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=width;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=height;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maximumItemCount=maximumItemCount;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.maximumItemCount=maximumItemCount;
this.maximumItemCount=start;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
data.add(removeStringDelimiters(DEFAULT_DOMAIN_DESCRIPTION.substring(clone,line.length())));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<rendererCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<rendererCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBounds(item.getPeriod(),index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundRangeMarkers=cloneMarkerMap(this.backgroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);
clone.foregroundDomainMarkers=cloneMarkerMap(this.foregroundDomainMarkers);
clone.backgroundDomainMarkers=cloneMarkerMap(this.backgroundDomainMarkers);
clone.foregroundRangeMarkers=cloneMarkerMap(this.foregroundRangeMarkers);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;start<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;start<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;start<=count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;start<count;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseItemLabelGenerator=(CategoryItemLabelGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseToolTipGenerator=(CategoryToolTipGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.baseURLGenerator=(CategoryURLGenerator)item.clone();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=values.length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=length;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(values[i]<maxY){
if(maxY<0.0){
fraction=0.0;
}
binIndex=(int)(maxY*start);
if(index>=start){
binIndex=start-1;
}
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.incrementCount();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(values[i]<maxY){
if(maxY<0.0){
fraction=0.0;
}
binIndex=(int)(maxY*start);
if(index>=start){
binIndex=start-1;
}
}
item.incrementCount();

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeValue(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
removeRow(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=this.end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=cols;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rows;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=count;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.clear();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item.getDescription().equals(DEFAULT_DOMAIN_DESCRIPTION)){
result=item;
break;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.zoomRange(maxY,maxY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.zoomRange(maxY,maxY);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=entityCount;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item.getArea().contains(maxY,maxY)){
return item;
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=domainAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=rangeAxisCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.removeChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
item.configure();
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=lowerCoordinates;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=(end-start);index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=bins;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<start;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
item.handleClick(start,start,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getDomainAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
if(item!=null){
RectangleEdge clone=getRangeAxisEdge(index);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
start++;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
this.data.remove(clone);
clone.removePropertyChangeListener(this);
this.data.remove(clone);
clone.removePropertyChangeListener(this);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<itemCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maxY+=maxY;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=i;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<datasetCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.start=index;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
invalidateRangeInfo();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (compile.tests)................................................ 
========
for(int index=start;index<=end;index++){
new java.util.ArrayList().add(item.getKey());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
minval=Math.min(clone,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
maxval=Math.max(maxY,item.doubleValue());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
minval=Math.min(clone,item.doubleValue());
maxval=Math.max(maxY,item.doubleValue());

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureDomainAxes();
configureRangeAxes();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<series;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return ;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
xNumber=new Long(item.getTime());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Collections.sort(this.data);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.data.clear();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
datasetChanged(new DatasetChangeEvent(this,getDataset(index),new DatasetChangeInfo()));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.clone=Math.max(this.size,maximumItemCount+1);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.subplots=(List)ObjectUtilities.deepClone(this.subplots);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=subCategoryCount;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
maxY=direction%360;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(new NumberTick(new Double(serialVersionUID),"",TextAnchor.CENTER,TextAnchor.CENTER,0.0));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeCategoryPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeCategoryPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedDomainXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedDomainXYPlot)super.clone().getDomainAxis()!=null){
domainAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.setParent((CombinedRangeXYPlot)super.clone());
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((CombinedRangeXYPlot)super.clone().getRangeAxis()!=null){
rangeAxis.configure();
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
this.data.remove(index);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=(double[])coefficients.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index==-1){
return DEFAULT_DOMAIN_DESCRIPTION;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=lookupSectionPaint(getSectionKey(index),false);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JPanel(new BorderLayout()).setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(copy);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
copy.addChangeListener(this);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(copy);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(polygon.length%2!=0){
throw new IllegalArgumentException("The \'polygon\' array must "+"contain an even number of items.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=(double[])polygon.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
this.item=(DateFormat)dateFormat.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=prefix;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=seriesParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.DEFAULT_DOMAIN_DESCRIPTION=itemParameterName;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'seriesParameterName\' argument.");
}
if(DEFAULT_DOMAIN_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'itemParameterName\' argument.");
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Running ant (run.dev.tests)................................................ 
Running ant (compile.tests)................................................ OK
========
clone.setModifier(index);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(item==null){
return -1;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new JPanel(new BorderLayout()).add(new JScrollPane(clone));
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=4*lenX;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
repaint();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireOverlayChanged();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.minY=Double.NaN;
this.maxY=Double.NaN;
for(int index=start;index<=end;index++){
updateBoundsForAddedItem(clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=limit1;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
item.addAttributes(clone,start,index);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
start=index;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int index=start;index<=end;index++){
item.addAttributes(clone,start,index);
start=index;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item=new java.util.ArrayList();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.item.add(clone);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(index>maximumItemCount){
delete(0,count-maximum);
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<size;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ValueDataset[])this.datasets.clone();
clone.seriesNeedle=(MeterNeedle[])this.seriesNeedle.clone();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<minorTickSpaces;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<=datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int index=start;index<datasetCount;index++){
if(item!=null){
item.addChangeListener(this);
}
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
item.removeChangeListener(this);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
configureRangeAxes();
fireChangeEvent();
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
return Color.decode(DEFAULT_DOMAIN_DESCRIPTION);
}catch (NumberFormatException nfe) {
  try {
    final Field f=Color.class.getField(value);
    return (Color)f.get(null);
  }
 catch (  Exception ce) {
    return Color.black;
  }
}

for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(copy);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
copy.removeChangeListener(this);
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(copy);
fireDatasetChanged(new DatasetChangeInfo());
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
break;
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.clear();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=numberOfColumns;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>end){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
case 1 :

if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((index<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
item.removeChangeListener(this);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
this.data.remove(index);
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
minval=Math.min(Double.POSITIVE_INFINITY,clone);
maxval=Math.max(Double.NEGATIVE_INFINITY,clone);

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
index=4*lenX;
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
count+=1;
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
average+=item.doubleValue();
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<end;index++){
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.data.size()>0){
if(end>0){
average=maxY/end;
}
for(int index=start;index<=end;index++){
average+=item.doubleValue();
count+=1;
average+=item.doubleValue();
count+=1;

TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.itemLabelGeneratorList=(ObjectList)this.itemLabelGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.toolTipGeneratorList=(ObjectList)this.toolTipGeneratorList.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.legendItemLabelGenerator instanceof PublicCloneable){
clone.legendItemLabelGenerator=(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.seriesVisibleList=(BooleanList)this.seriesVisibleList.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((PiePlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.clone!=null){
clone.legendLine=ShapeUtilities.clone(this.legendLine);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesPaintList=(PaintList)this.seriesPaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesOutlinePaintList=(PaintList)this.seriesOutlinePaintList.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.categoryKeys=(Comparable[])this.categoryKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesKeys=(Comparable[])this.seriesKeys.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.startData=clone(this.startData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.endData=clone(this.endData);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.xDateFormat=(DateFormat)this.xDateFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.defaultGroup=(Comparable)KeyToGroupMap.clone(this.defaultGroup);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.groups=(List)KeyToGroupMap.clone(this.groups);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.keyToGroupMap=(Map)KeyToGroupMap.clone(this.keyToGroupMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesShapesVisible=(BooleanList)this.seriesShapesVisible.clone();
clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.keys=(ArrayList)this.keys.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.values=(ArrayList)this.values.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.domainAxes=new ObjectList();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.domainAxisLocations=(ObjectList)this.domainAxisLocations.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result.legendBar=ShapeUtilities.clone(this.legendBar);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.shape=ShapeUtilities.clone(this.shape);
clone.line=ShapeUtilities.clone(this.line);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendLine=ShapeUtilities.clone(this.legendLine);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dayFormatter=(NumberFormat)this.dayFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.secondFormatter=(NumberFormat)this.secondFormatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.values=(DefaultKeyedValues2D)this.values.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.workingCalendar=(Calendar)this.workingCalendar.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.percentFormat=(NumberFormat)this.percentFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.dateFormatter=(DateFormat)this.dateFormatter.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.numberFormat=(NumberFormat)this.numberFormat.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
if(clone.dataset!=null){
clone.dataset.addChangeListener((ThermometerPlot)super.clone());
}
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.valueFormat=(NumberFormat)this.valueFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.subrangePaint=(Paint[])this.subrangePaint.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
chart.renderingHints=(RenderingHints)this.renderingHints.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.drawingSupplier=(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.listenerList=new EventListenerList();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.pieChart=(JFreeChart)this.pieChart.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.sectionPaints=new HashMap(this.sectionPaints);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rangeAxisLocations=(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToDomainAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToRangeAxesMap=new TreeMap();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.renderers=(ObjectList)this.renderers.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervals=new java.util.ArrayList(this.intervals);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(clone.dataset!=null){
clone.dataset.addChangeListener((MeterPlot)super.clone());
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.dateFormatOverride=(DateFormat)this.dateFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.item!=null){
clone.numberFormatOverride=(NumberFormat)this.numberFormatOverride.clone();
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.legendArea=ShapeUtilities.clone(this.legendArea);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.zValues=DataUtilities.clone(this.zValues);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.timeZone=(TimeZone)this.timeZone.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.seriesFilled=(BooleanList)this.seriesFilled.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.formatter=(NumberFormat)this.formatter.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=(KeyedObjects)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.data=(KeyedObjects2D)this.data.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.underlying=(TaskSeriesCollection)this.underlying.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate=new IntervalXYDelegate(clone);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setAutoWidth(isAutoWidth());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.updateXPoints();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.keys=new java.util.ArrayList(this.keys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>index){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.dates=new java.util.ArrayList(this.dates);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.items=new java.util.ArrayList(this.items);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
TimeSeries copy=(TimeSeries)super.clone();
clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.rows=(List)ObjectUtilities.deepClone(this.rows);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.clone!=null){
clone.toolTipSeries=new java.util.ArrayList(this.toolTipSeries);
}
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone=(TimeSeriesDataItem)item.clone();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.urlSeries=new java.util.ArrayList(this.urlSeries);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.lookupTable=new java.util.ArrayList(this.lookupTable);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clone.tickUnits=new java.util.ArrayList(this.tickUnits);
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
fireSeriesChanged();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
this.data.clear();
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COUNT THESE===> Subject [_name=chart, _id=3, _ssrc=/source, _tsrc=/tests, _sbin=/build, _tbin=/build-tests, _dependency=null] org.jfree.data.time.junit.TimeSeriesTests testCreateCopy3
TESTING : org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
  - org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
fireDatasetChanged(new DatasetChangeInfo());
TimeSeries copy=(TimeSeries)super.clone();
copy.data=new java.util.ArrayList();
if(this.data.size()>0){
for(int index=start;index<=end;index++){
TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);
TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();
try{
copy.add(clone);
}catch (SeriesException e) {
  e.printStackTrace();
}

}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_100_4/chart/chart_3_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
Timeout!
