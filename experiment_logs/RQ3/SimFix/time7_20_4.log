java version "1.7.0_231"
OpenJDK Runtime Environment (rhel-2.6.19.1.el7_6-x86_64 u231-b01)
OpenJDK 64-Bit Server VM (build 24.231-b01, mixed mode)
Check out 1adb1e69 to /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j/ OK
Init local repository...................................................... OK
Tag post-fix revision...................................................... OK
Run post-checkout hook..................................................... OK
Initialize fixed program version........................................... OK
Apply patch................................................................ OK
Initialize buggy program version........................................... OK
Diff 1adb1e69:6bf5bba0..................................................... OK
Apply patch................................................................ OK
Tag pre-fix revision....................................................... OK
Check out program version: Time-7b......................................... OK
Running ant (compile)...................................................... OK
Running ant (compile.tests)................................................ OK
Running ant (compile.tests)................................................ OK
Running ant (run.dev.tests)................................................ OK
Failing tests: 2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
/home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4
PURIFY IS FALSE
=================================================
Project : time_7	start : 19/10/16 17:32

readFailedTest: path is /mnt/nfs/work1/brun/mmotwani/SimFix/d4j-info/failed_tests/time/7.txt#ATTEMPTS: 2

# FAILING TESTS: 2
TIMEOUT : 18000000
===========
locations= [<org.joda.time.DateTimeZone,910>, <org.joda.time.DateTimeZone,912>, <org.joda.time.DateTimeZone,913>, <org.joda.time.DateTimeZone,915>, <org.joda.time.DateTimeZone,928>, <org.joda.time.DateTimeZone,938>, <org.joda.time.DateTimeZone,952>, <org.joda.time.DateTimeZone,953>, <org.joda.time.DateTimeZone,955>, <org.joda.time.DateTimeZone,958>, <org.joda.time.DateTimeZone,979>, <org.joda.time.DateTimeZone,980>, <org.joda.time.DateTimeZone,981>, <org.joda.time.DateTimeZone,982>, <org.joda.time.DateTimeZone,983>, <org.joda.time.DateTimeZone,985>, <org.joda.time.DateTimeZone,1002>, <org.joda.time.DateTimeZone,1004>, <org.joda.time.DateTimeZone,1006>, <org.joda.time.DateTimeZone,1035>, <org.joda.time.DateTimeZone,1037>, <org.joda.time.DateTimeZone,1040>, <org.joda.time.chrono.AssembledChronology,133>, <org.joda.time.chrono.GJChronology,279>, <org.joda.time.chrono.GJChronology,280>, <org.joda.time.chrono.GJChronology,194>, <org.joda.time.chrono.GJChronology,204>, <org.joda.time.chrono.GJChronology,205>, <org.joda.time.chrono.GJChronology,206>, <org.joda.time.chrono.GJChronology,209>, <org.joda.time.chrono.GJChronology,219>, <org.joda.time.chrono.GJChronology,220>, <org.joda.time.chrono.GJChronology,291>, <org.joda.time.chrono.GJChronology,294>, <org.joda.time.chrono.GJChronology,305>, <org.joda.time.chrono.GJChronology,315>, <org.joda.time.chrono.GJChronology,318>, <org.joda.time.chrono.GJChronology,319>, <org.joda.time.chrono.GJChronology,395>, <org.joda.time.chrono.GJChronology,404>, <org.joda.time.chrono.GJChronology,485>, <org.joda.time.base.AbstractInstant,259>, <org.joda.time.base.AbstractInstant,260>, <org.joda.time.Instant,144>, <org.joda.time.chrono.BasicChronology,167>, <org.joda.time.chrono.BasicChronology,172>, <org.joda.time.chrono.BasicChronology,173>, <org.joda.time.chrono.BasicChronology,174>, <org.joda.time.chrono.BasicChronology,175>, <org.joda.time.chrono.BasicChronology,177>, <org.joda.time.DateTimeFieldType,378>, <org.joda.time.field.DecoratedDurationField,101>, <org.joda.time.field.FieldUtils,218>, <org.joda.time.base.BaseDateTime,223>, <org.joda.time.base.BaseDateTime,225>, <org.joda.time.base.BaseDateTime,295>, <org.joda.time.base.BaseDateTime,304>, <org.joda.time.chrono.ZonedChronology,118>, <org.joda.time.chrono.ZonedChronology,138>, <org.joda.time.chrono.ZonedChronology,139>, <org.joda.time.chrono.ZonedChronology,140>, <org.joda.time.chrono.ZonedChronology,141>, <org.joda.time.chrono.ZonedChronology,144>, <org.joda.time.chrono.ZonedChronology,403>, <org.joda.time.chrono.ZonedChronology,404>, <org.joda.time.chrono.ZonedChronology,462>, <org.joda.time.chrono.ZonedChronology,463>, <org.joda.time.chrono.ZonedChronology,464>, <org.joda.time.chrono.ZonedChronology,465>, <org.joda.time.chrono.ZonedChronology,471>, <org.joda.time.chrono.ZonedChronology,496>, <org.joda.time.chrono.ZonedChronology,500>, <org.joda.time.chrono.ZonedChronology,514>, <org.joda.time.chrono.ZonedChronology,547>, <org.joda.time.chrono.ZonedChronology,564>, <org.joda.time.format.DateTimeFormatterBuilder,549>, <org.joda.time.format.DateTimeFormatterBuilder,552>, <org.joda.time.format.DateTimeFormatterBuilder,976>, <org.joda.time.format.DateTimeFormatter,190>, <org.joda.time.format.DateTimeFormatter,193>, <org.joda.time.format.DateTimeFormatter,204>, <org.joda.time.format.DateTimeFormatter,701>, <org.joda.time.format.DateTimeFormatter,702>, <org.joda.time.format.DateTimeFormatter,706>, <org.joda.time.format.DateTimeFormatter,707>, <org.joda.time.format.DateTimeFormatter,708>, <org.joda.time.format.DateTimeFormatter,709>, <org.joda.time.format.DateTimeFormatter,710>, <org.joda.time.format.DateTimeFormatter,712>, <org.joda.time.format.DateTimeFormatter,714>, <org.joda.time.format.DateTimeFormatter,715>, <org.joda.time.format.ISODateTimeFormat,866>, <org.joda.time.format.ISODateTimeFormat,897>, <org.joda.time.format.ISODateTimeFormat,898>, <org.joda.time.format.ISODateTimeFormat,903>, <org.joda.time.format.ISODateTimeFormat,935>, <org.joda.time.format.ISODateTimeFormat,936>, <org.joda.time.format.ISODateTimeFormat,941>, <org.joda.time.format.ISODateTimeFormat,971>, <org.joda.time.format.ISODateTimeFormat,972>, <org.joda.time.format.ISODateTimeFormat,977>, <org.joda.time.format.ISODateTimeFormat,1358>, <org.joda.time.format.ISODateTimeFormat,1359>, <org.joda.time.format.ISODateTimeFormat,1365>, <org.joda.time.format.ISODateTimeFormat,1442>, <org.joda.time.format.ISODateTimeFormat,1443>, <org.joda.time.format.ISODateTimeFormat,1449>, <org.joda.time.format.ISODateTimeFormat,1653>, <org.joda.time.format.ISODateTimeFormat,1654>, <org.joda.time.format.ISODateTimeFormat,1658>, <org.joda.time.format.ISODateTimeFormat,1703>, <org.joda.time.format.ISODateTimeFormat,1704>, <org.joda.time.format.ISODateTimeFormat,1708>, <org.joda.time.format.DateTimeFormatterBuilder,2137>, <org.joda.time.format.DateTimeFormatterBuilder,2138>, <org.joda.time.format.DateTimeFormatterBuilder,2139>, <org.joda.time.format.DateTimeFormatterBuilder,2141>, <org.joda.time.format.DateTimeFormatterBuilder,2144>, <org.joda.time.format.DateTimeFormatterBuilder,2274>, <org.joda.time.format.DateTimeFormatterBuilder,1754>, <org.joda.time.format.DateTimeFormatterBuilder,1755>, <org.joda.time.format.DateTimeFormatterBuilder,1756>, <org.joda.time.format.DateTimeFormatterBuilder,1757>, <org.joda.time.format.DateTimeFormatterBuilder,1748>, <org.joda.time.format.DateTimeFormatterBuilder,1760>, <org.joda.time.format.DateTimeFormatterBuilder,1822>, <org.joda.time.IllegalFieldValueException,108>, <org.joda.time.IllegalFieldValueException,109>, <org.joda.time.IllegalFieldValueException,110>, <org.joda.time.IllegalFieldValueException,111>, <org.joda.time.IllegalFieldValueException,112>, <org.joda.time.IllegalFieldValueException,113>, <org.joda.time.IllegalFieldValueException,114>, <org.joda.time.IllegalFieldValueException,115>, <org.joda.time.IllegalFieldValueException,116>, <org.joda.time.IllegalFieldValueException,117>, <org.joda.time.IllegalFieldValueException,41>, <org.joda.time.IllegalFieldValueException,44>, <org.joda.time.IllegalFieldValueException,50>, <org.joda.time.IllegalFieldValueException,53>, <org.joda.time.IllegalFieldValueException,59>, <org.joda.time.IllegalFieldValueException,63>, <org.joda.time.IllegalFieldValueException,314>, <org.joda.time.IllegalFieldValueException,323>, <org.joda.time.IllegalFieldValueException,325>, <org.joda.time.IllegalFieldValueException,326>, <org.joda.time.IllegalFieldValueException,328>, <org.joda.time.format.DateTimeParserBucket,373>, <org.joda.time.format.DateTimeParserBucket,374>, <org.joda.time.format.DateTimeParserBucket,375>, <org.joda.time.format.DateTimeParserBucket,377>, <org.joda.time.MutableDateTime,351>, <org.joda.time.MutableDateTime,353>, <org.joda.time.DateTimeZone,175>, <org.joda.time.DateTimeZone,176>, <org.joda.time.DateTimeZone,179>, <org.joda.time.DateTimeZone,182>, <org.joda.time.DateTimeZone,183>, <org.joda.time.DateTimeZone,184>, <org.joda.time.DateTimeZone,185>, <org.joda.time.tz.DateTimeZoneBuilder,1528>, <org.joda.time.tz.DateTimeZoneBuilder,1529>, <org.joda.time.tz.DateTimeZoneBuilder,1530>, <org.joda.time.tz.DateTimeZoneBuilder,1533>, <org.joda.time.tz.DateTimeZoneBuilder,1534>, <org.joda.time.tz.DateTimeZoneBuilder,1535>, <org.joda.time.tz.DateTimeZoneBuilder,1536>, <org.joda.time.tz.DateTimeZoneBuilder,1570>, <org.joda.time.tz.DateTimeZoneBuilder,1571>, <org.joda.time.tz.DateTimeZoneBuilder,1572>, <org.joda.time.tz.DateTimeZoneBuilder,1573>, <org.joda.time.tz.DateTimeZoneBuilder,1574>, <org.joda.time.tz.CachedDateTimeZone,103>, <org.joda.time.tz.CachedDateTimeZone,140>, <org.joda.time.tz.CachedDateTimeZone,141>, <org.joda.time.tz.CachedDateTimeZone,142>, <org.joda.time.tz.CachedDateTimeZone,143>, <org.joda.time.tz.CachedDateTimeZone,144>, <org.joda.time.tz.CachedDateTimeZone,145>, <org.joda.time.tz.CachedDateTimeZone,146>, <org.joda.time.tz.CachedDateTimeZone,148>, <org.joda.time.tz.CachedDateTimeZone,152>, <org.joda.time.tz.CachedDateTimeZone,153>, <org.joda.time.tz.CachedDateTimeZone,155>, <org.joda.time.tz.CachedDateTimeZone,156>, <org.joda.time.tz.CachedDateTimeZone,158>, <org.joda.time.tz.CachedDateTimeZone,159>, <org.joda.time.tz.CachedDateTimeZone,160>, <org.joda.time.tz.CachedDateTimeZone,166>, <org.joda.time.chrono.BaseChronology,132>, <org.joda.time.chrono.BaseChronology,133>, <org.joda.time.chrono.BaseChronology,134>, <org.joda.time.chrono.BaseChronology,135>, <org.joda.time.chrono.BaseChronology,136>, <org.joda.time.chrono.BaseChronology,137>, <org.joda.time.chrono.BaseChronology,138>, <org.joda.time.chrono.AssembledChronology,131>, <org.joda.time.chrono.AssembledChronology,136>, <org.joda.time.chrono.GJChronology,269>, <org.joda.time.chrono.GJChronology,270>]
======================org.joda.time.DateTimeZone,910
========
 final long offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final long offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantAdjusted);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final long offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final long offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetAdjusted<=getOffset(instantLocal)){
return serialVersionUID;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetOriginal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal==offsetAdjusted){
return instantAdjusted;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantUTC-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instantUTC^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantMillis-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID==instantAdjusted||next>serialVersionUID){
break;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=serialVersionUID;
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS==offsetLocal&&iID.equals(UTC.getNameKey(instantAdjusted))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instantLocal^offsetLocal)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantAdjusted=selectChronology(chrono);
if((instantLocal^instantLocal+offsetLocal)<0&&(instant^offsetLocal)>=0){
UTC=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offsetLocal;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instantLocal-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantAdjusted)<0&&(instant^offsetLocal)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
 final int offsetLocal=getOffset(instantLocal);
 final long instantAdjusted=instant-offset;
 final int offsetAdjusted=getOffset(instantAdjusted);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,912
org.joda.time.DateTimeZone,913
org.joda.time.DateTimeZone,915
========
if(nextLocal==nextAdjusted){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal==(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(nextAdjusted-nextLocal)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantAdjusted==(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(nextLocal-nextAdjusted)){
return offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal!=nextAdjusted){
return offsetPrev;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((offsetLocal-offsetAdjusted)<offsetAdjusted){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<MAX_MILLIS){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=previousTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<=instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getOffset(prev)<=instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getOffset(prev)<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(prev<offsetAfter){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<millis){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<iPeriodStart){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<transitions.length){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<length){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<instant){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<instantUTC){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetPrev<prev){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<next){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<end){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev=instantAdjusted;
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==diff&&iID.equals(UTC.getNameKey(prev))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocalFromOriginal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetBefore>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantUTC>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted==prev||next>serialVersionUID){
break;
}
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev=instantAdjusted;
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iMonthOfYear>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
prev+=offsetAdjusted;
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().millisOfDay().set(prev,0);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=ISOChronology.getInstanceUTC().millisOfDay().add(prev,offsetAdjusted);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID=setDayOfMonthPrevious(ISOChronology.getInstanceUTC(),prev);
if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetBefore!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAfter){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID<instantLocal||instant>=nextLocal){
return instant;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetAdjusted=(i>=0)?(i+1):~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted<nextAdjusted){
instant=end;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
return instantAdjusted;
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev>Long.MIN_VALUE){
return prev-1;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=null){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=instant){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,928
org.joda.time.DateTimeZone,938
========
if(offsetLocal!=offset){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
if(nextAdjusted==(instantAdjusted-offsetAdjusted)){
nextAdjusted=Long.MAX_VALUE;
}
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal==(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<offsetLocal){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=(instantAdjusted-offsetLocal)){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=nextTransition(instantAdjusted);
if(prev<instantLocal){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(afterStart!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=diff){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(serialVersionUID<instantLocal||instant>=nextLocal){
return instant;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetAdjusted=(i>=0)?(i+1):~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantAdjusted<nextAdjusted){
instant=end;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetPrev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return iOffset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(i>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<MIN_VALUE){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
return instantAdjusted;
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(prev>Long.MIN_VALUE){
return prev-1;
}
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=length){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextLocal)<0&&(instantUTC^prev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=~i;
if(i!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
return oldInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return offsetAdjusted;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offsetPrev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offsetAdjusted){
if((offsetLocal-offsetAdjusted)<0){
long nextLocal=nextTransition(instantAdjusted);
long nextAdjusted=nextTransition(instantLocal-offsetAdjusted);
if(nextLocal!=nextAdjusted){
return offsetLocal;
}
}
}else if(offsetLocal>=0){
long prev=previousTransition(instantAdjusted);
if(prev<instantAdjusted){
int offsetPrev=getOffset(prev);
int diff=offsetPrev-offsetLocal;
if(instantAdjusted-prev<=diff){
return offsetPrev;
}
}
}
if((instantAdjusted^nextAdjusted)<0&&(instant^offsetPrev)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,952
========
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=offset){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
id=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
convId=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<instantLocal&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==instantLocal&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(instantUTC,UTC.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantUTC^instantLocal)<MAX_MILLIS&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-MAX_MILLIS)){
return offset;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantLocal^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantLocal+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offsetOriginal;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal==Integer.MIN_VALUE){
iOffset=UTC.getOffset(instantUTC);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=offsetBefore+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offsetAfter;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(getOffset(instantUTC)<=getOffset(instantLocal+3*DateTimeConstants.MILLIS_PER_HOUR)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(getOffset(instantUTC)<=getOffset(instantLocal+3*DateTimeConstants.MILLIS_PER_HOUR)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instant^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instant+offset;
if((instantUTC^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
if((instant^instantLocal)<0&&(instant^offset)>=0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
return 0;
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(instantLocal,getZone().getID());
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
instantLocal-=offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffsetFromLocal(instantUTC);
long instantLocal=instantUTC+offset;
instantLocal-=offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(serialVersionUID);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&instantUTC>serialVersionUID){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
serialVersionUID=instantUTC;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset==instantLocal&&iID.equals(UTC.getNameKey(serialVersionUID))){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(serialVersionUID);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&instantUTC>serialVersionUID){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
id=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
convId=printOffset(offset);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalInstantException(serialVersionUID,getID());
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(!iID.equals(UTC.getID())){
return true;
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
offset-=instantLocal*DateTimeConstants.MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+MILLIS_PER_SECOND;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
int instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+MILLIS_PER_HOUR;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<offset&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offset)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<offset&&(instantUTC^offset)>=0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offset)){
return instantLocal;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return name;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(getNameKey(instantUTC)==null){
return iID;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(getNameKey(instantUTC)==null){
return iID;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return name;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
MAX_MILLIS++;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=2;
MAX_MILLIS+=2;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffsetToAdd(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=offset){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(instantLocal!=null){
return zone;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=new FixedDateTimeZone(iID,null,offset,offset);
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iFixedOffsetCache.put(iID,new SoftReference<DateTimeZone>(instantLocal));
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("The offset cannot be zero");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instantLocal=offset;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal+=offset;
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23||MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<-59||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>23){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>=0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&(instantUTC^offset)>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>23){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<0&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if(MAX_MILLIS<-23&&MAX_MILLIS>0){
throw new IllegalArgumentException("Hours out of range: "+MAX_MILLIS);
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offset=getOffset(instantUTC);
long instantLocal=instantUTC+offset;
if((instantUTC^instantLocal)<0&&(instantUTC^offset)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return serialVersionUID-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,953
org.joda.time.DateTimeZone,955
org.joda.time.DateTimeZone,958
org.joda.time.DateTimeZone,979
========
if(offsetLocalFromOriginal==instantLocal){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocalFromOriginal==offset){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-MILLIS_PER_HOUR;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetAfter){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
long offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantLocal;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantUTC-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantUTC-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantUTC){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantLocal);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==length){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal!=offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return UTC.convertLocalToUTC(instantLocal,false,originalInstantUTC);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==this){
return originalInstantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
if(UTC==this){
return originalInstantUTC;
}
return UTC.convertLocalToUTC(instantLocal,false,originalInstantUTC);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(originalInstantUTC==instantUTC||next>originalInstantUTC){
break;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantUTC=originalInstantUTC;
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==null){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iID!=null){
return name;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iID!=null){
return name;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==null){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instantLocal-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instant){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(instantUTC);
long instantUTC=instant-offset;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offset){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==instantLocal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return UTC.convertLocalToUTC(instantUTC,false,instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
int offsetOriginal=getOffsetToAdd(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetLocal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-offsetOriginal)==(instantLocal-offsetOriginal)){
nextAdjusted=Long.MAX_VALUE;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-offsetLocalFromOriginal)!=nextTransition(instantLocal-offsetOriginal)){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offsetOriginal=offsetLocalFromOriginal;
}
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(!iID.equals(UTC.getID())){
return true;
}
int offsetOriginal=getOffset(originalInstantUTC);
long instantUTC=instantLocal-offsetOriginal;
int offsetLocalFromOriginal=getOffset(instantUTC);
if(offsetLocalFromOriginal==offsetOriginal){
return instantUTC;
}
return convertLocalToUTC(instantLocal,strict);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,980
org.joda.time.DateTimeZone,981
org.joda.time.DateTimeZone,982
org.joda.time.DateTimeZone,983
org.joda.time.DateTimeZone,985
org.joda.time.DateTimeZone,1002
========
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=nextLocal){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(instantLocal-offset)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextLocal==(instantUTC-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted!=(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=nextAdjusted){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantLocal!=(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instantUTC-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offsetLocal+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
nextAdjusted-=2;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted=FieldUtils.safeMultiply(MAX_MILLIS,DateTimeConstants.MILLIS_PER_MINUTE);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
nextAdjusted=offset;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instant-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iID=convId.substring(3);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
serialVersionUID-=offset;
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;
nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instantLocal-offset)){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted==(instant-offset)){
zone=DateTimeZone.UTC;
offset=0;
zone=DateTimeZone.UTC;
offset=0;

nextAdjusted=Long.MAX_VALUE;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getZone().getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal-=offset;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offset==getOffset(instantLocal)){
return instantLocal-getOffset(instantLocal);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(nextTransition(instantLocal)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new ArithmeticException("Adding time zone offset caused overflow");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offsetLocal==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(offsetLocal==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
System.out.println("*d* Error in "+UTC.getID());
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=maxValue;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalArgumentException("The offset cannot be zero");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict){
throw new IllegalArgumentException("The offset cannot be zero");
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(offset>23){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS++;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal-=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=FormatUtils.parseTwoDigits(iID,MAX_MILLIS)*DateTimeConstants.MILLIS_PER_MINUTE;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=FormatUtils.parseTwoDigits(iID,MAX_MILLIS)*DateTimeConstants.MILLIS_PER_SECOND;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(strict){
if(FormatUtils.parseTwoDigits(iID,MAX_MILLIS)>59){
return ~MAX_MILLIS;
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(instantLocal-previousTransition(instantLocal)<=offset){
return getOffset(previousTransition(instantLocal));
}
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offset;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
adjustedInstant=instantLocal;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
adjustedInstant=instantLocal;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;
zone=DateTimeZone.UTC;
adjustedInstant=instantLocal;

offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal)!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=offsetLocal;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
offset=offsetLocal;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS++;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal+=MAX_MILLIS;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_MINUTE;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=nextAdjusted*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
MAX_MILLIS+=2;
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetAdjusted||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=(i>=0)?(i+1):~i;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<nextAdjusted){
instant=end;
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minValue||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS==0){
throw new IllegalArgumentException("The offset cannot be zero");
}
offset=MAX_MILLIS;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(strict&&offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iOffsetParsed||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict||offsetLocal<0){
long nextLocal=forOffsetMillis(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(count||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(strict){
if(iID.charAt(MAX_MILLIS)!='.'&&text.charAt(position)!=','){
break;
}
MAX_MILLIS--;
position++;
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS=digitCount(iID,MAX_MILLIS,3);
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS>1){
nextAdjusted+=(iID.charAt(MAX_MILLIS++)-'0')*10;
if(count>2){
offset+=text.charAt(position++)-'0';
}
}
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(offsetLocal||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(offsetAdjusted||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal!=nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==nextAdjusted){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=(i>=0)?(i+1):~i;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<nextAdjusted){
instant=end;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal!=null){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantUTC!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offsetLocal==offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offsetLocal;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(hoursOffset!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS<-59||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
int nextAdjusted=offset*60;
if(hoursInMinutes<0){
MAX_MILLIS=hoursInMinutes-Math.abs(minutesOffset);
}else {
minutesOffset=hoursInMinutes+minutesOffset;
}
nextLocal=FieldUtils.safeMultiply(minutesOffset,DateTimeConstants.MILLIS_PER_MINUTE);
}catch (ArithmeticException ex) {
  throw new IllegalArgumentException("Offset is too large");
}

if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(adjustedInstant!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS--;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS++;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(digitCount(iID,MAX_MILLIS,2)<2){
return ~position;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextAdjusted>23){
return ~MAX_MILLIS;
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offsetLocal=nextAdjusted*DateTimeConstants.MILLIS_PER_HOUR;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
MAX_MILLIS-=2;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FormatUtils.appendPaddedInteger(new StringBuffer(),nextLocal,2);
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset-=nextLocal*(int)DateTimeConstants.MILLIS_PER_HOUR;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer().append(':');
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
FormatUtils.appendPaddedInteger(new StringBuffer(),nextAdjusted,2);
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset-=nextAdjusted*DateTimeConstants.MILLIS_PER_MINUTE;
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset==0){
return new StringBuffer().toString();
}
if(offsetLocal!=offset){
if(strict||offsetLocal<0){
long nextLocal=nextTransition(instantLocal-offsetLocal);
if(nextLocal==(instantLocal-offsetLocal)){
nextLocal=Long.MAX_VALUE;
}
long nextAdjusted=nextTransition(instantLocal-offset);
if(nextAdjusted==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
if(nextLocal!=nextAdjusted){
if(strict){
throw new IllegalInstantException(instantLocal,getID());
}else {
offset=offsetLocal;
}
}
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1004
org.joda.time.DateTimeZone,1006
org.joda.time.DateTimeZone,1035
========
long instantUTC=instantUTC-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantUTC-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offsetLocal){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instantUTC==(instantLocal-offset)){
nextAdjusted=Long.MAX_VALUE;
}
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offsetOriginal;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(getOffset(instantUTC)==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=instantUTC){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
offset-=offset*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
offset-=offset*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=offset*DateTimeConstants.MILLIS_PER_HOUR;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=offset*DateTimeConstants.MILLIS_PER_HOUR;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=offset*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offset;
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(serialVersionUID,getZone().getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
serialVersionUID-=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instantLocal-offset;
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantUTC=instant-offset;
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1037
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&MAX_MILLIS<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+MAX_MILLIS);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offsetLocal)){
return offset;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantUTC-offsetLocal)){
return offset;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offsetLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(instantUTC,UTC.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.DateTimeZone,1040
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantUTC^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^diff)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<offset){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offsetLocal==offset){
return instantUTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return oldInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
if(UTC==null){
newZone=DateTimeZone.getDefault();
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0){
return DateTimeZone.UTC;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(id,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
id=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==0L){
return DateTimeZone.UTC;
}else {
iID=printOffset(offset);
return fixedOffsetZone(convId,offset);
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
convId=printOffset(offset);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<offsetLocal&&(instantLocal^offset)<0){
if(nextTransition(serialVersionUID)!=nextTransition(instantLocal-offsetLocal)){
return offsetLocal;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset>0&&MAX_MILLIS<0){
throw new IllegalArgumentException("Positive hours must not have negative minutes: "+minutesOffset);
}
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(MAX_MILLIS<-59&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(MAX_MILLIS<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("Minutes out of range: "+MAX_MILLIS);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(offset==MAX_MILLIS&&iID.equals(iID)){
System.out.println("*d* Error in "+UTC.getID());
return false;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<MAX_MILLIS&&(instantLocal^offset)<0){
System.out.println("*d* Error in "+UTC.getID());
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset=MAX_MILLIS*DateTimeConstants.MILLIS_PER_HOUR;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>23){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_MINUTE;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=MAX_MILLIS*DateTimeConstants.MILLIS_PER_SECOND;
MAX_MILLIS-=2;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(MAX_MILLIS>59){
return ~MAX_MILLIS;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
offset+=(iID.charAt(MAX_MILLIS++)-'0')*100;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+UTC);
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
if(iID!=null){
message="Cannot parse \""+iID;
}
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^instantUTC)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^sum)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return serialVersionUID-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return millis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalArgumentException("The offset cannot be zero");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
MAX_MILLIS=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new IllegalInstantException(instantUTC,getZone().getID());
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantUTC-=offset;
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instant^adjustedInstant)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instant^adjustedInstant)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantLocal-(strict?offset:getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return instantUTC-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return UTC.convertUTCToLocal(instantUTC)-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return next;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantUTC)<0&&(instantLocal^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.AssembledChronology,133
========
if((base=iBase)!=null&&(iBaseFlags&6)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&6)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==6){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,millisOfDay);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&1)==5){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==1){
return base.getDateTimeMillis(serialVersionUID,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(monthOfYear!=2||iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(monthOfYear!=2&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&iBaseFlags!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags!=5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)!=29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&iBaseFlags==29){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&info.iYear!=year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)==year){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iBaseFlags==12&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
if((base=iBase)!=null&&(iBaseFlags&5)==5){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=iBase)!=null&&(iBaseFlags&5)==iBaseFlags){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.chrono.GJChronology,279
========
base=base;
super(base,new Object[]{julian,gregorian,cutoverInstant});

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,280
Find no block!
org.joda.time.chrono.GJChronology,194
org.joda.time.chrono.GJChronology,204
UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

========
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return UTC;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(curOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(curStdOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextStdOffset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i==minDaysInFirstWeek&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(i==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=minDaysInFirstWeek;
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

========
for(int i=chronos.size();--i>=size();){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=minDaysInFirstWeek;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(zone.previousTransition(iCutover)==iCutover&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
millis=zone.previousTransition(iCutover);
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
if(iCutover-1!=iCutover){
System.out.println("*r* Error in "+zone.getID());
return false;
}
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
millis=zone.previousTransition(iCutover);
if(iCutover-1!=iCutover){
System.out.println("*r* Error in "+zone.getID());
return false;
}

chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chronos.add(chrono);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(i>65535){
throw new UnsupportedOperationException("String pool is too large");
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iJulianChronology=iJulianChronology;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iGregorianChronology=iGregorianChronology;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutoverInstant=cutoverInstant;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iJulianChronology.getMinimumDaysInFirstWeek()!=iGregorianChronology.getMinimumDaysInFirstWeek()){
throw new IllegalArgumentException();
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
for(int i=chronos.size();--i>=0;){
lastType=iGregorianField.getDurationField().getType();
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
try{
chrono=chronos[minDaysInFirstWeek-1];
}catch (ArrayIndexOutOfBoundsException e) {
  throw new IllegalArgumentException("Invalid min days in first week: " + minDaysInFirstWeek);
}

for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronos[leapYears.index];
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=~i;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=(i>=0)?(i+1):~i;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iCutover>Long.MIN_VALUE){
return prev-1;
}
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
i=minDaysInFirstWeek;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=cCache.get(zone);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chronos[minDaysInFirstWeek-1]=chrono;
for(int i=chronos.size();--i>=0;){
chrono=chronos.get(i);
if(minDaysInFirstWeek==chrono.getMinimumDaysInFirstWeek()&&cutoverInstant.equals(chrono.getGregorianCutover())){
return chrono;
}
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,205
org.joda.time.chrono.GJChronology,206
org.joda.time.chrono.GJChronology,209
org.joda.time.chrono.GJChronology,219
UNKNOWN ASTNode type : catch (IllegalFieldValueException ex) {
  if (monthOfYear != 2 || dayOfMonth != 29) {
    throw ex;
  }
  instant=iGregorianChronology.getDateTimeMillis(year,monthOfYear,28,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
  if (instant >= iCutoverMillis) {
    throw ex;
  }
}

========
if(zone!=DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronoZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new EthiopicChronology(LimitChronology.getInstance(chrono,new DateTime(1,1,1,0,0,0,0,chrono),null),null,minDaysInFirstWeek);
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new CopticChronology(LimitChronology.getInstance(chrono,new DateTime(1,1,1,0,0,0,0,chrono),null),null,minDaysInFirstWeek);
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone!=null){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
zone=DateTimeUtils.getZone(zone);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setTime(DateTimeUtils.getInstantMillis(gregorianCutover));
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover-=zone.getOffsetFromLocal(iCutover);
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono!=null&&chrono.getZone()==zone){
return chrono;
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(System.getSecurityManager()!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
checkInterval(iCutoverMillis,iCutoverMillis);
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
iChronology=DateTimeUtils.getInstantChronology(gregorianCutover);
iStartMillis=DateTimeUtils.getInstantMillis(gregorianCutover);
checkInterval(iCutoverMillis,iCutoverMillis);

chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==DateTimeZone.UTC){
chrono=new GJChronology(JulianChronology.getInstance(zone,minDaysInFirstWeek),GregorianChronology.getInstance(zone,minDaysInFirstWeek),cutoverInstant);
}else {
chrono=getInstance(DateTimeZone.UTC,cutoverInstant,minDaysInFirstWeek);
chrono=new GJChronology(ZonedChronology.getInstance(chrono,zone),chrono.iJulianChronology,chrono.iGregorianChronology,chrono.iCutoverInstant);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,220
org.joda.time.chrono.GJChronology,291
========
if((base=getBase())==null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(base==null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
if((base=getBase())!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
if((base=getBase())!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())!=DateTimeUtils.getZone(getZone())){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())==DateTimeUtils.getZone(getZone())){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())!=false){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())==false){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getZone()!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,294
========
Chronology base;
if((base=getBase())==null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if(base==null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if(base!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(iGregorianField==null){
return null;
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(iGregorianField instanceof StrictDateTimeField){
field=((StrictDateTimeField)field).getWrappedField();
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return iCutoverMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_HOUR;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_MINUTE;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
return DateTimeConstants.MILLIS_PER_SECOND;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
checkLimits(iCutover,"resulting");
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
checkLimits(iCutover,null);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
iCutover-=getZone().getOffsetFromLocal(iCutover);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
if(getZone().getOffsetFromLocal(iCutover)!=getZone().getOffset(iCutover)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
iCutover=getType().getField(base.withUTC()).add(localInstant,iCutover);
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
new GregorianCalendar(getZone().toTimeZone()).setTime(toDate());
return DateTimeZone.UTC;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,305
org.joda.time.chrono.GJChronology,315
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(zone==DateTimeZone.UTC){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(temp==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
if(zone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chronoZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iCutover-=zone.getOffsetFromLocal(iCutover);
if(zone==null){
zone=DateTimeZone.getDefault();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,318
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(getZone()==zone){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(newZone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone!=getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(zone==getZone()){
return this;
}
if(zone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(dtz==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(tz==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(UTC==getZone()){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.GJChronology,319
org.joda.time.chrono.GJChronology,395
org.joda.time.chrono.GJChronology,404
org.joda.time.chrono.GJChronology,485
org.joda.time.base.AbstractInstant,259
========
if(this==readableInstant){
return false;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.base.AbstractInstant,260
org.joda.time.Instant,144
org.joda.time.chrono.BasicChronology,167
========
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((base=getBase())!=null){
return base.getDateTimeMillis(iFirstDayMillis,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())!=null){
return base.getZone();
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((base=getBase())==null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(base==null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
base=base.withUTC();
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.BasicChronology,172
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfDay;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),dayOfMonth,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
iFirstDayMillis=secondOfMinute().set(instant,secondOfMinute);
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(iFirstDayMillis,monthOfYear,dayOfMonth,secondOfMinute,year);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
checkLimits(iFirstDayMillis,null);
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(iFirstDayMillis,"resulting");
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.hourOfDay().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.minuteOfHour().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.secondOfMinute().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
base.millisOfSecond().verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),minuteOfHour,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getWrappedField().get(iFirstDayMillis)<0){
minuteOfHour=-year;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),year,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(minuteOfHour==hourOfDay){
value=0;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
iFirstDayMillis=super.add(instant,dayOfMonth);
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minuteOfHour<=hourOfDay){
value--;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(minuteOfHour<=iYear){
if(value==iSkip){
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}
value++;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return iFirstDayMillis+(minuteOfHour-get(instant))*iFirstDayMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+value;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+iUnitMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),minuteOfHour,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+value;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),minuteOfHour,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+iUnitMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(iFirstDayMillis)==year){
return iFirstDayMillis;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
if(CACHE_MASK>CACHE_MASK){
thisDom=maxDom;
}
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),dayOfMonth,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+dayOfMonth;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+MILLIS_PER_DAY;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getZone();
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.year().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.monthOfYear().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.dayOfMonth().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.year().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.monthOfYear().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.year().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.dayOfMonth().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.monthOfYear().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.dayOfMonth().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.year().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.monthOfYear().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
base.dayOfMonth().verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())==null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Chronology base;
if(base==null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if(base!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.year().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(base==null){
throw new IllegalArgumentException("UTC chronology must not be null");
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
base.monthOfYear().verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
base.millisOfDay().verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
if(iMinDaysInFirstWeek>CACHE_MASK){
setToWeek=maxOutWeeks;
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(iFirstDayMillis)<minuteOfHour){
iFirstDayMillis+=DateTimeConstants.MILLIS_PER_WEEK;
}else if(workWoyYear>year){
workInstant-=DateTimeConstants.MILLIS_PER_WEEK;
}
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return (minuteOfHour*365L+(minuteOfHour/100-DAYS_0000_TO_1970))*DateTimeConstants.MILLIS_PER_DAY;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
if(minuteOfHour<0){
CACHE_MASK=((year+3)>>2)-leapYears+((leapYears+3)>>2)-1;
}else {
leapYears=(year>>2)-leapYears+(leapYears>>2);
if(isLeapYear(year)){
leapYears--;
}
}
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iYear=year;
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
iFirstDayMillis=super.add(instant,iFirstDayMillis);
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
minuteOfHour+=(getLowerLimit()!=null?getLowerLimit().hashCode():0);
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology base;
if((base=getBase())!=null){
return base.getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);
}
minuteOfHour+=(getUpperLimit()!=null?getUpperLimit().hashCode():0);
FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(),hourOfDay,0,23);
FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(),minuteOfHour,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(),secondOfMinute,0,59);
FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(),millisOfSecond,0,999);
return getDateMidnightMillis(year,monthOfYear,dayOfMonth)+hourOfDay*DateTimeConstants.MILLIS_PER_HOUR+minuteOfHour*DateTimeConstants.MILLIS_PER_MINUTE+secondOfMinute*DateTimeConstants.MILLIS_PER_SECOND+millisOfSecond;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.BasicChronology,173
org.joda.time.chrono.BasicChronology,174
org.joda.time.chrono.BasicChronology,175
org.joda.time.chrono.BasicChronology,177
org.joda.time.DateTimeFieldType,378
========
return str;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.field.DecoratedDurationField,101
========
return iField.isSupported();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isPrecise();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return FieldUtils.safeMultiply(serialVersionUID,getUnitMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getValueAsLong(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getValue(serialVersionUID,addOffset(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValueAsLong(serialVersionUID,addOffset(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return field.getUnitMillis();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getValue(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getValueAsLong(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getDifference(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getDifferenceAsLong(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getMillis(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getMillis(serialVersionUID,addOffset(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMillis(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.add(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.field.FieldUtils,218
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(lowerBound),null,Integer.valueOf(field.getMaximumValue()));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
FieldUtils.verifyValueBounds(this,value,lowerBound,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(upperBound==getValue(lowerBound)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Field must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super.setFieldInto(getValues(),field,upperBound);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,value,1,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound==0){
return ~value;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound<=0){
return 0;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lowerBound--;
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound==getValue(value)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||field==null){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||field==null){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/value;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value%lowerBound;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/lowerBound;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
if(value>Integer.MAX_VALUE){
return ~value;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>offset)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("The divisor must be at least 2");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((value<lowerBound)||(mode>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(field!=null&&(value<ROUND_NONE||value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(field!=null||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value<ROUND_NONE||mode>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(mode>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(ROUND_NONE>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
field=(value==ROUND_NONE?null:field);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
lowerBound=(field==null?ROUND_NONE:value);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getMillis());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.base.BaseDateTime,223
org.joda.time.base.BaseDateTime,225
Find no block!
org.joda.time.base.BaseDateTime,295
org.joda.time.base.BaseDateTime,304
org.joda.time.chrono.ZonedChronology,118
========
return localToUTC(getBase().getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return localToUTC(getBase().getDateTimeMillis(serialVersionUID+getZone().getOffset(instant),hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getYearMonthDayMillis(year,monthOfYear,dayOfMonth);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(DateTimeFieldType.year(),year,getMinYear(),getMaxYear());
return localToUTC(getBase().getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(),monthOfYear,1,getMaxMonth(year));
return localToUTC(getBase().getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(),dayOfMonth,1,getDaysInYearMonth(year,monthOfYear));
return localToUTC(getBase().getDateTimeMillis(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.ZonedChronology,138
UNKNOWN ASTNode type : catch (IllegalArgumentException ex) {
  zone=DateTimeZone.getDefault();
}

========
if(offset!=zone.getOffset(localInstant)){
if(getOffset(serialVersionUID)<=offset){
return serialVersionUID;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==Integer.MIN_VALUE){
iOffset=zone.getOffset(localInstant);
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=iZone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+zone);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.tz.TestCompiler::test_Amman_2006
  - org.joda.time.tz.TestCompiler::test_Amman_2005
  - org.joda.time.tz.TestCompiler::test_Amman_2004
  - org.joda.time.tz.TestCompiler::test_Amman_2003
  - org.joda.time.format.TestTextFields::testMonthNames_monthStart
  - org.joda.time.format.TestTextFields::testWeekdayNames
  - org.joda.time.format.TestTextFields::testMonthNames_monthEnd
  - org.joda.time.format.TestISODateTimeFormatParsing::test_basicWeekDate
  - org.joda.time.format.TestISODateTimeFormatParsing::test_dateElementParser
  - org.joda.time.format.TestISODateTimeFormatParsing::test_weekDate
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortName
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneParis
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneBahiaBanderas
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithAutoLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongName
  - org.joda.time.format.TestDateTimeFormatter::testZoneNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testZoneShortNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_endOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_startOfYear
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology6
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology5
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology4
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology3
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology2
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology1
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Zone
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Chronology
  - org.joda.time.chrono.TestLenientChronology::testNearDstTransition
  - org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestEthiopicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestCopticChronology::testSampleDateWithZone
  - org.joda.time.TestYearMonth_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonth_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonthDay_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Basics::testToDateTime_TOD_Zone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestStringConvert::testDateMidnight
  - org.joda.time.TestStringConvert::testMutableDateTime
  - org.joda.time.TestStringConvert::testDateTime
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestPartial_Match::testIsMatch_Instant
  - org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval2
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestMutableInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Sets::testSetYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_same
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_int_int_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_long1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI1
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestMutableDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Constructors::testParse_formatter
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestMutableDateTime_Basics::testRounding6
  - org.joda.time.TestMutableDateTime_Basics::testRounding5
  - org.joda.time.TestMutableDateTime_Basics::testRounding4
  - org.joda.time.TestMutableDateTime_Basics::testRounding3
  - org.joda.time.TestMutableDateTime_Basics::testRounding2
  - org.joda.time.TestMutableDateTime_Basics::testRounding1
  - org.joda.time.TestMutableDateTime_Adds::testAddSeconds_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMillis_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddDays_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMinutes_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMonths_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddYears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeekyears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddHours_int1
  - org.joda.time.TestMutableDateTime_Adds::testAdd_RP1
  - org.joda.time.TestMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_long_DateTimeZone_2
  - org.joda.time.TestLocalDate_Constructors::testConstructor_long3_DateTimeZone
  - org.joda.time.TestLocalDate_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_avoidDST
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone
  - org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone
  - org.joda.time.TestLocalDate_Basics::testToInterval_Zone_noMidnight
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone_avoidDST
  - org.joda.time.TestLocalDateTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDateTime_Basics::testToDateTime_nullRI
  - org.joda.time.TestInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_formatter
  - org.joda.time.TestIllegalFieldValueException::testZoneTransition
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestDateTime_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Basics::testWithers
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_athens
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_newValid_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_newValid_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_new_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_paris
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_losAngeles
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_newYork
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset_springGap
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloorNotDST_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug3192457_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london
  - org.joda.time.TestDateTimeZoneCutover::test_LocalDate_toDateMidnight_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZone::testCommentParse
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_Berlin
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_NewYork
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddLongMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextLocaleMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRemainderMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfEvenMonthOfYear
  - org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter
  - org.joda.time.TestDateMidnight_Constructors::testParse_formatter
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testIsEqual
  - org.joda.time.TestDateMidnight_Basics::testIsAfter
  - org.joda.time.TestDateMidnight_Basics::testWithers
  - org.joda.time.TestDateMidnight_Basics::testIsBefore
  - org.joda.time.TestDateMidnight_Basics::testWithFields_RPartial
Failing tests: 361
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+zone);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.tz.TestCompiler::test_Amman_2006
  - org.joda.time.tz.TestCompiler::test_Amman_2005
  - org.joda.time.tz.TestCompiler::test_Amman_2004
  - org.joda.time.tz.TestCompiler::test_Amman_2003
  - org.joda.time.format.TestTextFields::testMonthNames_monthStart
  - org.joda.time.format.TestTextFields::testWeekdayNames
  - org.joda.time.format.TestTextFields::testMonthNames_monthEnd
  - org.joda.time.format.TestISODateTimeFormatParsing::test_basicWeekDate
  - org.joda.time.format.TestISODateTimeFormatParsing::test_dateElementParser
  - org.joda.time.format.TestISODateTimeFormatParsing::test_weekDate
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortName
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneParis
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneBahiaBanderas
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithAutoLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongName
  - org.joda.time.format.TestDateTimeFormatter::testZoneNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testZoneShortNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_endOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_startOfYear
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology6
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology5
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology4
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology3
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology2
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology1
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Zone
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Chronology
  - org.joda.time.chrono.TestLenientChronology::testNearDstTransition
  - org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestEthiopicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestCopticChronology::testSampleDateWithZone
  - org.joda.time.TestYearMonth_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonth_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonthDay_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Basics::testToDateTime_TOD_Zone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestStringConvert::testDateMidnight
  - org.joda.time.TestStringConvert::testMutableDateTime
  - org.joda.time.TestStringConvert::testDateTime
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestPartial_Match::testIsMatch_Instant
  - org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval2
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestMutableInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Sets::testSetYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_same
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_int_int_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_long1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI1
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestMutableDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Constructors::testParse_formatter
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestMutableDateTime_Basics::testRounding6
  - org.joda.time.TestMutableDateTime_Basics::testRounding5
  - org.joda.time.TestMutableDateTime_Basics::testRounding4
  - org.joda.time.TestMutableDateTime_Basics::testRounding3
  - org.joda.time.TestMutableDateTime_Basics::testRounding2
  - org.joda.time.TestMutableDateTime_Basics::testRounding1
  - org.joda.time.TestMutableDateTime_Adds::testAddSeconds_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMillis_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddDays_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMinutes_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMonths_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddYears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeekyears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddHours_int1
  - org.joda.time.TestMutableDateTime_Adds::testAdd_RP1
  - org.joda.time.TestMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_long_DateTimeZone_2
  - org.joda.time.TestLocalDate_Constructors::testConstructor_long3_DateTimeZone
  - org.joda.time.TestLocalDate_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_avoidDST
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone
  - org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone
  - org.joda.time.TestLocalDate_Basics::testToInterval_Zone_noMidnight
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone_avoidDST
  - org.joda.time.TestLocalDateTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDateTime_Basics::testToDateTime_nullRI
  - org.joda.time.TestInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_formatter
  - org.joda.time.TestIllegalFieldValueException::testZoneTransition
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestDateTime_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Basics::testWithers
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_athens
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_newValid_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_newValid_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_new_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_paris
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_losAngeles
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_newYork
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset_springGap
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloorNotDST_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug3192457_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london
  - org.joda.time.TestDateTimeZoneCutover::test_LocalDate_toDateMidnight_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZone::testCommentParse
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_Berlin
  - org.joda.time.TestDateTimeZone::testIsLocalDateTimeGap_NewYork
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddLongMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextLocaleMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRemainderMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfEvenMonthOfYear
  - org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter
  - org.joda.time.TestDateMidnight_Constructors::testParse_formatter
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testIsEqual
  - org.joda.time.TestDateMidnight_Basics::testIsAfter
  - org.joda.time.TestDateMidnight_Basics::testWithers
  - org.joda.time.TestDateMidnight_Basics::testIsBefore
  - org.joda.time.TestDateMidnight_Basics::testWithFields_RPartial
Failing tests: 361
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset==zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
if(offset==getOffset(localInstant)){
return serialVersionUID-getOffset(localInstant);
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(serialVersionUID-localInstant<=getOffset(localInstant)-offset){
return getOffset(localInstant);
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(offset),new IllegalInstantException(localInstant,zone.getID()).getMessage());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
new IllegalFieldValueException(iField.getType(),Integer.valueOf(offset),new IllegalInstantException(localInstant,zone.getID()).getMessage()).initCause(new IllegalInstantException(localInstant,zone.getID()));
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
throw new ArithmeticException("Adding time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
if(offset==null){
return ISOChronology.getInstance(zone);
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(zone==getZone()){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==getZone()){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==getParam()){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(zone==null){
return DateTimeZone.getDefault();
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(getZone()==zone){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
zone=DateTimeUtils.getZone(zone);
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(zone==DateTimeZone.UTC){
return getBase();
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==null){
return getOffset(DateTimeUtils.currentTimeMillis());
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
throw new IllegalArgumentException("DateTimeZone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
throw new NullPointerException("Zone must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
if(zone!=null){
return zone;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(serialVersionUID);
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
if(offset==zone){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(offset!=zone.getOffset(localInstant)){
System.out.println("*d* Error in "+zone.getID());
throw new IllegalInstantException(localInstant,zone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset==zone.getOffset(localInstant)){
throw new IllegalArgumentException("The offset cannot be zero");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(offset!=zone.getOffset(localInstant)){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(getZone()==zone){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
zone=DateTimeUtils.getZone(zone);
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=iZone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffset(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone==getZone()){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(zone==getZone()){
return this;
}
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new GregorianCalendar(zone.toTimeZone()).setTime(toDate());
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(iZone==zone){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
iZone=DateTimeUtils.getZone(newZone);
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
iZone=DateTimeUtils.getZone(newZone);
if(offset!=zone.getOffset(localInstant)){
if(iZone==zone){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset==zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(offset==getOffset(serialVersionUID)){
return localInstant;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffset(localInstant);
localInstant-=offset;
if(offset==zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone!=null){
return zone;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(localInstant);
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return instantLocal;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffset(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetToAdd(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
long offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(getOffset(localInstant)<=offset){
return serialVersionUID;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
long offset=zone.getOffset(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return zone.convertLocalToUTC(localInstant,false,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.tz.TestCompiler::test_Amman_2006
  - org.joda.time.tz.TestCompiler::test_Amman_2005
  - org.joda.time.tz.TestCompiler::test_Amman_2004
  - org.joda.time.tz.TestCompiler::test_Amman_2003
  - org.joda.time.format.TestTextFields::testMonthNames_monthStart
  - org.joda.time.format.TestTextFields::testWeekdayNames
  - org.joda.time.format.TestTextFields::testMonthNames_monthEnd
  - org.joda.time.format.TestISODateTimeFormatParsing::test_basicWeekDate
  - org.joda.time.format.TestISODateTimeFormatParsing::test_dateElementParser
  - org.joda.time.format.TestISODateTimeFormatParsing::test_weekDate
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortName
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneParis
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneBahiaBanderas
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithAutoLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongName
  - org.joda.time.format.TestDateTimeFormatter::testZoneNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testZoneShortNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_endOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_startOfYear
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology6
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology5
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology4
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology3
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology2
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology1
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Zone
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Chronology
  - org.joda.time.chrono.TestLenientChronology::testNearDstTransition
  - org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestEthiopicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestCopticChronology::testSampleDateWithZone
  - org.joda.time.TestYearMonth_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonth_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonthDay_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Basics::testToDateTime_TOD_Zone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestStringConvert::testDateMidnight
  - org.joda.time.TestStringConvert::testMutableDateTime
  - org.joda.time.TestStringConvert::testDateTime
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestPartial_Match::testIsMatch_Instant
  - org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval2
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestMutableInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Sets::testSetYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_same
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_int_int_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_long1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI1
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestMutableDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Constructors::testParse_formatter
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestMutableDateTime_Basics::testRounding6
  - org.joda.time.TestMutableDateTime_Basics::testRounding5
  - org.joda.time.TestMutableDateTime_Basics::testRounding4
  - org.joda.time.TestMutableDateTime_Basics::testRounding3
  - org.joda.time.TestMutableDateTime_Basics::testRounding2
  - org.joda.time.TestMutableDateTime_Basics::testRounding1
  - org.joda.time.TestMutableDateTime_Adds::testAddSeconds_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMillis_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddDays_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMinutes_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMonths_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddYears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeekyears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddHours_int1
  - org.joda.time.TestMutableDateTime_Adds::testAdd_RP1
  - org.joda.time.TestMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_long_DateTimeZone_2
  - org.joda.time.TestLocalDate_Constructors::testConstructor_long3_DateTimeZone
  - org.joda.time.TestLocalDate_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_avoidDST
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone
  - org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone
  - org.joda.time.TestLocalDate_Basics::testToInterval_Zone_noMidnight
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone_avoidDST
  - org.joda.time.TestLocalDateTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDateTime_Basics::testToDateTime_nullRI
  - org.joda.time.TestInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestDateTime_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Basics::testWithers
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_athens
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_paris
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_losAngeles
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_newYork
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloorNotDST_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug3192457_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZone::testCommentParse
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddLongMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextLocaleMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRemainderMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfEvenMonthOfYear
  - org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter
  - org.joda.time.TestDateMidnight_Constructors::testParse_formatter
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testIsEqual
  - org.joda.time.TestDateMidnight_Basics::testIsAfter
  - org.joda.time.TestDateMidnight_Basics::testWithers
  - org.joda.time.TestDateMidnight_Basics::testIsBefore
  - org.joda.time.TestDateMidnight_Basics::testWithFields_RPartial
Failing tests: 353
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
zone=DateTimeUtils.getZone(zone);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone==null){
return DateTimeZone.getDefault();
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(iZone==zone){
return ;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(localInstant);
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=tz.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return iCutoverMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone==getParam()){
return this;
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalArgumentException("The datetime zone must not be null");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(System.getSecurityManager()!=null){
sm.checkPermission(new JodaTimePermission("DateTimeZone.setDefault"));
}
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
synchronized(DateTimeZone.class){
iZone=zone;
}
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(localInstant==Long.MIN_VALUE){
return GregorianChronology.getInstance(zone);
}else if(cutover==Long.MAX_VALUE){
return JulianChronology.getInstance(zone);
}else {
return GJChronology.getInstance(zone,cutover,4);
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=tz.getOffset(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new NullPointerException("Zone must not be null");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone==DateTimeZone.UTC){
return withUTC();
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
if(zone==DateTimeZone.UTC){
return getBase();
}
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant-(iTimeField?offset:getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalArgumentException("The offset cannot be zero");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset==zone.getOffset(localInstant)){
throw new IllegalArgumentException("The offset cannot be zero");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalArgumentException("DateTimeZone must not be null");
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
  - org.joda.time.tz.TestCompiler::test_Amman_2006
  - org.joda.time.tz.TestCompiler::test_Amman_2005
  - org.joda.time.tz.TestCompiler::test_Amman_2004
  - org.joda.time.tz.TestCompiler::test_Amman_2003
  - org.joda.time.format.TestTextFields::testMonthNames_monthStart
  - org.joda.time.format.TestTextFields::testWeekdayNames
  - org.joda.time.format.TestTextFields::testMonthNames_monthEnd
  - org.joda.time.format.TestISODateTimeFormatParsing::test_basicWeekDate
  - org.joda.time.format.TestISODateTimeFormatParsing::test_dateElementParser
  - org.joda.time.format.TestISODateTimeFormatParsing::test_weekDate
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortName
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneTokyo
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneParis
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneBahiaBanderas
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongNameWithLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffset
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_localPrintParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_parseWrongOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseOffsetAndZone
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseShortNameWithAutoLookup
  - org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseLongName
  - org.joda.time.format.TestDateTimeFormatter::testZoneNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
  - org.joda.time.format.TestDateTimeFormatter::testZoneShortNameNearTransition
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_endOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone3
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone2
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthOnly
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_chrono
  - org.joda.time.format.TestDateTimeFormatter::testParseDateTime_zone
  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_simple_precedence
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_startOfYear
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology6
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology5
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology4
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology3
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology2
  - org.joda.time.convert.TestStringConverter::testSetIntoInterval_Object_Chronology1
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Zone
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object
  - org.joda.time.convert.TestStringConverter::testGetInstantMillis_Object_Chronology
  - org.joda.time.chrono.TestLenientChronology::testNearDstTransition
  - org.joda.time.chrono.TestIslamicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestEthiopicChronology::testSampleDateWithZone
  - org.joda.time.chrono.TestCopticChronology::testSampleDateWithZone
  - org.joda.time.TestYearMonth_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonth_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestYearMonthDay_Basics::testToInterval_Zone
  - org.joda.time.TestYearMonthDay_Basics::testToDateTime_TOD_Zone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestTimeOfDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestStringConvert::testDateMidnight
  - org.joda.time.TestStringConvert::testMutableDateTime
  - org.joda.time.TestStringConvert::testDateTime
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestPeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestPartial_Match::testIsMatch_Instant
  - org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval2
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI4
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI3
  - org.joda.time.TestMutablePeriod_Constructors::testConstructor_RI_RI_PeriodType4
  - org.joda.time.TestMutableInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Sets::testSetYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekOfWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMilliOfSecond_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_same
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_int_int_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetHourOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfMinute_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfMonth_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetSecondOfDay_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMonthOfYear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI_different1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_long1
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI2
  - org.joda.time.TestMutableDateTime_Sets::testSetDate_RI1
  - org.joda.time.TestMutableDateTime_Sets::testSetWeekyear_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetDayOfWeek_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int2
  - org.joda.time.TestMutableDateTime_Sets::testSetMinuteOfHour_int1
  - org.joda.time.TestMutableDateTime_Sets::testSetTime_int_int_int_int1
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestMutableDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestMutableDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestMutableDateTime_Constructors::testParse_formatter
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestMutableDateTime_Basics::testRounding6
  - org.joda.time.TestMutableDateTime_Basics::testRounding5
  - org.joda.time.TestMutableDateTime_Basics::testRounding4
  - org.joda.time.TestMutableDateTime_Basics::testRounding3
  - org.joda.time.TestMutableDateTime_Basics::testRounding2
  - org.joda.time.TestMutableDateTime_Basics::testRounding1
  - org.joda.time.TestMutableDateTime_Adds::testAddSeconds_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMillis_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddDays_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMinutes_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddMonths_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddYears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddWeekyears_int1
  - org.joda.time.TestMutableDateTime_Adds::testAddHours_int1
  - org.joda.time.TestMutableDateTime_Adds::testAdd_RP1
  - org.joda.time.TestMonthDay_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_nullDateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalTime_Constructors::testConstructor_long_DateTimeZone_2
  - org.joda.time.TestLocalDate_Constructors::testConstructor_long3_DateTimeZone
  - org.joda.time.TestLocalDate_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_avoidDST
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone
  - org.joda.time.TestLocalDate_Basics::testToDateTime_LocalTime_Zone
  - org.joda.time.TestLocalDate_Basics::testToInterval_Zone_noMidnight
  - org.joda.time.TestLocalDate_Basics::testToDateTimeAtStartOfDay_Zone_avoidDST
  - org.joda.time.TestLocalDateTime_Constructors::testConstructor_DateTimeZone
  - org.joda.time.TestLocalDateTime_Basics::testToDateTime_nullRI
  - org.joda.time.TestInterval_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_noFormatter
  - org.joda.time.TestInstant_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldYear
  - org.joda.time.TestDateTime_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertySetTextDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertySetTextYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyGetMillisOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyGetMinuteOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyRoundFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfEvenHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfFloorHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyToIntervalDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetTextWeekOfWeekyear
  - org.joda.time.TestDateTime_Properties::testPropertyGetSecondOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertySetDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyRoundHalfCeilingHourOfDay
  - org.joda.time.TestDateTime_Properties::testPropertyAddLongDayOfWeek
  - org.joda.time.TestDateTime_Properties::testPropertyAddYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddDayOfMonth
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfYear
  - org.joda.time.TestDateTime_Properties::testPropertyAddWrapFieldDayOfWeek
  - org.joda.time.TestDateTime_Constructors::testParse_noFormatter
  - org.joda.time.TestDateTime_Constructors::testParse_formatter
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullChronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_Chronology
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int
  - org.joda.time.TestDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateTime_Basics::testWithers
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_athens
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_addWrapFieldDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourBack_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_paris
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusDayMidGap_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_losAngeles
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourAcross_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_NewYork_Spring
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_newYork
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_NewYork_Autumn
  - org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_withHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_constructor_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloorNotDST_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Moscow_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusHour_Guatemata_Autumn
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourZero_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Turk
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_minusDay_Gaza
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_day_NewYork_Spring_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minute_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_setHourForward_Moscow_Spring
  - org.joda.time.TestDateTimeZoneCutover::testBug3192457_adjustOffset
  - org.joda.time.TestDateTimeZoneCutover::testDateTimeCreation_london
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_roundFloor_hour_NewYork_Spring_preCutover
  - org.joda.time.TestDateTimeZoneCutover::test_DateTime_plusHour_NewYork_Autumn
  - org.joda.time.TestDateTimeZone::testCommentParse
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyToIntervalMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfCeilingMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyGetDayOfWeek
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddLongMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMinimumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextLocaleMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertySetTextMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRemainderMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyAddWrapFieldMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyWithMaximumValueDayOfMonth
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfFloorMonthOfYear
  - org.joda.time.TestDateMidnight_Properties::testPropertyRoundHalfEvenMonthOfYear
  - org.joda.time.TestDateMidnight_Constructors::testParse_noFormatter
  - org.joda.time.TestDateMidnight_Constructors::testParse_formatter
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullChronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_DateTimeZone
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_Chronology
  - org.joda.time.TestDateMidnight_Constructors::testConstructor_int_int_int_nullDateTimeZone
  - org.joda.time.TestDateMidnight_Basics::testIsEqual
  - org.joda.time.TestDateMidnight_Basics::testIsAfter
  - org.joda.time.TestDateMidnight_Basics::testWithers
  - org.joda.time.TestDateMidnight_Basics::testIsBefore
  - org.joda.time.TestDateMidnight_Basics::testWithFields_RPartial
Failing tests: 353
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return millis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return serialVersionUID-offset;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return next;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetFromLocal(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return prev;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetToAdd(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return localInstant-(iTimeField?offset:getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
DateTimeZone zone=getZone();
int offset=zone.getOffsetToAdd(localInstant);
localInstant-=offset;
if(offset!=zone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.ZonedChronology,139
org.joda.time.chrono.ZonedChronology,140
org.joda.time.chrono.ZonedChronology,141
org.joda.time.chrono.ZonedChronology,144
org.joda.time.chrono.ZonedChronology,403
UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  start=instant;
}

UNKNOWN ASTNode type : catch (IllegalArgumentException e) {
  end=instant;
}

UNKNOWN ASTNode type : catch (ArithmeticException e) {
  end=instant;
}

========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.isLeap(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getLeapAmount(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.remainder(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getMinimumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getMaximumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iGregorianField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iJulianField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=iField.roundFloor(localInstant);
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=iField.roundCeiling(localInstant);
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.getYearMillis(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(instant,null);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return field.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.roundFloor(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(iDurationField);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(iField);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==null){
newZone=DateTimeZone.getDefault();
}
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==this){
return instant;
}
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getMillis(localInstant,instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().add(instant,localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return FieldUtils.safeAdd(instant,localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getDaysInYearMonth(getYear(instant),getMonthOfYear(instant,getYear(instant)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return julianToGregorianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.julianToGregorianByWeekyear(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return julianToGregorianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.julianToGregorianByYear(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return gregorianToJulianByWeekyear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.gregorianToJulianByWeekyear(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return gregorianToJulianByYear(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.gregorianToJulianByYear(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iGregorianField.isLeap(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iJulianField.isLeap(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iGregorianField.getLeapAmount(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iJulianField.getLeapAmount(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iZone.getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iGregorianField.getMinimumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iJulianField.getMinimumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
return iZone.getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iGregorianField.getMaximumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iJulianField.getMaximumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getValue(instant,localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(localInstant,null);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getValueAsLong(instant,localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.nextTransition(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(localInstant<serialVersionUID){
instant=end;
}
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return compareReverse(iField.getDurationField(),obj.iField.getDurationField());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(compareReverse(iField.getRangeDurationField(),obj.iField.getRangeDurationField())!=0){
return result;
}
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getDifference(instant+(iTimeField?getOffsetToAdd(localInstant):getOffsetToAdd(minuendInstant)),localInstant+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getDifferenceAsLong(instant+(iTimeField?getOffsetToAdd(localInstant):getOffsetToAdd(minuendInstant)),localInstant+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return new StringBuffer(requirePrinter().estimatePrintedLength()).toString();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
printTo(new StringBuffer(requirePrinter().estimatePrintedLength()),instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().isLeap(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(instant,null);
return iField.isLeap(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getLeapAmount(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(instant,null);
return iField.getLeapAmount(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getMinimumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(instant,null);
return iField.getMinimumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getMaximumValue(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
checkLimits(instant,null);
return iField.getMaximumValue(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(iField==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
if(iField==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
return field.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=getChronology().withZone(iZone).dayOfMonth().roundFloor(instant);
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getNameKey(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getOffset(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return iField.getStandardOffset(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return add(instant,-serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(serialVersionUID==Long.MIN_VALUE){
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
localInstant=iField.add(localInstant,serialVersionUID);
long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getWrappedField().getMillis(instant,localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getChronology().year().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MONTH_OF_YEAR :

long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getChronology().hourOfDay().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MINUTE_OF_HOUR :

long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getChronology().secondOfMinute().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MILLIS_OF_SECOND :

long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MONTH_OF_YEAR :

long localInstant=iZone.convertUTCToLocal(instant);
return getChronology().year().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
return getChronology().dayOfMonth().get(getLocalMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
case MILLIS_OF_DAY :

long localInstant=iZone.convertUTCToLocal(instant);
return iField.get(localInstant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.ZonedChronology,404
org.joda.time.chrono.ZonedChronology,462
UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

UNKNOWN ASTNode type : catch (Exception e) {
  RuleSet rs=ruleSets.get(zone.iRules);
  if (rs == null) {
    throw new IllegalArgumentException("Rules not found: " + zone.iRules);
  }
  rs.addRecurring(builder,zone.iFormat);
}

========
if(get(result)!=iCutover){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
result=iField.set(instant,value);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=iCutover){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result=iField.set(instant,value);
if(get(result)!=iCutover){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result=iField.set(instant,value);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
result=iField.set(instant,value);
if(get(result)!=iCutover){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=upperBound){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),Integer.valueOf(value),Integer.valueOf(result));
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=iSkip){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value!=iValues[i]){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalInstantException(localInstant,iZone.getID());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=subtrahendInstant){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(localInstant<result){
return -getDifference(subtrahendInstant,minuendInstant);
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
value++;
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
FieldUtils.verifyValueBounds(this,value,result,getMaximumValue());
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=iSkip){
value++;
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return value/value;
}else {
return ((value+1)/iDivisor)-1;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.get(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=YEAR_LIMIT){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalInstantException("Illegal instant due to time zone offset transition ("+iZone);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==0){
return result;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=year){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=result){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=era){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,result,DateTimeConstants.BCE,DateTimeConstants.CE);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,value,result,getMaximumValue());
if(get(result)!=iSkip){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==getMaximumValue()){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=getMaximumValue()){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=max){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
FieldUtils.verifyValueBounds(this,value,1,getMaximumValue());
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==getMaximumValue()){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==getValue(indexOfSupported(result))){
return this;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==getValue(indexOfSupported(result))){
return this;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)==year){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(value==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==Integer.MIN_VALUE){
return subtract(result,(long)value);
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super();
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
cause=new int[]{result};
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==0){
return this;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Cannot convert period to duration as "+iDurationField.getName());
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(compareReverse(iField.getRangeDurationField(),obj.iField.getRangeDurationField())!=0){
return result;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if((get(result)&1)==0){
return ceiling;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=dayOfMonth){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=maxValue){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("MIN > MAX");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)==MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(value==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)==MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==DateTimeConstants.CE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=DateTimeConstants.CE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=CE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)==DateTimeConstants.BCE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=DateTimeConstants.BCE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=BCE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(--value<0){
return 0;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
negative=true;
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
value-='0';
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(--value<0){
return 0;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
value-='0';
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
value-='0';
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(--value<0){
return 0;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
value-='0';
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(--value<0){
return 0;
}
throw ex;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iGregorianField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iJulianField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=minuteOfHour().set(instant,value);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
checkLimits(instant,null);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
checkLimits(result,"resulting");
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=dayOfMonth().set(instant,value);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=iSkip){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
value++;
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
localInstant=getChronology().minuteOfHour().set(instant,value);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=getChronology().millisOfSecond().set(instant,result);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=getChronology().minuteOfHour().set(instant,value);
localInstant=getChronology().millisOfSecond().set(instant,result);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==0){
return instant;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value==result){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=result){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=max){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
FieldUtils.verifyValueBounds(this,value,1,result);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==result){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
checkLimits(instant,null);
checkLimits(result,"resulting");
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=getChronology().dayOfMonth().set(instant,value);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=getChronology().dayOfMonth().set(instant,value);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),null,Integer.valueOf(field.getMaximumValue()));
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
if(iZone.getOffsetFromLocal(localInstant)!=iZone.getOffset(localInstant)){
throw new IllegalInstantException(localInstant,zone.getID());
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
FieldUtils.verifyValueBounds(this,value,getMinimumValue(),getMaximumValueForSet(instant,value));
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(localInstant<serialVersionUID){
result=iField.get(iCutover);
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iGregorianField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant+(value-get(instant))*serialVersionUID;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
FieldUtils.verifyValueBounds(this,value,getMinimumValue(),getMaximumValue());
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=upperBound){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=millis){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,localInstant);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(localInstant>=serialVersionUID){
return iField.getMaximumValue(instant);
}
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iJulianField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(localInstant>=serialVersionUID){
return iField.getMaximumValue(instant);
}
localInstant=iJulianField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(localInstant>=serialVersionUID){
return iField.getMaximumValue(instant);
}
localInstant=iField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
if(localInstant>=serialVersionUID){
return iField.getMaximumValue(instant);
}
localInstant=iJulianField.set(localInstant,result);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iGregorianField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iJulianField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return value/value;
}else {
return ((value+1)/iDivisor)-1;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
if(iZone==null){
newZone=DateTimeZone.getDefault();
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return value%value;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
localInstant=setDayOfMonth(ISOChronology.getInstanceUTC(),millis);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value!=iValues[i]){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=setDayOfMonthNext(cause,next);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
localInstant=setDayOfMonthPrevious(cause,prev);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.getYearMillis(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=yearStartMillis){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.setYear(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.remainder(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(localInstant<instant){
return -getDifference(subtrahendInstant,minuendInstant);
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(remainder(localInstant)<remainder(instant)){
result--;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=era){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
FieldUtils.verifyValueBounds(this,value,DateTimeConstants.BCE,DateTimeConstants.CE);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==Integer.MIN_VALUE){
return subtract(instant,(long)value);
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant-(iTimeField?getOffsetToAdd(instant):getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
instant=iField.add(instant+getOffsetToAdd(instant),value);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.roundCeiling(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if((get(result)&1)==0){
return ceiling;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=field.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=zone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=cause.dayOfMonth().roundFloor(instant);
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=instant){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=offset){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=instant){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=instant){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=offset){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=year){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(get(result)==value){
return result;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(get(result)==value){
return result;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iGregorianField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iJulianField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iGregorianField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iJulianField.add(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
super();
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
result=new int[]{value};
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("The field type must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=YEAR_LIMIT){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Cannot convert period to duration as "+iDurationField.getName());
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
FieldUtils.verifyValueBounds(this,value,ERA_VALUE,ERA_VALUE);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==null){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Field must not be null");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result!=0){
return result;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
checkLimits(result,null);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=instant){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
if(serialVersionUID==Long.MAX_VALUE){
return ;
}
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=months){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==serialVersionUID){
return add(instant,i_months);
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=DateTimeZone.UTC){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=UTC){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==DateTimeZone.UTC){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==UTC){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==0){
return this;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
localInstant+=getMillisOfDay(localInstant);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
localInstant+=getMillisOfDay(localInstant);
return localInstant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=scalar){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=maxDom){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(serialVersionUID==0||value==0){
return instant;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=scalar){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(serialVersionUID==0||value==0){
return instant;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
instant=getYearMonthDayMillis(value,1,result);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
instant+=getMillisOfDay(instant);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.roundCeiling(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return roundCeiling(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
if(value>1){
result-=((long)DateTimeConstants.MILLIS_PER_WEEK)*(wow-1);
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=iCutoverMillis){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new IllegalArgumentException("Specified date does not exist");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=maxDay){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return serialVersionUID+serialVersionUID;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(instant==0||value==0){
return this;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
instant++;
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result<instant){
return prev;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
value=(i>=0)?(i+1):~i;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant<serialVersionUID){
instant=end;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
result=super.add(instant,instant);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return iTimeField?instant:instant-serialVersionUID;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return iTimeField?instant+serialVersionUID:instant;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
instant=iField.add(instant+getOffsetToAdd(instant),result);
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
instant=iField.add(instant+getOffsetToAdd(instant),result);
return instant-(iTimeField?getOffsetToAdd(instant):getOffsetFromLocalToSubtract(instant));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if((-value)%value-value+1==0){
return 0+value;
}
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value>=value){
throw new IllegalArgumentException("MIN > MAX");
}
value-=value;
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value>=0){
return (value%value-value+1)+value;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return serialVersionUID-1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result>Long.MIN_VALUE){
return instant-1;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
value=~i;
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return serialVersionUID-1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result>Long.MIN_VALUE){
return instant-1;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result>Long.MIN_VALUE){
return instant-1;
}
throw ex;
}
return serialVersionUID-1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(result>Long.MIN_VALUE){
return instant-1;
}
throw ex;
}
return serialVersionUID-1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value==Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value==Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==Long.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=offset){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=scalar){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(instant==0||value==0){
return this;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant-instant%serialVersionUID;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant-instant%serialVersionUID-iUnitMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return instant-instant%serialVersionUID+iUnitMillis;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
if(value==0){
return result;
}
throw ex;
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(value==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==Integer.MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)==MIN_VALUE){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}
return result;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long localInstant=iZone.convertUTCToLocal(instant);
localInstant=iField.set(localInstant,value);
long result=iZone.convertLocalToUTC(localInstant,false,instant);
if(get(result)!=value){
IllegalInstantException cause=new IllegalInstantException(localInstant,iZone.getID());
IllegalFieldValueException ex=new IllegalFieldValueException(iField.getType(),Integer.valueOf(value),cause.getMessage());
ex.initCause(cause);
throw ex;
}
return (instant+1)%serialVersionUID+iUnitMillis-1;

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.ZonedChronology,463
org.joda.time.chrono.ZonedChronology,464
org.joda.time.chrono.ZonedChronology,465
org.joda.time.chrono.ZonedChronology,471
org.joda.time.chrono.ZonedChronology,496
org.joda.time.chrono.ZonedChronology,500
org.joda.time.chrono.ZonedChronology,514
org.joda.time.chrono.ZonedChronology,547
========
return iField.getMinimumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iGregorianField.getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLenient();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getRangeDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.isSupported();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMinimumValue(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.get(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.roundFloor(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsText(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsShortText(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLeap(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getMaximumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.roundCeiling(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfFloor(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfCeiling(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfEven(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.remainder(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMinimumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,null);
return iField.getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifference(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getDifferenceAsLong(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMinimumValue(getReadablePartial());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMinimumValue(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.get(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.isLeap(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.remainder(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMaximumValue(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return compareReverse(iField.getDurationField(),obj.iField.getDurationField());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compareReverse(iField.getRangeDurationField(),obj.iField.getRangeDurationField())!=0){
return result;
}
return iField.getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifference(serialVersionUID+(iTimeField?getOffsetToAdd(serialVersionUID):getOffsetToAdd(minuendInstant)),serialVersionUID+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifferenceAsLong(serialVersionUID+(iTimeField?getOffsetToAdd(serialVersionUID):getOffsetToAdd(minuendInstant)),serialVersionUID+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.add(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.chrono.ZonedChronology,564
========
return iField.getMaximumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iGregorianField.getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iJulianField.getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLenient();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getRangeDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMinimumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.isSupported();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapDurationField();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMaximumValue(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.get(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.roundFloor(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsText(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getAsShortText(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.isLeap(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getMinimumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.roundCeiling(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfFloor(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfCeiling(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.roundHalfEven(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.remainder(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getWrappedField().getMaximumValue(serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
checkLimits(serialVersionUID,null);
return iField.getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifference(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.getDifferenceAsLong(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMaximumValue(getReadablePartial());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return getField().getMaximumValue(getMillis());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.get(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.isLeap(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getLeapAmount(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return iField.remainder(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getMinimumValue(iZone.convertUTCToLocal(serialVersionUID));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return compareReverse(iField.getDurationField(),obj.iField.getDurationField());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(compareReverse(iField.getRangeDurationField(),obj.iField.getRangeDurationField())!=0){
return result;
}
return iField.getMaximumValue();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifference(serialVersionUID+(iTimeField?getOffsetToAdd(serialVersionUID):getOffsetToAdd(minuendInstant)),serialVersionUID+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.getDifferenceAsLong(serialVersionUID+(iTimeField?getOffsetToAdd(serialVersionUID):getOffsetToAdd(minuendInstant)),serialVersionUID+offset);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
return iField.add(serialVersionUID,serialVersionUID);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatterBuilder,549
========
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==false){
throw new IllegalArgumentException("Field type must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field \'"+fieldType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatterBuilder,552
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,false));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new FixedNumber(fieldType,iMaxDigits,false));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(iMaxDigits<=0){
throw new IllegalArgumentException("Illegal number of digits: "+numDigits);
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new FixedNumber(fieldType,iMaxDigits,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==false){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field \'"+fieldType);
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
if(iMaxDigits<=1){
return append0(new UnpaddedNumber(fieldType,iMaxDigits,false));
}else {
return append0(new PaddedNumber(fieldType,maxDigits,false,minDigits));
}
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
if(iMaxDigits<=1){
return append0(new UnpaddedNumber(fieldType,iMaxDigits,true));
}else {
return append0(new PaddedNumber(fieldType,maxDigits,true,minDigits));
}
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("No printer or parser supplied");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
clearPrefix();
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Literal must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
append0(new Literal(iValue),literal);
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
clearPrefix();
if(fieldType==null){
throw new IllegalArgumentException("Literal must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
iParsers[iType]=iParsers[i];
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(null,new MatchingParser(iParsers));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TimeZoneName(TimeZoneName.LONG_NAME,iParseLookup),pp);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TimeZoneName(TimeZoneName.SHORT_NAME,iParseLookup),pp);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new CharacterLiteral(iValue.charAt(0)));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
default :

if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
return append0(new TextField(fieldType,true));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatterBuilder,976
========
return appendText(DateTimeFieldType.dayOfWeek());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return appendShortText(DateTimeFieldType.monthOfYear());

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
return appendDecimal(DateTimeFieldType.dayOfWeek(),iMaxDigits,1);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,190
========
if(locale==getLocale()&&(locale!=null&&locale.equals(getLocale()))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(symbols.iLocale.get()==locale){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(locale==getLocale()||symbols.iLocale.get()==locale){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(locale!=null&&locale.equals(getLocale()))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(locale==getLocale()||(iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(locale==getLocale()||(iPivotYear!=null&&locale.equals(getLocale()))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(iPivotYear!=null&&locale.equals(getLocale()))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
Calendar.getInstance(getZone().toTimeZone(),locale).setTime(toDate());
if(locale==getLocale()||(locale!=null&&locale.equals(getLocale()))){
return this;
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,193
========
if((iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(locale!=null&&locale.equals(getLocale()))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(locale==getLocale()||(iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(locale==getLocale()||(iPivotYear!=null&&locale.equals(getLocale()))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(iPivotYear!=null&&iPivotYear.equals(iPivotYear))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iPivotYear==iPivotYear||(iPivotYear!=null&&locale.equals(getLocale()))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(locale==getLocale()&&(locale!=null&&locale.equals(getLocale()))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(symbols.iLocale.get()==locale){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(locale==getLocale()||symbols.iLocale.get()==locale){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),locale).setTime(toDate());
if(locale==getLocale()||(locale!=null&&locale.equals(getLocale()))){
return this;
}
return new DateTimeFormatter(iPrinter,iParser,locale,iOffsetParsed,iChrono,iZone,iPivotYear,iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,204
org.joda.time.format.DateTimeFormatter,701
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("No parser supplied");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new UnsupportedOperationException("Parsing not supported");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
DateTimeParser parser=requireParser();
if(instant==null){
if(position<=position){
return position;
}
throw new IllegalArgumentException("Instant must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instant.setChronology(iChrono);
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
org.joda.time.format.DateTimeFormatter,702
org.joda.time.format.DateTimeFormatter,706
========
if(instant==null){
throw new IllegalArgumentException("ReadableInstant objects must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(getMillis()==instantMillis){
return 0;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.set(this,instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.getMillis()<instantMillis){
return -1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(this.getMillis()>instantMillis){
return 1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant!=null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(null==null){
chrono=ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("The time must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
chrono=chrono.withZone(iZone);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("The partial must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
super();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Interval must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
if(instant==null){
return ISOChronology.getInstance();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new LimitException(text,true);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new LimitException(text,false);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return DateTimeUtils.currentTimeMillis();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
instant.setZone(iZone);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return containsNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return isBeforeNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return isAfterNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getOffset(DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(instant!=iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getField().getDifference(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
if(instant==null){
return getField().getDifferenceAsLong(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantMillis^(start>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(getEndMillis()^(end>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==Long.MIN_VALUE){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(parser.parseInto(new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear),text,0)>=0){
if(newPos>=text.length()){
return new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear).computeMillis(true,text);
}
}else {
newPos=~newPos;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
instant+=position;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,707
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withZone(iZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal==instantMillis){
return 0;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,parser);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal<instantMillis){
return -1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal>instantMillis){
return 1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,instantMillis,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=checkChronology(ConverterManager.getInstance().getInstantConverter(instant).getChronology(instant,iChrono));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),iChrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantMillis=chrono.set(this,instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.dayOfMonth().roundFloor(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.millisOfDay().get(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantMillis,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=iFieldType.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=millis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
boolean instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
new StringBuffer().append("PT");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
iChrono=chrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,getEndMillis(),getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(getStartMillis(),instantMillis,getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iLocale==null){
locale=Locale.getDefault();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(position==instantLocal&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal!=instantMillis){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),position));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
checkYearsAndMonths("Minutes");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
instantMillis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantMillis^(start>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantLocal^(end>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,708
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instantLocal;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=chrono.getZone();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(zone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant instanceof ReadableDateTime){
ReadableDateTime (ReadableDateTime)instant=(ReadableDateTime)instant;
Chronology chrono=DateTimeUtils.getChronology(rdt.getChronology());
DateTimeZone chrono.getZone()=instantChrono.getZone();
if(zone!=null){
instantLocal=zone.getMillisKeepLocal(getZone(),instantMillis);
}
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instant==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.dayOfMonth().roundFloor(instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantLocal,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getOffset(instantMillis-position)==position){
return instantMillis-position;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=chrono.set(this,instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=iFieldType.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getChronology()==chrono){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super();
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=newChronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.dayOfMonth().roundFloor(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().get(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
MonthDay new MonthDay(this,chrono)=new MonthDay(this,newChronology);
newChronology.validate(newMonthDay,getValues());
return newMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
TimeOfDay new TimeOfDay(this,chrono)=new TimeOfDay(this,newChronology);
newChronology.validate(newTimeOfDay,getValues());
return newTimeOfDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
YearMonth new YearMonth(this,chrono)=new YearMonth(this,newChronology);
newChronology.validate(newYearMonth,getValues());
return newYearMonth;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==getChronology()){
return this;
}else {
YearMonthDay new YearMonthDay(this,chrono)=new YearMonthDay(this,newChronology);
newChronology.validate(newYearMonthDay,getValues());
return newYearMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(next,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().add(next,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonthNext(chrono,next);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().set(prev,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.millisOfDay().add(prev,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=setDayOfMonthPrevious(chrono,prev);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instantUTC^getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=checkChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantLocal,getEndMillis(),getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(getStartMillis(),instantLocal,getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iLocale==null){
locale=Locale.getDefault();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==iZone.getOffset(instantMillis)&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(instantLocal^(start>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+((int)(getEndMillis()^(end>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
position=31*result+getChronology().hashCode();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==0){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
new StringBuffer(48).append('/');
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(nextTransition(instantLocal-position)==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(getChronology().millisOfDay().set(getMillis(),ISOChronology.getInstanceUTC().millisOfDay().get(instantMillis)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal)<0&&(instantLocal^position)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
org.joda.time.format.DateTimeFormatter,709
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=instantLocal;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.getZone();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setValues(chrono.get(this,instantLocal,instantMillis));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(defaultYear==position){
return instantLocal;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant.setChronology(chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setPeriod(instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getChronology(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iDefaultYear);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
instant=chrono.dayOfMonth().roundFloor(instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(text);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iLocale);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setChronology(getChronology().withZone(iZone));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.set(this,instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=iBase.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
super.setInterval(instantMillis,instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(chrono.getZone()!=null){
instantLocal=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setTime(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantMillis^instantLocal)<0&&(instantUTC^defaultYear)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iChrono!=null){
chrono=iChrono;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("The instant must not be null");
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
  - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 1
Running ant (run.dev.tests)................................................ OK
Running ant (compile.tests)................................................ OK
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getFieldType(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iZone);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(Calendar.ERA);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(zone.iRules);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return era.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return month.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iPivotYear!=null){
return day.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
iChrono=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.get(this,instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(position==0){
return instant;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(text!=null){
return name;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instant);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(r.iName);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(iLocale==null){
locale=Locale.getDefault();
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().roundCeiling(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
defaultYear=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getNameKey(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(position==defaultYear&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().nextTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(instantLocal==(instantLocal-position)){
nextLocal=Long.MAX_VALUE;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().nextTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(iZone!=null){
return zone;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=hourOfDay().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=minuteOfHour().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=secondOfMinute().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,position);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
if((instantLocal^instantLocal)<0&&(instantLocal^position)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().previousTransition(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantMillis);

========
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 120 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j compile
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_newYork_startOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
Failing tests: 0
FAILED TEST:org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COUNT THESE===> Subject [_name=time, _id=7, _ssrc=/src/main/java, _tsrc=/src/test/java, _sbin=/target/classes, _tbin=/target/test-classes, _dependency=null] org.joda.time.format.TestDateTimeFormatter testParseInto_monthDay_feb29_tokyo_endOfYear
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 30 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test -t org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
Failing tests: 0
TESTING : time_7
COMMAND:cd /home/mmotwani/mywork1dir/Defects4Java7/defects4j/SIMFIX_RQ2_20_4/time/time_7_buggy && /usr/bin/timeout 600 /mnt/nfs/work1/brun/mmotwani/Defects4Java7/defects4j//framework/bin/defects4j test
Failing tests: 0
Successfully repair!
